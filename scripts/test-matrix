#!/usr/bin/env ruby
# frozen_string_literal: true

require "date"
require "json"
require "net/http"
require "uri"

response = Net::HTTP.get_response(URI("https://raw.githubusercontent.com/nodejs/Release/main/schedule.json"))
response.value

schedule = JSON.parse(response.body)

node_versions = schedule.filter_map do |version, dates|
  version.delete_prefix("v") if (Date.iso8601(dates.fetch("start"))...Date.iso8601(dates.fetch("end"))).include?(Date.today)
end

latest_node_version = node_versions.last

minimum_cerbos_version = Gem::Version.new("0.16.0")
available_cerbos_versions = []

Net::HTTP.start "api.github.com", 443, use_ssl: true do |http|
  page = 1
  until available_cerbos_versions.include?(minimum_cerbos_version)
    request = Net::HTTP::Get.new("/repos/cerbos/cerbos/releases?page=#{page}&per_page=100")
    request["Accept"] = "application/vnd.github.v3+json"

    response = http.request(request)
    response.value

    releases = JSON.parse(response.body)

    releases.each do |release|
      version = Gem::Version.new(release.fetch("tag_name").delete_prefix("v"))
      available_cerbos_versions << version if version >= minimum_cerbos_version
    end
  end
end

*previous_cerbos_versions, latest_cerbos_version =
  available_cerbos_versions
    .group_by { |version| version.segments[0..1] }
    .map { |_, patch_versions| patch_versions.max }
    .sort

prerelease_cerbos_version = "#{latest_cerbos_version.bump}.0-prerelease"

matrix = {
  include: [
    *previous_cerbos_versions.map { |previous_cerbos_version| {node: latest_node_version, cerbos: previous_cerbos_version} },
    *node_versions.map { |node_version| {node: node_version, cerbos: latest_cerbos_version} },
    {node: latest_node_version, cerbos: prerelease_cerbos_version}
  ]
}

puts JSON.pretty_generate(matrix)

output_file = ENV["GITHUB_OUTPUT"]
File.write output_file, "matrix=#{matrix.to_json}" if output_file
