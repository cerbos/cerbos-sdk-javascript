// Copyright 2021-2025 Zenauth Ltd.
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package cerbos.cloud.store.v1;

import "buf/validate/validate.proto";
import "google/api/visibility.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";

option csharp_namespace = "Cerbos.Api.Cloud.V1.Store";
option go_package = "github.com/cerbos/cloud-api/genpb/cerbos/cloud/store/v1;storev1";
option java_package = "dev.cerbos.api.cloud.v1.store";

message StringMatch {
  message InList {
    repeated string values = 1 [(buf.validate.field).repeated = {
      max_items: 10
      items: {
        string: {min_len: 1}
      }
    }];
  }

  oneof match {
    option (buf.validate.oneof).required = true;
    string equals = 1;
    string like = 2;
    InList in = 3;
  }
}

message FileFilter {
  optional StringMatch path = 1;
}

message ListFilesRequest {
  string store_id = 1 [(buf.validate.field).string.len = 12];
  optional FileFilter filter = 2;
}

message ListFilesResponse {
  int64 store_version = 1;
  repeated string files = 2;
}

message GetFilesRequest {
  string store_id = 1 [(buf.validate.field).string.len = 12];
  repeated string files = 2 [(buf.validate.field).repeated = {
    min_items: 1
    max_items: 10
    unique: true
    items: {
      string: {min_len: 1}
    }
  }];
}

message File {
  string path = 1 [(buf.validate.field).string = {
    min_len: 1
    max_len: 1024
  }];
  bytes contents = 2 [(buf.validate.field).bytes = {
    min_len: 1
    max_len: 5242880
  }];
}

message GetFilesResponse {
  int64 store_version = 1;
  repeated File files = 2;
}

message ChangeDetails {
  message Git {
    string repo = 1;
    string ref = 2;
    string hash = 3;
    string message = 4;
    string committer = 5;
    google.protobuf.Timestamp commit_date = 6;
    string author = 7;
    google.protobuf.Timestamp author_date = 8;
  }

  message Internal {
    string source = 1;
    map<string, google.protobuf.Value> metadata = 2;
  }

  message Uploader {
    string name = 1;
    map<string, google.protobuf.Value> metadata = 2;
  }

  string description = 1;
  Uploader uploader = 2;
  oneof origin {
    Git git = 3;
    Internal internal = 4;
  }
}

message FileOp {
  oneof op {
    option (buf.validate.oneof).required = true;
    File add_or_update = 1;
    string delete = 2;
  }
}

message ModifyFilesRequest {
  message Condition {
    int64 store_version_must_equal = 1 [(buf.validate.field).int64.gte = 0];
  }

  string store_id = 1 [(buf.validate.field).string.len = 12];
  optional Condition condition = 2;
  repeated FileOp operations = 3 [(buf.validate.field).repeated = {
    min_items: 1
    max_items: 25
  }];
  optional ChangeDetails change_details = 4;
}

message FileError {
  enum Cause {
    CAUSE_UNSPECIFIED = 0;
    CAUSE_INVALID_FILE_PATH = 1;
    CAUSE_UNSUPPORTED_FILE_EXTENSION = 2;
    CAUSE_INVALID_FILE_CONTENTS = 3;
    CAUSE_DUPLICATE_FILE_PATH = 4;
    CAUSE_FILE_TOO_LARGE = 5;
  }

  string file = 1;
  Cause cause = 2;
  string details = 3;
}

message ModifyFilesResponse {
  int64 new_store_version = 1;
}

message ReplaceFilesRequest {
  message Condition {
    int64 store_version_must_equal = 1 [(buf.validate.field).int64.gte = 0];
  }

  message Files {
    repeated File files = 1 [
      (buf.validate.field).repeated.min_items = 1,
      (buf.validate.field).cel = {
        id: "files.unique_paths"
        message: "File paths must be unique"
        expression: "this.map(f, f.path).unique()"
      }
    ];
  }

  string store_id = 1 [(buf.validate.field).string.len = 12];
  optional Condition condition = 2;
  oneof contents {
    option (buf.validate.oneof).required = true;
    bytes zipped_contents = 3 [(buf.validate.field).bytes = {
      min_len: 22
      max_len: 15728640
    }];
    Files files = 5;
  }
  optional ChangeDetails change_details = 4;
}

message ErrDetailValidationFailure {
  repeated FileError errors = 1;
}

message ErrDetailNoUsableFiles {
  repeated string ignored_files = 1;
}

message ErrDetailConditionUnsatisfied {
  int64 current_store_version = 1;
}

message ErrDetailOperationDiscarded {
  int64 current_store_version = 1;
  repeated string ignored_files = 2;
}

message ErrDetailCannotModifyGitConnectedStore {}

message ReplaceFilesResponse {
  int64 new_store_version = 1;
  repeated string ignored_files = 2;
}

service CerbosStoreService {
  option (google.api.api_visibility).restriction = "EXPERIMENTAL";

  rpc ListFiles(ListFilesRequest) returns (ListFilesResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }
  rpc GetFiles(GetFilesRequest) returns (GetFilesResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }
  rpc ModifyFiles(ModifyFilesRequest) returns (ModifyFilesResponse) {}
  rpc ReplaceFiles(ReplaceFilesRequest) returns (ReplaceFilesResponse) {}
}
