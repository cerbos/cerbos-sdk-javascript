/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/admin/auditlog/list/{kind}": {
    get: operations["CerbosAdminService_ListAuditLogEntries"];
  };
  "/admin/policies": {
    get: operations["CerbosAdminService_ListPolicies"];
  };
  "/admin/policy": {
    get: operations["CerbosAdminService_GetPolicy"];
    put: operations["CerbosAdminService_AddOrUpdatePolicy2"];
    post: operations["CerbosAdminService_AddOrUpdatePolicy"];
  };
  "/admin/schema": {
    get: operations["CerbosAdminService_GetSchema"];
    put: operations["CerbosAdminService_AddOrUpdateSchema2"];
    post: operations["CerbosAdminService_AddOrUpdateSchema"];
    delete: operations["CerbosAdminService_DeleteSchema"];
  };
  "/admin/schemas": {
    get: operations["CerbosAdminService_ListSchemas"];
  };
  "/admin/store/reload": {
    get: operations["CerbosAdminService_ReloadStore"];
  };
  "/api/check": {
    /** [Deprecated: Use CheckResources API instead] Check whether a principal has permissions to perform the given actions on a set of resource instances. */
    post: operations["CerbosService_CheckResourceSet"];
  };
  "/api/check/resources": {
    /** Check a principal's permissions to a batch of heterogeneous resources and actions. */
    post: operations["CerbosService_CheckResources"];
  };
  "/api/check_resource_batch": {
    /** [Deprecated: Use CheckResources API instead] Check a principal's permissions to a batch of heterogeneous resources and actions. */
    post: operations["CerbosService_CheckResourceBatch"];
  };
  "/api/plan/resources": {
    /** Produce a query plan with conditions that must be satisfied for accessing a set of instances of a resource */
    post: operations["CerbosService_PlanResources"];
  };
  "/api/playground/evaluate": {
    post: operations["CerbosPlaygroundService_PlaygroundEvaluate"];
  };
  "/api/playground/proxy": {
    post: operations["CerbosPlaygroundService_PlaygroundProxy"];
  };
  "/api/playground/test": {
    post: operations["CerbosPlaygroundService_PlaygroundTest"];
  };
  "/api/playground/validate": {
    post: operations["CerbosPlaygroundService_PlaygroundValidate"];
  };
  "/api/server_info": {
    /** Get information about the server e.g. server version */
    get: operations["CerbosService_ServerInfo"];
  };
  "/api/x/plan/resources": {
    /** Produce a query plan with conditions that must be satisfied for accessing a set of instances of a resource */
    post: operations["CerbosService_PlanResources2"];
  };
}

export interface definitions {
  /** @description JWT from the original request */
  AuxDataJWT: {
    /**
     * @description JWT from the original request
     * @example eyJhbGciOiJFUzM4NCIsImtpZCI6IjE5TGZaYXRFZGc4M1lOYzVyMjNndU1KcXJuND0iLCJ0eXAiOiJKV1QifQ.eyJhdWQiOlsiY2VyYm9zLWp3dC10ZXN0cyJdLCJjdXN0b21BcnJheSI6WyJBIiwiQiIsIkMiXSwiY3VzdG9tSW50Ijo0MiwiY3VzdG9tTWFwIjp7IkEiOiJBQSIsIkIiOiJCQiIsIkMiOiJDQyJ9LCJjdXN0b21TdHJpbmciOiJmb29iYXIiLCJleHAiOjE5NDk5MzQwMzksImlzcyI6ImNlcmJvcy10ZXN0LXN1aXRlIn0.WN_tOScSpd_EI-P5EI1YlagxEgExSfBjAtcrgcF6lyWj1lGpR_GKx9goZEp2p_t5AVWXN_bjz_sMUmJdJa4cVd55Qm1miR-FKu6oNRHnSEWdMFmnArwPw-YDJWfylLFX
     */
    token: string;
    /**
     * @description Key ID to use when decoding the token (defined in the Cerbos server configuration)
     * @example my-keyset
     */
    keySetId?: string;
  };
  CheckOutputActionEffect: {
    effect?: definitions["v1Effect"];
    policy?: string;
    scope?: string;
  };
  CheckResourceBatchRequestBatchEntry: {
    /**
     * @description List of actions being performed on the resource.
     * @example view:public,comment
     */
    actions: string[];
    resource?: definitions["enginev1Resource"];
  };
  CheckResourcesRequestResourceEntry: {
    /**
     * @description List of actions being performed on the resource.
     * @example view:public,comment
     */
    actions: string[];
    resource?: definitions["enginev1Resource"];
  };
  CheckResourcesResponseResultEntry: {
    resource?: definitions["CheckResourcesResponseResultEntryResource"];
    /**
     * @description Mapping of each action to an effect.
     * @example [object Object]
     */
    actions?: { [key: string]: definitions["v1Effect"] };
    /** @description List of validation errors (if schema validation is enabled) */
    validationErrors?: definitions["v1ValidationError"][];
    /**
     * @description Metadata about policy evaluation
     * @example [object Object]
     */
    meta?: definitions["CheckResourcesResponseResultEntryMeta"];
  };
  /** @description Metadata about request evaluation. */
  CheckResourcesResponseResultEntryMeta: {
    /**
     * @description Metadata about the effect calculated for each action on this resource instance.
     * @example [object Object]
     */
    actions?: {
      [
        key: string
      ]: definitions["CheckResourcesResponseResultEntryMetaEffectMeta"];
    };
    /**
     * @description Derived roles that were effective during policy evaluation.
     * @example owner
     */
    effectiveDerivedRoles?: string[];
  };
  /** @description Name of the action. */
  CheckResourcesResponseResultEntryMetaEffectMeta: {
    /**
     * @description Policy that matched to produce this effect.
     * @example album:object:default
     */
    matchedPolicy?: string;
    /**
     * @description Policy scope that matched to produce this effect.
     * @example acme.corp.base
     */
    matchedScope?: string;
  };
  CheckResourcesResponseResultEntryResource: {
    /**
     * @description ID of the resource instance
     * @example XX125
     */
    id?: string;
    /**
     * @description Name of the resource kind being accessed.
     * @example album:photo
     */
    kind?: string;
    /**
     * @description The policy version to use to evaluate this request. If not specified, will default to the server-configured default version.
     * @example default
     */
    policyVersion?: string;
    /**
     * @description A dot-separated scope that describes the hierarchy this resource belongs to. This is used for determining policy inheritance.
     * @example acme.corp
     */
    scope?: string;
  };
  ComponentVariable: {
    name?: string;
    expr?: string;
  };
  ExpressionOperand: {
    value?: { [key: string]: unknown };
    expression?: definitions["PlanResourcesResponseExpression"];
    variable?: string;
  };
  /** @description Entries between a time range. */
  ListAuditLogEntriesRequestTimeRange: {
    /**
     * Format: date-time
     * @description Start date in ISO 8601 format.
     * @example 2021-07-05T07:27:01+00:00
     */
    start: string;
    /**
     * Format: date-time
     * @description End date in ISO 8601 format.
     * @example 2021-07-05T07:27:01+00:00
     */
    end: string;
  };
  MatchExprList: {
    of?: definitions["v1Match"][];
  };
  /** @description Unique resource instance ID supplied in the request. */
  MetaActionMeta: {
    /**
     * @description Metadata about the effect calculated for each action on this resource instance.
     * @example [object Object]
     */
    actions?: {
      [key: string]: definitions["v1CheckResourceSetResponseMetaEffectMeta"];
    };
    /**
     * @description Derived roles that were effective during policy evaluation.
     * @example owner
     */
    effectiveDerivedRoles?: string[];
  };
  /** @description CEL expression */
  PlanResourcesResponseExpression: {
    /** @description Operator */
    operator?: string;
    operands?: definitions["ExpressionOperand"][];
  };
  PlanResourcesResponseFilter: {
    /** @description Filter kind. Defines whether the given action is always allowed, always denied or allowed conditionally. */
    kind?: definitions["PlanResourcesResponseFilterKind"];
    /** @description Filter condition. Only populated if kind is KIND_CONDITIONAL. */
    condition?: definitions["ExpressionOperand"];
  };
  /**
   * @default KIND_UNSPECIFIED
   * @enum {string}
   */
  PlanResourcesResponseFilterKind:
    | "KIND_UNSPECIFIED"
    | "KIND_ALWAYS_ALLOWED"
    | "KIND_ALWAYS_DENIED"
    | "KIND_CONDITIONAL";
  PlaygroundEvaluateResponseEvalResult: {
    action?: string;
    effect?: definitions["v1Effect"];
    policy?: string;
    effectiveDerivedRoles?: string[];
    validationErrors?: definitions["v1ValidationError"][];
  };
  PlaygroundEvaluateResponseEvalResultList: {
    results?: definitions["PlaygroundEvaluateResponseEvalResult"][];
  };
  PlaygroundFailureError: {
    file?: string;
    error?: string;
  };
  SchemasIgnoreWhen: {
    actions?: string[];
  };
  TestResultsDetails: {
    result?: definitions["TestResultsResult"];
    failure?: definitions["TestResultsFailure"];
    error?: string;
    engineTrace?: definitions["v1Trace"][];
  };
  TestResultsFailure: {
    expected?: definitions["v1Effect"];
    actual?: definitions["v1Effect"];
  };
  /**
   * @default RESULT_UNSPECIFIED
   * @enum {string}
   */
  TestResultsResult:
    | "RESULT_UNSPECIFIED"
    | "RESULT_SKIPPED"
    | "RESULT_PASSED"
    | "RESULT_FAILED"
    | "RESULT_ERRORED";
  TestResultsSuite: {
    file?: string;
    name?: string;
    principals?: definitions["v1TestResultsPrincipal"][];
    summary?: definitions["TestResultsSummary"];
    error?: string;
  };
  TestResultsSummary: {
    overallResult?: definitions["TestResultsResult"];
    /** Format: int64 */
    testsCount?: number;
    resultCounts?: definitions["TestResultsTally"][];
  };
  TestResultsTally: {
    result?: definitions["TestResultsResult"];
    /** Format: int64 */
    count?: number;
  };
  TraceComponent: {
    kind?: definitions["TraceComponentKind"];
    action?: string;
    derivedRole?: string;
    expr?: string;
    /** Format: int64 */
    index?: number;
    policy?: string;
    resource?: string;
    rule?: string;
    scope?: string;
    variable?: definitions["ComponentVariable"];
  };
  /**
   * @default KIND_UNSPECIFIED
   * @enum {string}
   */
  TraceComponentKind:
    | "KIND_UNSPECIFIED"
    | "KIND_ACTION"
    | "KIND_CONDITION_ALL"
    | "KIND_CONDITION_ANY"
    | "KIND_CONDITION_NONE"
    | "KIND_CONDITION"
    | "KIND_DERIVED_ROLE"
    | "KIND_EXPR"
    | "KIND_POLICY"
    | "KIND_RESOURCE"
    | "KIND_RULE"
    | "KIND_SCOPE"
    | "KIND_VARIABLE"
    | "KIND_VARIABLES";
  TraceEvent: {
    status?: definitions["TraceEventStatus"];
    effect?: definitions["v1Effect"];
    error?: string;
    message?: string;
    result?: { [key: string]: unknown };
  };
  /**
   * @default STATUS_UNSPECIFIED
   * @enum {string}
   */
  TraceEventStatus:
    | "STATUS_UNSPECIFIED"
    | "STATUS_ACTIVATED"
    | "STATUS_SKIPPED";
  /**
   * @default SOURCE_UNSPECIFIED
   * @enum {string}
   */
  ValidationErrorSource:
    | "SOURCE_UNSPECIFIED"
    | "SOURCE_PRINCIPAL"
    | "SOURCE_RESOURCE";
  /** @description Structured auxiliary data */
  cerbosenginev1AuxData: {
    jwt?: { [key: string]: { [key: string]: unknown } };
  };
  /** @description Structured auxiliary data useful for evaluating the request */
  cerbosrequestv1AuxData: {
    jwt?: definitions["AuxDataJWT"];
  };
  /** @description PDP Resources Query Plan Request */
  cerbosrequestv1PlanResourcesRequest: {
    /**
     * @description Optional application-specific ID useful for correlating logs for analysis.
     * @example c2db17b8-4f9f-4fb1-acfd-9162a02be42b
     */
    requestId?: string;
    /**
     * @description Action to be applied to each resource in the list.
     * @example view:public
     */
    action: string;
    principal?: definitions["enginev1Principal"];
    resource?: definitions["v1PlanResourcesRequestResource"];
    auxData?: definitions["cerbosrequestv1AuxData"];
    /** @description Opt to receive request processing metadata in the response. */
    includeMeta?: boolean;
  };
  /** @description A person or application attempting to perform the actions on the set of resources. */
  enginev1Principal: {
    /**
     * @description ID of the principal
     * @example bugs_bunny
     */
    id: string;
    /**
     * @description The policy version to use to evaluate this request. If not specified, will default to the server-configured default version.
     * @example default
     */
    policyVersion?: string;
    /**
     * @description Roles assigned to this principal from your identity management system.
     * @example user
     */
    roles: string[];
    /**
     * @description Key-value pairs of contextual data about this principal that should be used during policy evaluation.
     * @example [object Object]
     */
    attr?: { [key: string]: { [key: string]: unknown } };
    /**
     * @description A dot-separated scope that describes the hierarchy this principal belongs to. This is used for determining policy inheritance.
     * @example acme.corp
     */
    scope?: string;
  };
  enginev1Resource: {
    /**
     * @description Name of the resource kind being accessed.
     * @example album:photo
     */
    kind: string;
    /**
     * @description The policy version to use to evaluate this request. If not specified, will default to the server-configured default version.
     * @example default
     */
    policyVersion?: string;
    /**
     * @description ID of the resource instance
     * @example XX125
     */
    id: string;
    /**
     * @description Kay-value pairs of contextual data about this resource that should be used during policy evaluation.
     * @example [object Object]
     */
    attr?: { [key: string]: { [key: string]: unknown } };
    /**
     * @description A dot-separated scope that describes the hierarchy this resource belongs to. This is used for determining policy inheritance.
     * @example acme.corp
     */
    scope?: string;
  };
  googlerpcStatus: {
    /** Format: int32 */
    code?: number;
    message?: string;
    details?: definitions["protobufAny"][];
  };
  policyv1TestResults: {
    suites?: definitions["TestResultsSuite"][];
    summary?: definitions["TestResultsSummary"];
  };
  protobufAny: {
    "@type"?: string;
  } & { [key: string]: unknown };
  /**
   * @description `NullValue` is a singleton enumeration to represent the null value for the
   * `Value` type union.
   *
   *  The JSON representation for `NullValue` is JSON `null`.
   *
   *  - NULL_VALUE: Null value.
   * @default NULL_VALUE
   * @enum {string}
   */
  protobufNullValue: "NULL_VALUE";
  schemav1Schema: {
    /**
     * @description Unique identifier for the schema
     * @example principal.json
     */
    id: string;
    /**
     * Format: byte
     * @description JSON schema definition
     * @example [object Object]
     */
    definition: string;
  };
  v1AccessLogEntry: {
    callId?: string;
    /** Format: date-time */
    timestamp?: string;
    peer?: definitions["v1Peer"];
    metadata?: { [key: string]: definitions["v1MetaValues"] };
    method?: string;
    /** Format: int64 */
    statusCode?: number;
  };
  /** @description Add/update policy request */
  v1AddOrUpdatePolicyRequest: {
    /** @description List of policies. */
    policies: definitions["v1Policy"][];
  };
  /** @description Add/update policy response */
  v1AddOrUpdatePolicyResponse: {
    success?: { [key: string]: unknown };
  };
  /** @description Add/update schema request */
  v1AddOrUpdateSchemaRequest: {
    /** @description List of schemas. */
    schemas: definitions["schemav1Schema"][];
  };
  /** @description Add/update schema response */
  v1AddOrUpdateSchemaResponse: { [key: string]: unknown };
  /** @description Unique identifier for the resource instance. */
  v1AttributesMap: {
    /** @description Key-value pairs of contextual data about this instance that should be used during policy evaluation. */
    attr?: { [key: string]: { [key: string]: unknown } };
  };
  v1CheckInput: {
    requestId?: string;
    resource?: definitions["enginev1Resource"];
    principal?: definitions["enginev1Principal"];
    actions: string[];
    auxData?: definitions["cerbosenginev1AuxData"];
  };
  v1CheckOutput: {
    requestId?: string;
    resourceId?: string;
    actions?: { [key: string]: definitions["CheckOutputActionEffect"] };
    effectiveDerivedRoles?: string[];
    validationErrors?: definitions["v1ValidationError"][];
  };
  /** @description PDP Request */
  v1CheckResourceBatchRequest: {
    /**
     * @description Optional application-specific ID useful for correlating logs for analysis.
     * @example c2db17b8-4f9f-4fb1-acfd-9162a02be42b
     */
    requestId?: string;
    principal?: definitions["enginev1Principal"];
    /**
     * @description List of resources and actions.
     * @example [object Object]
     */
    resources: definitions["CheckResourceBatchRequestBatchEntry"][];
    auxData?: definitions["cerbosrequestv1AuxData"];
  };
  /** @description Policy evaluation response for a batch of resources. */
  v1CheckResourceBatchResponse: {
    /**
     * @description Request ID provided in the request.
     * @example c2db17b8-4f9f-4fb1-acfd-9162a02be42b
     */
    requestId?: string;
    /**
     * @description Result for each resource
     * @example [object Object]
     */
    results?: definitions["v1CheckResourceBatchResponseActionEffectMap"][];
  };
  v1CheckResourceBatchResponseActionEffectMap: {
    /**
     * @description Resource ID
     * @example XX125
     */
    resourceId?: string;
    /**
     * @description Mapping of each action to an effect.
     * @example [object Object]
     */
    actions?: { [key: string]: definitions["v1Effect"] };
    /** @description List of validation errors (if schema validation is enabled) */
    validationErrors?: definitions["v1ValidationError"][];
  };
  /** @description PDP Request */
  v1CheckResourceSetRequest: {
    /**
     * @description Optional application-specific ID useful for correlating logs for analysis.
     * @example c2db17b8-4f9f-4fb1-acfd-9162a02be42b
     */
    requestId?: string;
    /**
     * @description List of actions being performed on the set of resources.
     * @example view:public,comment
     */
    actions: string[];
    principal?: definitions["enginev1Principal"];
    resource?: definitions["v1ResourceSet"];
    /** @description Opt to receive request processing metadata in the response. */
    includeMeta?: boolean;
    auxData?: definitions["cerbosrequestv1AuxData"];
  };
  /** @description Policy evaluation response for a set of resources. */
  v1CheckResourceSetResponse: {
    /**
     * @description Request ID provided in the request.
     * @example c2db17b8-4f9f-4fb1-acfd-9162a02be42b
     */
    requestId?: string;
    /**
     * @description Results for each resource instance, keyed by the ID supplied in the request
     * @example [object Object]
     */
    resourceInstances?: {
      [key: string]: definitions["v1CheckResourceSetResponseActionEffectMap"];
    };
    /** @description Optional metadata about the request evaluation process */
    meta?: definitions["v1CheckResourceSetResponseMeta"];
  };
  v1CheckResourceSetResponseActionEffectMap: {
    /** @description Mapping of each action to an effect. */
    actions?: { [key: string]: definitions["v1Effect"] };
    /** @description List of validation errors (if schema validation is enabled) */
    validationErrors?: definitions["v1ValidationError"][];
  };
  /** @description Metadata about request evaluation. */
  v1CheckResourceSetResponseMeta: {
    /**
     * @description Metadata about resource instances.
     * @example [object Object]
     */
    resourceInstances?: { [key: string]: definitions["MetaActionMeta"] };
  };
  /** @description Name of the action. */
  v1CheckResourceSetResponseMetaEffectMeta: {
    /**
     * @description Policy that matched to produce this effect.
     * @example album:object:default
     */
    matchedPolicy?: string;
    /**
     * @description Policy scope that matched to produce this effect.
     * @example acme.corp.base
     */
    matchedScope?: string;
  };
  /** @description Check resources request */
  v1CheckResourcesRequest: {
    /**
     * @description Optional application-specific ID useful for correlating logs for analysis.
     * @example c2db17b8-4f9f-4fb1-acfd-9162a02be42b
     */
    requestId?: string;
    /** @description Add request processing metadata to the response. */
    includeMeta?: boolean;
    principal?: definitions["enginev1Principal"];
    /**
     * @description List of resources and actions.
     * @example [object Object]
     */
    resources: definitions["CheckResourcesRequestResourceEntry"][];
    auxData?: definitions["cerbosrequestv1AuxData"];
  };
  /** @description Response from the check resources API call. */
  v1CheckResourcesResponse: {
    /**
     * @description Request ID provided in the request.
     * @example c2db17b8-4f9f-4fb1-acfd-9162a02be42b
     */
    requestId?: string;
    /**
     * @description Result for each resource
     * @example [object Object]
     */
    results?: definitions["CheckResourcesResponseResultEntry"][];
  };
  v1Condition: {
    match?: definitions["v1Match"];
    script?: string;
  };
  v1DecisionLogEntry: {
    callId?: string;
    /** Format: date-time */
    timestamp?: string;
    peer?: definitions["v1Peer"];
    inputs?: definitions["v1CheckInput"][];
    outputs?: definitions["v1CheckOutput"][];
    error?: string;
  };
  /** @description Delete schema(s) response */
  v1DeleteSchemaResponse: { [key: string]: unknown };
  v1DerivedRoles: {
    name?: string;
    definitions?: definitions["v1RoleDef"][];
  };
  /**
   * @default EFFECT_UNSPECIFIED
   * @enum {string}
   */
  v1Effect:
    | "EFFECT_UNSPECIFIED"
    | "EFFECT_ALLOW"
    | "EFFECT_DENY"
    | "EFFECT_NO_MATCH";
  v1File: {
    fileName: string;
    /** Format: byte */
    contents: string;
  };
  /** @description Get policy response */
  v1GetPolicyResponse: {
    policies?: definitions["v1Policy"][];
  };
  /** @description Get schema(s) response */
  v1GetSchemaResponse: {
    schemas?: definitions["schemav1Schema"][];
  };
  /**
   * @default KIND_UNSPECIFIED
   * @enum {string}
   */
  v1ListAuditLogEntriesRequestKind:
    | "KIND_UNSPECIFIED"
    | "KIND_ACCESS"
    | "KIND_DECISION";
  /** @description Audit log stream. */
  v1ListAuditLogEntriesResponse: {
    accessLogEntry?: definitions["v1AccessLogEntry"];
    decisionLogEntry?: definitions["v1DecisionLogEntry"];
  };
  /** @description List of policies stored in the Cerbos server */
  v1ListPoliciesResponse: {
    policyIds?: string[];
  };
  /** @description List schema ids response */
  v1ListSchemasResponse: {
    schemaIds?: string[];
  };
  v1Match: {
    all?: definitions["MatchExprList"];
    any?: definitions["MatchExprList"];
    none?: definitions["MatchExprList"];
    expr?: string;
  };
  v1MetaValues: {
    values?: string[];
  };
  v1Metadata: {
    sourceFile?: string;
    annotations?: { [key: string]: string };
    /** Format: uint64 */
    hash?: string;
    storeIdentifer?: string;
  };
  v1Peer: {
    address?: string;
    authInfo?: string;
    userAgent?: string;
    forwardedFor?: string;
  };
  v1PlanResourcesRequestResource: {
    /**
     * @description Resource kind.
     * @example album:object
     */
    kind: string;
    /** @description Key-value pairs of contextual data about the resource that are known at a time of the request. */
    attr?: { [key: string]: { [key: string]: unknown } };
    /**
     * @description The policy version to use to evaluate this request. If not specified, will default to the server-configured default version.
     * @example default
     */
    policyVersion?: string;
    /** @description A dot-separated scope that describes the hierarchy this resource belongs to. This is used for determining policy inheritance. */
    scope?: string;
  };
  /** @description Resources query plan response for a set of resources. */
  v1PlanResourcesResponse: {
    /**
     * @description Request ID provided in the request.
     * @example c2db17b8-4f9f-4fb1-acfd-9162a02be42b
     */
    requestId?: string;
    /**
     * @description Action
     * @example view:public
     */
    action?: string;
    /**
     * @description Resource kind.
     * @example album:object
     */
    resourceKind?: string;
    /**
     * @description The policy version.
     * @example default
     */
    policyVersion?: string;
    /** @description Filter */
    filter?: definitions["PlanResourcesResponseFilter"];
    /** @description Optional metadata about the request evaluation process */
    meta?: definitions["v1PlanResourcesResponseMeta"];
  };
  /** @description Metadata about request evaluation. */
  v1PlanResourcesResponseMeta: {
    /** @description Filter textual representation for debugging purposes. */
    filterDebug?: string;
    /**
     * @description Policy scope that matched to produce this effect.
     * @example acme.corp.base
     */
    matchedScope?: string;
  };
  /** @description Playground evaluate request */
  v1PlaygroundEvaluateRequest: {
    playgroundId?: string;
    /** @description List of files. */
    files: definitions["v1File"][];
    principal?: definitions["enginev1Principal"];
    resource?: definitions["enginev1Resource"];
    /** @description List of actions being performed on the resource. */
    actions: string[];
    auxData?: definitions["cerbosrequestv1AuxData"];
  };
  /** @description Playground evaluate response */
  v1PlaygroundEvaluateResponse: {
    playgroundId?: string;
    failure?: definitions["v1PlaygroundFailure"];
    success?: definitions["PlaygroundEvaluateResponseEvalResultList"];
  };
  /** @description Playground response */
  v1PlaygroundFailure: {
    errors?: definitions["PlaygroundFailureError"][];
  };
  /** @description Playground proxy request */
  v1PlaygroundProxyRequest: {
    playgroundId?: string;
    /** @description List of files. */
    files: definitions["v1File"][];
    checkResourceSet?: definitions["v1CheckResourceSetRequest"];
    checkResourceBatch?: definitions["v1CheckResourceBatchRequest"];
    planResources?: definitions["cerbosrequestv1PlanResourcesRequest"];
    checkResources?: definitions["v1CheckResourcesRequest"];
  };
  /** @description Playground proxy response */
  v1PlaygroundProxyResponse: {
    playgroundId?: string;
    failure?: definitions["v1PlaygroundFailure"];
    checkResourceSet?: definitions["v1CheckResourceSetResponse"];
    checkResourceBatch?: definitions["v1CheckResourceBatchResponse"];
    planResources?: definitions["v1PlanResourcesResponse"];
    checkResources?: definitions["v1CheckResourcesResponse"];
  };
  /** @description Playground test request */
  v1PlaygroundTestRequest: {
    playgroundId?: string;
    /** @description List of files. */
    files: definitions["v1File"][];
  };
  /** @description Playground test response */
  v1PlaygroundTestResponse: {
    playgroundId?: string;
    failure?: definitions["v1PlaygroundFailure"];
    success?: definitions["v1PlaygroundTestResponseTestResults"];
  };
  v1PlaygroundTestResponseTestResults: {
    results?: definitions["policyv1TestResults"];
  };
  /** @description Playground validate request */
  v1PlaygroundValidateRequest: {
    playgroundId?: string;
    /** @description List of files. */
    files: definitions["v1File"][];
  };
  /** @description Playground validate response */
  v1PlaygroundValidateResponse: {
    playgroundId?: string;
    failure?: definitions["v1PlaygroundFailure"];
    success?: { [key: string]: unknown };
  };
  v1Policy: {
    apiVersion?: string;
    disabled?: boolean;
    description?: string;
    metadata?: definitions["v1Metadata"];
    resourcePolicy?: definitions["v1ResourcePolicy"];
    principalPolicy?: definitions["v1PrincipalPolicy"];
    derivedRoles?: definitions["v1DerivedRoles"];
    variables?: { [key: string]: string };
  };
  v1PrincipalPolicy: {
    principal?: string;
    version?: string;
    rules?: definitions["v1PrincipalRule"][];
    scope?: string;
  };
  v1PrincipalRule: {
    resource?: string;
    actions?: definitions["v1PrincipalRuleAction"][];
  };
  v1PrincipalRuleAction: {
    action?: string;
    condition?: definitions["v1Condition"];
    effect?: definitions["v1Effect"];
    name?: string;
  };
  /** @description Reload store response */
  v1ReloadStoreResponse: { [key: string]: unknown };
  v1ResourcePolicy: {
    resource?: string;
    version?: string;
    importDerivedRoles?: string[];
    rules?: definitions["v1ResourceRule"][];
    scope?: string;
    schemas?: definitions["v1Schemas"];
  };
  v1ResourceRule: {
    actions?: string[];
    derivedRoles?: string[];
    roles?: string[];
    condition?: definitions["v1Condition"];
    effect?: definitions["v1Effect"];
    name?: string;
  };
  /** @description Set of resources to check */
  v1ResourceSet: {
    /**
     * @description Resource kind.
     * @example album:object
     */
    kind: string;
    /**
     * @description The policy version to use to evaluate this request. If not specified, will default to the server-configured default version.
     * @example default
     */
    policyVersion?: string;
    /**
     * @description Set of resource instances to check. Each instance must be keyed by an application-specific unique identifier.
     * @example [object Object]
     */
    instances: {
      instances: unknown;
    } & { [key: string]: definitions["v1AttributesMap"] };
    /** @description A dot-separated scope that describes the hierarchy these resources belong to. This is used for determining policy inheritance. */
    scope?: string;
  };
  v1RoleDef: {
    name?: string;
    parentRoles?: string[];
    condition?: definitions["v1Condition"];
  };
  v1Schemas: {
    principalSchema?: definitions["v1SchemasSchema"];
    resourceSchema?: definitions["v1SchemasSchema"];
  };
  v1SchemasSchema: {
    ref?: string;
    ignoreWhen?: definitions["SchemasIgnoreWhen"];
  };
  /** @description Server info response */
  v1ServerInfoResponse: {
    version?: string;
    commit?: string;
    buildDate?: string;
  };
  v1TestResultsAction: {
    name?: string;
    details?: definitions["TestResultsDetails"];
  };
  v1TestResultsPrincipal: {
    name?: string;
    resources?: definitions["v1TestResultsResource"][];
  };
  v1TestResultsResource: {
    name?: string;
    actions?: definitions["v1TestResultsAction"][];
  };
  v1Trace: {
    components?: definitions["TraceComponent"][];
    event?: definitions["TraceEvent"];
  };
  v1ValidationError: {
    path?: string;
    message?: string;
    source?: definitions["ValidationErrorSource"];
  };
}

export interface operations {
  CerbosAdminService_ListAuditLogEntries: {
    parameters: {
      path: {
        /** Kind of log entry */
        kind: "KIND_UNSPECIFIED" | "KIND_ACCESS" | "KIND_DECISION";
      };
      query: {
        /** Last N entries. */
        tail?: number;
        /** Start date in ISO 8601 format. */
        "between.start": string;
        /** End date in ISO 8601 format. */
        "between.end": string;
        /** Entries since N hours/minutes ago */
        since?: string;
        /** By Call ID */
        lookup?: string;
      };
    };
    responses: {
      /** A successful response.(streaming responses) */
      200: {
        schema: {
          result?: definitions["v1ListAuditLogEntriesResponse"];
          error?: definitions["googlerpcStatus"];
        };
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["googlerpcStatus"];
      };
    };
  };
  CerbosAdminService_ListPolicies: {
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["v1ListPoliciesResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["googlerpcStatus"];
      };
    };
  };
  CerbosAdminService_GetPolicy: {
    parameters: {
      query: {
        /** For blob, disk, git stores use file name (<filename>.yaml). For mysql, postgres, sqlite3 use id (<kind>.<name>.<version>) of the policy */
        id: string[];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["v1GetPolicyResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["googlerpcStatus"];
      };
    };
  };
  CerbosAdminService_AddOrUpdatePolicy2: {
    parameters: {
      body: {
        body: definitions["v1AddOrUpdatePolicyRequest"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["v1AddOrUpdatePolicyResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["googlerpcStatus"];
      };
    };
  };
  CerbosAdminService_AddOrUpdatePolicy: {
    parameters: {
      body: {
        body: definitions["v1AddOrUpdatePolicyRequest"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["v1AddOrUpdatePolicyResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["googlerpcStatus"];
      };
    };
  };
  CerbosAdminService_GetSchema: {
    parameters: {
      query: {
        /** Unique identifier for the schema */
        id: string[];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["v1GetSchemaResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["googlerpcStatus"];
      };
    };
  };
  CerbosAdminService_AddOrUpdateSchema2: {
    parameters: {
      body: {
        body: definitions["v1AddOrUpdateSchemaRequest"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["v1AddOrUpdateSchemaResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["googlerpcStatus"];
      };
    };
  };
  CerbosAdminService_AddOrUpdateSchema: {
    parameters: {
      body: {
        body: definitions["v1AddOrUpdateSchemaRequest"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["v1AddOrUpdateSchemaResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["googlerpcStatus"];
      };
    };
  };
  CerbosAdminService_DeleteSchema: {
    parameters: {
      query: {
        /** Unique identifier for the schema */
        id: string[];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["v1DeleteSchemaResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["googlerpcStatus"];
      };
    };
  };
  CerbosAdminService_ListSchemas: {
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["v1ListSchemasResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["googlerpcStatus"];
      };
    };
  };
  CerbosAdminService_ReloadStore: {
    parameters: {
      query: {
        /** Wait until the reloading process finalizes */
        wait?: boolean;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["v1ReloadStoreResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["googlerpcStatus"];
      };
    };
  };
  /** [Deprecated: Use CheckResources API instead] Check whether a principal has permissions to perform the given actions on a set of resource instances. */
  CerbosService_CheckResourceSet: {
    parameters: {
      body: {
        body: definitions["v1CheckResourceSetRequest"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["v1CheckResourceSetResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["googlerpcStatus"];
      };
    };
  };
  /** Check a principal's permissions to a batch of heterogeneous resources and actions. */
  CerbosService_CheckResources: {
    parameters: {
      body: {
        body: definitions["v1CheckResourcesRequest"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["v1CheckResourcesResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["googlerpcStatus"];
      };
    };
  };
  /** [Deprecated: Use CheckResources API instead] Check a principal's permissions to a batch of heterogeneous resources and actions. */
  CerbosService_CheckResourceBatch: {
    parameters: {
      body: {
        body: definitions["v1CheckResourceBatchRequest"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["v1CheckResourceBatchResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["googlerpcStatus"];
      };
    };
  };
  /** Produce a query plan with conditions that must be satisfied for accessing a set of instances of a resource */
  CerbosService_PlanResources: {
    parameters: {
      body: {
        body: definitions["cerbosrequestv1PlanResourcesRequest"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["v1PlanResourcesResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["googlerpcStatus"];
      };
    };
  };
  CerbosPlaygroundService_PlaygroundEvaluate: {
    parameters: {
      body: {
        body: definitions["v1PlaygroundEvaluateRequest"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["v1PlaygroundEvaluateResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["googlerpcStatus"];
      };
    };
  };
  CerbosPlaygroundService_PlaygroundProxy: {
    parameters: {
      body: {
        body: definitions["v1PlaygroundProxyRequest"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["v1PlaygroundProxyResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["googlerpcStatus"];
      };
    };
  };
  CerbosPlaygroundService_PlaygroundTest: {
    parameters: {
      body: {
        body: definitions["v1PlaygroundTestRequest"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["v1PlaygroundTestResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["googlerpcStatus"];
      };
    };
  };
  CerbosPlaygroundService_PlaygroundValidate: {
    parameters: {
      body: {
        body: definitions["v1PlaygroundValidateRequest"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["v1PlaygroundValidateResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["googlerpcStatus"];
      };
    };
  };
  /** Get information about the server e.g. server version */
  CerbosService_ServerInfo: {
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["v1ServerInfoResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["googlerpcStatus"];
      };
    };
  };
  /** Produce a query plan with conditions that must be satisfied for accessing a set of instances of a resource */
  CerbosService_PlanResources2: {
    parameters: {
      body: {
        body: definitions["cerbosrequestv1PlanResourcesRequest"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["v1PlanResourcesResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["googlerpcStatus"];
      };
    };
  };
}

export interface external {}
