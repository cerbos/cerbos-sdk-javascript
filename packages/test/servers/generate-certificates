#!/usr/bin/env ruby
# frozen_string_literal: true

require "openssl"

def generate_self_signed_certificate(name)
  root_key = OpenSSL::PKey::RSA.new(4096)

  root_cert = OpenSSL::X509::Certificate.new
  root_cert.version = 2
  root_cert.serial = 1
  root_cert.subject = OpenSSL::X509::Name.parse("/CN=#{name}")
  root_cert.issuer = root_cert.subject
  root_cert.public_key = root_key.public_key
  root_cert.not_before = Time.now
  root_cert.not_after = root_cert.not_before + 365 * 24 * 60 * 60

  root_extension_factory = OpenSSL::X509::ExtensionFactory.new
  root_extension_factory.subject_certificate = root_cert
  root_extension_factory.issuer_certificate = root_cert

  root_cert.add_extension root_extension_factory.create_extension("basicConstraints", "CA:TRUE", true)
  root_cert.add_extension root_extension_factory.create_extension("keyUsage", "keyCertSign, cRLSign", true)
  root_cert.add_extension root_extension_factory.create_extension("subjectKeyIdentifier", "hash", false)
  root_cert.add_extension root_extension_factory.create_extension("authorityKeyIdentifier", "keyid:always", false)

  root_cert.sign root_key, OpenSSL::Digest.new("SHA256")

  key = OpenSSL::PKey::RSA.new(4096)

  cert = OpenSSL::X509::Certificate.new
  cert.version = 2
  cert.serial = 2
  cert.subject = OpenSSL::X509::Name.parse("/CN=localhost")
  cert.issuer = root_cert.subject
  cert.public_key = key.public_key
  cert.not_before = root_cert.not_before
  cert.not_after = root_cert.not_after

  extension_factory = OpenSSL::X509::ExtensionFactory.new
  extension_factory.subject_certificate = cert
  extension_factory.issuer_certificate = root_cert

  cert.add_extension extension_factory.create_extension("keyUsage", "digitalSignature", true)
  cert.add_extension extension_factory.create_extension("subjectKeyIdentifier", "hash", false)
  cert.add_extension extension_factory.create_extension("subjectAltName", "DNS:localhost", false)

  cert.sign root_key, OpenSSL::Digest.new("SHA256")

  File.write "/certificates/#{name}.root.crt", root_cert.to_pem
  File.write "/certificates/#{name}.crt", cert.to_pem
  File.write "/certificates/#{name}.key", key.private_to_pem
end

generate_self_signed_certificate "server"
generate_self_signed_certificate "client"

# `docker compose up --wait` hangs if containers have exited (https://github.com/docker/compose/issues/9273)
File.write "/healthy", ""
exec "sleep", "infinity"
