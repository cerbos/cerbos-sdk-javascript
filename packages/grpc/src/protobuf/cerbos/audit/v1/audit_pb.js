// source: cerbos/audit/v1/audit.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var cerbos_engine_v1_engine_pb = require('../../../cerbos/engine/v1/engine_pb.js');
goog.object.extend(proto, cerbos_engine_v1_engine_pb);
var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
goog.exportSymbol('proto.cerbos.audit.v1.AccessLogEntry', null, global);
goog.exportSymbol('proto.cerbos.audit.v1.DecisionLogEntry', null, global);
goog.exportSymbol('proto.cerbos.audit.v1.MetaValues', null, global);
goog.exportSymbol('proto.cerbos.audit.v1.Peer', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cerbos.audit.v1.AccessLogEntry = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cerbos.audit.v1.AccessLogEntry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cerbos.audit.v1.AccessLogEntry.displayName = 'proto.cerbos.audit.v1.AccessLogEntry';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cerbos.audit.v1.DecisionLogEntry = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.cerbos.audit.v1.DecisionLogEntry.repeatedFields_, null);
};
goog.inherits(proto.cerbos.audit.v1.DecisionLogEntry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cerbos.audit.v1.DecisionLogEntry.displayName = 'proto.cerbos.audit.v1.DecisionLogEntry';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cerbos.audit.v1.MetaValues = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.cerbos.audit.v1.MetaValues.repeatedFields_, null);
};
goog.inherits(proto.cerbos.audit.v1.MetaValues, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cerbos.audit.v1.MetaValues.displayName = 'proto.cerbos.audit.v1.MetaValues';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cerbos.audit.v1.Peer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cerbos.audit.v1.Peer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cerbos.audit.v1.Peer.displayName = 'proto.cerbos.audit.v1.Peer';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cerbos.audit.v1.AccessLogEntry.prototype.toObject = function(opt_includeInstance) {
  return proto.cerbos.audit.v1.AccessLogEntry.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cerbos.audit.v1.AccessLogEntry} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cerbos.audit.v1.AccessLogEntry.toObject = function(includeInstance, msg) {
  var f, obj = {
    callId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    timestamp: (f = msg.getTimestamp()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    peer: (f = msg.getPeer()) && proto.cerbos.audit.v1.Peer.toObject(includeInstance, f),
    metadataMap: (f = msg.getMetadataMap()) ? f.toObject(includeInstance, proto.cerbos.audit.v1.MetaValues.toObject) : [],
    method: jspb.Message.getFieldWithDefault(msg, 5, ""),
    statusCode: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cerbos.audit.v1.AccessLogEntry}
 */
proto.cerbos.audit.v1.AccessLogEntry.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cerbos.audit.v1.AccessLogEntry;
  return proto.cerbos.audit.v1.AccessLogEntry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cerbos.audit.v1.AccessLogEntry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cerbos.audit.v1.AccessLogEntry}
 */
proto.cerbos.audit.v1.AccessLogEntry.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCallId(value);
      break;
    case 2:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTimestamp(value);
      break;
    case 3:
      var value = new proto.cerbos.audit.v1.Peer;
      reader.readMessage(value,proto.cerbos.audit.v1.Peer.deserializeBinaryFromReader);
      msg.setPeer(value);
      break;
    case 4:
      var value = msg.getMetadataMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.cerbos.audit.v1.MetaValues.deserializeBinaryFromReader, "", new proto.cerbos.audit.v1.MetaValues());
         });
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setMethod(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setStatusCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cerbos.audit.v1.AccessLogEntry.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cerbos.audit.v1.AccessLogEntry.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cerbos.audit.v1.AccessLogEntry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cerbos.audit.v1.AccessLogEntry.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCallId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTimestamp();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getPeer();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.cerbos.audit.v1.Peer.serializeBinaryToWriter
    );
  }
  f = message.getMetadataMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.cerbos.audit.v1.MetaValues.serializeBinaryToWriter);
  }
  f = message.getMethod();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getStatusCode();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
};


/**
 * optional string call_id = 1;
 * @return {string}
 */
proto.cerbos.audit.v1.AccessLogEntry.prototype.getCallId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.cerbos.audit.v1.AccessLogEntry} returns this
 */
proto.cerbos.audit.v1.AccessLogEntry.prototype.setCallId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional google.protobuf.Timestamp timestamp = 2;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.cerbos.audit.v1.AccessLogEntry.prototype.getTimestamp = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 2));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.cerbos.audit.v1.AccessLogEntry} returns this
*/
proto.cerbos.audit.v1.AccessLogEntry.prototype.setTimestamp = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cerbos.audit.v1.AccessLogEntry} returns this
 */
proto.cerbos.audit.v1.AccessLogEntry.prototype.clearTimestamp = function() {
  return this.setTimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cerbos.audit.v1.AccessLogEntry.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Peer peer = 3;
 * @return {?proto.cerbos.audit.v1.Peer}
 */
proto.cerbos.audit.v1.AccessLogEntry.prototype.getPeer = function() {
  return /** @type{?proto.cerbos.audit.v1.Peer} */ (
    jspb.Message.getWrapperField(this, proto.cerbos.audit.v1.Peer, 3));
};


/**
 * @param {?proto.cerbos.audit.v1.Peer|undefined} value
 * @return {!proto.cerbos.audit.v1.AccessLogEntry} returns this
*/
proto.cerbos.audit.v1.AccessLogEntry.prototype.setPeer = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cerbos.audit.v1.AccessLogEntry} returns this
 */
proto.cerbos.audit.v1.AccessLogEntry.prototype.clearPeer = function() {
  return this.setPeer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cerbos.audit.v1.AccessLogEntry.prototype.hasPeer = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * map<string, MetaValues> metadata = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.cerbos.audit.v1.MetaValues>}
 */
proto.cerbos.audit.v1.AccessLogEntry.prototype.getMetadataMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.cerbos.audit.v1.MetaValues>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      proto.cerbos.audit.v1.MetaValues));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.cerbos.audit.v1.AccessLogEntry} returns this
 */
proto.cerbos.audit.v1.AccessLogEntry.prototype.clearMetadataMap = function() {
  this.getMetadataMap().clear();
  return this;};


/**
 * optional string method = 5;
 * @return {string}
 */
proto.cerbos.audit.v1.AccessLogEntry.prototype.getMethod = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.cerbos.audit.v1.AccessLogEntry} returns this
 */
proto.cerbos.audit.v1.AccessLogEntry.prototype.setMethod = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional uint32 status_code = 6;
 * @return {number}
 */
proto.cerbos.audit.v1.AccessLogEntry.prototype.getStatusCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.cerbos.audit.v1.AccessLogEntry} returns this
 */
proto.cerbos.audit.v1.AccessLogEntry.prototype.setStatusCode = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.cerbos.audit.v1.DecisionLogEntry.repeatedFields_ = [4,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cerbos.audit.v1.DecisionLogEntry.prototype.toObject = function(opt_includeInstance) {
  return proto.cerbos.audit.v1.DecisionLogEntry.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cerbos.audit.v1.DecisionLogEntry} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cerbos.audit.v1.DecisionLogEntry.toObject = function(includeInstance, msg) {
  var f, obj = {
    callId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    timestamp: (f = msg.getTimestamp()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    peer: (f = msg.getPeer()) && proto.cerbos.audit.v1.Peer.toObject(includeInstance, f),
    inputsList: jspb.Message.toObjectList(msg.getInputsList(),
    cerbos_engine_v1_engine_pb.CheckInput.toObject, includeInstance),
    outputsList: jspb.Message.toObjectList(msg.getOutputsList(),
    cerbos_engine_v1_engine_pb.CheckOutput.toObject, includeInstance),
    error: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cerbos.audit.v1.DecisionLogEntry}
 */
proto.cerbos.audit.v1.DecisionLogEntry.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cerbos.audit.v1.DecisionLogEntry;
  return proto.cerbos.audit.v1.DecisionLogEntry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cerbos.audit.v1.DecisionLogEntry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cerbos.audit.v1.DecisionLogEntry}
 */
proto.cerbos.audit.v1.DecisionLogEntry.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCallId(value);
      break;
    case 2:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTimestamp(value);
      break;
    case 3:
      var value = new proto.cerbos.audit.v1.Peer;
      reader.readMessage(value,proto.cerbos.audit.v1.Peer.deserializeBinaryFromReader);
      msg.setPeer(value);
      break;
    case 4:
      var value = new cerbos_engine_v1_engine_pb.CheckInput;
      reader.readMessage(value,cerbos_engine_v1_engine_pb.CheckInput.deserializeBinaryFromReader);
      msg.addInputs(value);
      break;
    case 5:
      var value = new cerbos_engine_v1_engine_pb.CheckOutput;
      reader.readMessage(value,cerbos_engine_v1_engine_pb.CheckOutput.deserializeBinaryFromReader);
      msg.addOutputs(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cerbos.audit.v1.DecisionLogEntry.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cerbos.audit.v1.DecisionLogEntry.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cerbos.audit.v1.DecisionLogEntry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cerbos.audit.v1.DecisionLogEntry.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCallId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTimestamp();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getPeer();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.cerbos.audit.v1.Peer.serializeBinaryToWriter
    );
  }
  f = message.getInputsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      cerbos_engine_v1_engine_pb.CheckInput.serializeBinaryToWriter
    );
  }
  f = message.getOutputsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      cerbos_engine_v1_engine_pb.CheckOutput.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string call_id = 1;
 * @return {string}
 */
proto.cerbos.audit.v1.DecisionLogEntry.prototype.getCallId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.cerbos.audit.v1.DecisionLogEntry} returns this
 */
proto.cerbos.audit.v1.DecisionLogEntry.prototype.setCallId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional google.protobuf.Timestamp timestamp = 2;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.cerbos.audit.v1.DecisionLogEntry.prototype.getTimestamp = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 2));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.cerbos.audit.v1.DecisionLogEntry} returns this
*/
proto.cerbos.audit.v1.DecisionLogEntry.prototype.setTimestamp = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cerbos.audit.v1.DecisionLogEntry} returns this
 */
proto.cerbos.audit.v1.DecisionLogEntry.prototype.clearTimestamp = function() {
  return this.setTimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cerbos.audit.v1.DecisionLogEntry.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Peer peer = 3;
 * @return {?proto.cerbos.audit.v1.Peer}
 */
proto.cerbos.audit.v1.DecisionLogEntry.prototype.getPeer = function() {
  return /** @type{?proto.cerbos.audit.v1.Peer} */ (
    jspb.Message.getWrapperField(this, proto.cerbos.audit.v1.Peer, 3));
};


/**
 * @param {?proto.cerbos.audit.v1.Peer|undefined} value
 * @return {!proto.cerbos.audit.v1.DecisionLogEntry} returns this
*/
proto.cerbos.audit.v1.DecisionLogEntry.prototype.setPeer = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cerbos.audit.v1.DecisionLogEntry} returns this
 */
proto.cerbos.audit.v1.DecisionLogEntry.prototype.clearPeer = function() {
  return this.setPeer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cerbos.audit.v1.DecisionLogEntry.prototype.hasPeer = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated cerbos.engine.v1.CheckInput inputs = 4;
 * @return {!Array<!proto.cerbos.engine.v1.CheckInput>}
 */
proto.cerbos.audit.v1.DecisionLogEntry.prototype.getInputsList = function() {
  return /** @type{!Array<!proto.cerbos.engine.v1.CheckInput>} */ (
    jspb.Message.getRepeatedWrapperField(this, cerbos_engine_v1_engine_pb.CheckInput, 4));
};


/**
 * @param {!Array<!proto.cerbos.engine.v1.CheckInput>} value
 * @return {!proto.cerbos.audit.v1.DecisionLogEntry} returns this
*/
proto.cerbos.audit.v1.DecisionLogEntry.prototype.setInputsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.cerbos.engine.v1.CheckInput=} opt_value
 * @param {number=} opt_index
 * @return {!proto.cerbos.engine.v1.CheckInput}
 */
proto.cerbos.audit.v1.DecisionLogEntry.prototype.addInputs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.cerbos.engine.v1.CheckInput, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cerbos.audit.v1.DecisionLogEntry} returns this
 */
proto.cerbos.audit.v1.DecisionLogEntry.prototype.clearInputsList = function() {
  return this.setInputsList([]);
};


/**
 * repeated cerbos.engine.v1.CheckOutput outputs = 5;
 * @return {!Array<!proto.cerbos.engine.v1.CheckOutput>}
 */
proto.cerbos.audit.v1.DecisionLogEntry.prototype.getOutputsList = function() {
  return /** @type{!Array<!proto.cerbos.engine.v1.CheckOutput>} */ (
    jspb.Message.getRepeatedWrapperField(this, cerbos_engine_v1_engine_pb.CheckOutput, 5));
};


/**
 * @param {!Array<!proto.cerbos.engine.v1.CheckOutput>} value
 * @return {!proto.cerbos.audit.v1.DecisionLogEntry} returns this
*/
proto.cerbos.audit.v1.DecisionLogEntry.prototype.setOutputsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.cerbos.engine.v1.CheckOutput=} opt_value
 * @param {number=} opt_index
 * @return {!proto.cerbos.engine.v1.CheckOutput}
 */
proto.cerbos.audit.v1.DecisionLogEntry.prototype.addOutputs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.cerbos.engine.v1.CheckOutput, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cerbos.audit.v1.DecisionLogEntry} returns this
 */
proto.cerbos.audit.v1.DecisionLogEntry.prototype.clearOutputsList = function() {
  return this.setOutputsList([]);
};


/**
 * optional string error = 6;
 * @return {string}
 */
proto.cerbos.audit.v1.DecisionLogEntry.prototype.getError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.cerbos.audit.v1.DecisionLogEntry} returns this
 */
proto.cerbos.audit.v1.DecisionLogEntry.prototype.setError = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.cerbos.audit.v1.MetaValues.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cerbos.audit.v1.MetaValues.prototype.toObject = function(opt_includeInstance) {
  return proto.cerbos.audit.v1.MetaValues.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cerbos.audit.v1.MetaValues} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cerbos.audit.v1.MetaValues.toObject = function(includeInstance, msg) {
  var f, obj = {
    valuesList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cerbos.audit.v1.MetaValues}
 */
proto.cerbos.audit.v1.MetaValues.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cerbos.audit.v1.MetaValues;
  return proto.cerbos.audit.v1.MetaValues.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cerbos.audit.v1.MetaValues} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cerbos.audit.v1.MetaValues}
 */
proto.cerbos.audit.v1.MetaValues.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addValues(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cerbos.audit.v1.MetaValues.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cerbos.audit.v1.MetaValues.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cerbos.audit.v1.MetaValues} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cerbos.audit.v1.MetaValues.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValuesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string values = 1;
 * @return {!Array<string>}
 */
proto.cerbos.audit.v1.MetaValues.prototype.getValuesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.cerbos.audit.v1.MetaValues} returns this
 */
proto.cerbos.audit.v1.MetaValues.prototype.setValuesList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.cerbos.audit.v1.MetaValues} returns this
 */
proto.cerbos.audit.v1.MetaValues.prototype.addValues = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cerbos.audit.v1.MetaValues} returns this
 */
proto.cerbos.audit.v1.MetaValues.prototype.clearValuesList = function() {
  return this.setValuesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cerbos.audit.v1.Peer.prototype.toObject = function(opt_includeInstance) {
  return proto.cerbos.audit.v1.Peer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cerbos.audit.v1.Peer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cerbos.audit.v1.Peer.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: jspb.Message.getFieldWithDefault(msg, 1, ""),
    authInfo: jspb.Message.getFieldWithDefault(msg, 2, ""),
    userAgent: jspb.Message.getFieldWithDefault(msg, 3, ""),
    forwardedFor: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cerbos.audit.v1.Peer}
 */
proto.cerbos.audit.v1.Peer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cerbos.audit.v1.Peer;
  return proto.cerbos.audit.v1.Peer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cerbos.audit.v1.Peer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cerbos.audit.v1.Peer}
 */
proto.cerbos.audit.v1.Peer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAuthInfo(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserAgent(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setForwardedFor(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cerbos.audit.v1.Peer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cerbos.audit.v1.Peer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cerbos.audit.v1.Peer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cerbos.audit.v1.Peer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAuthInfo();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUserAgent();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getForwardedFor();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string address = 1;
 * @return {string}
 */
proto.cerbos.audit.v1.Peer.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.cerbos.audit.v1.Peer} returns this
 */
proto.cerbos.audit.v1.Peer.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string auth_info = 2;
 * @return {string}
 */
proto.cerbos.audit.v1.Peer.prototype.getAuthInfo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.cerbos.audit.v1.Peer} returns this
 */
proto.cerbos.audit.v1.Peer.prototype.setAuthInfo = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string user_agent = 3;
 * @return {string}
 */
proto.cerbos.audit.v1.Peer.prototype.getUserAgent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.cerbos.audit.v1.Peer} returns this
 */
proto.cerbos.audit.v1.Peer.prototype.setUserAgent = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string forwarded_for = 4;
 * @return {string}
 */
proto.cerbos.audit.v1.Peer.prototype.getForwardedFor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.cerbos.audit.v1.Peer} returns this
 */
proto.cerbos.audit.v1.Peer.prototype.setForwardedFor = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


goog.object.extend(exports, proto.cerbos.audit.v1);
