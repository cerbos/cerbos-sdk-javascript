// source: cerbos/policy/v1/policy.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var cerbos_effect_v1_effect_pb = require('../../../cerbos/effect/v1/effect_pb.js');
goog.object.extend(proto, cerbos_effect_v1_effect_pb);
var cerbos_engine_v1_engine_pb = require('../../../cerbos/engine/v1/engine_pb.js');
goog.object.extend(proto, cerbos_engine_v1_engine_pb);
var google_protobuf_wrappers_pb = require('google-protobuf/google/protobuf/wrappers_pb.js');
goog.object.extend(proto, google_protobuf_wrappers_pb);
var validate_validate_pb = require('../../../validate/validate_pb.js');
goog.object.extend(proto, validate_validate_pb);
goog.exportSymbol('proto.cerbos.policy.v1.Condition', null, global);
goog.exportSymbol('proto.cerbos.policy.v1.Condition.ConditionCase', null, global);
goog.exportSymbol('proto.cerbos.policy.v1.DerivedRoles', null, global);
goog.exportSymbol('proto.cerbos.policy.v1.Match', null, global);
goog.exportSymbol('proto.cerbos.policy.v1.Match.ExprList', null, global);
goog.exportSymbol('proto.cerbos.policy.v1.Match.OpCase', null, global);
goog.exportSymbol('proto.cerbos.policy.v1.Metadata', null, global);
goog.exportSymbol('proto.cerbos.policy.v1.Policy', null, global);
goog.exportSymbol('proto.cerbos.policy.v1.Policy.PolicyTypeCase', null, global);
goog.exportSymbol('proto.cerbos.policy.v1.PrincipalPolicy', null, global);
goog.exportSymbol('proto.cerbos.policy.v1.PrincipalRule', null, global);
goog.exportSymbol('proto.cerbos.policy.v1.PrincipalRule.Action', null, global);
goog.exportSymbol('proto.cerbos.policy.v1.ResourcePolicy', null, global);
goog.exportSymbol('proto.cerbos.policy.v1.ResourceRule', null, global);
goog.exportSymbol('proto.cerbos.policy.v1.RoleDef', null, global);
goog.exportSymbol('proto.cerbos.policy.v1.Schemas', null, global);
goog.exportSymbol('proto.cerbos.policy.v1.Schemas.IgnoreWhen', null, global);
goog.exportSymbol('proto.cerbos.policy.v1.Schemas.Schema', null, global);
goog.exportSymbol('proto.cerbos.policy.v1.Test', null, global);
goog.exportSymbol('proto.cerbos.policy.v1.Test.TestName', null, global);
goog.exportSymbol('proto.cerbos.policy.v1.TestFixture', null, global);
goog.exportSymbol('proto.cerbos.policy.v1.TestFixture.AuxData', null, global);
goog.exportSymbol('proto.cerbos.policy.v1.TestFixture.Principals', null, global);
goog.exportSymbol('proto.cerbos.policy.v1.TestFixture.Resources', null, global);
goog.exportSymbol('proto.cerbos.policy.v1.TestResults', null, global);
goog.exportSymbol('proto.cerbos.policy.v1.TestResults.Action', null, global);
goog.exportSymbol('proto.cerbos.policy.v1.TestResults.Details', null, global);
goog.exportSymbol('proto.cerbos.policy.v1.TestResults.Details.OutcomeCase', null, global);
goog.exportSymbol('proto.cerbos.policy.v1.TestResults.Failure', null, global);
goog.exportSymbol('proto.cerbos.policy.v1.TestResults.Principal', null, global);
goog.exportSymbol('proto.cerbos.policy.v1.TestResults.Resource', null, global);
goog.exportSymbol('proto.cerbos.policy.v1.TestResults.Result', null, global);
goog.exportSymbol('proto.cerbos.policy.v1.TestResults.Suite', null, global);
goog.exportSymbol('proto.cerbos.policy.v1.TestResults.Summary', null, global);
goog.exportSymbol('proto.cerbos.policy.v1.TestResults.Tally', null, global);
goog.exportSymbol('proto.cerbos.policy.v1.TestSuite', null, global);
goog.exportSymbol('proto.cerbos.policy.v1.TestTable', null, global);
goog.exportSymbol('proto.cerbos.policy.v1.TestTable.Expectation', null, global);
goog.exportSymbol('proto.cerbos.policy.v1.TestTable.Input', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cerbos.policy.v1.Policy = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.cerbos.policy.v1.Policy.oneofGroups_);
};
goog.inherits(proto.cerbos.policy.v1.Policy, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cerbos.policy.v1.Policy.displayName = 'proto.cerbos.policy.v1.Policy';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cerbos.policy.v1.Metadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cerbos.policy.v1.Metadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cerbos.policy.v1.Metadata.displayName = 'proto.cerbos.policy.v1.Metadata';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cerbos.policy.v1.ResourcePolicy = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.cerbos.policy.v1.ResourcePolicy.repeatedFields_, null);
};
goog.inherits(proto.cerbos.policy.v1.ResourcePolicy, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cerbos.policy.v1.ResourcePolicy.displayName = 'proto.cerbos.policy.v1.ResourcePolicy';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cerbos.policy.v1.ResourceRule = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.cerbos.policy.v1.ResourceRule.repeatedFields_, null);
};
goog.inherits(proto.cerbos.policy.v1.ResourceRule, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cerbos.policy.v1.ResourceRule.displayName = 'proto.cerbos.policy.v1.ResourceRule';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cerbos.policy.v1.PrincipalPolicy = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.cerbos.policy.v1.PrincipalPolicy.repeatedFields_, null);
};
goog.inherits(proto.cerbos.policy.v1.PrincipalPolicy, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cerbos.policy.v1.PrincipalPolicy.displayName = 'proto.cerbos.policy.v1.PrincipalPolicy';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cerbos.policy.v1.PrincipalRule = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.cerbos.policy.v1.PrincipalRule.repeatedFields_, null);
};
goog.inherits(proto.cerbos.policy.v1.PrincipalRule, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cerbos.policy.v1.PrincipalRule.displayName = 'proto.cerbos.policy.v1.PrincipalRule';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cerbos.policy.v1.PrincipalRule.Action = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cerbos.policy.v1.PrincipalRule.Action, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cerbos.policy.v1.PrincipalRule.Action.displayName = 'proto.cerbos.policy.v1.PrincipalRule.Action';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cerbos.policy.v1.DerivedRoles = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.cerbos.policy.v1.DerivedRoles.repeatedFields_, null);
};
goog.inherits(proto.cerbos.policy.v1.DerivedRoles, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cerbos.policy.v1.DerivedRoles.displayName = 'proto.cerbos.policy.v1.DerivedRoles';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cerbos.policy.v1.RoleDef = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.cerbos.policy.v1.RoleDef.repeatedFields_, null);
};
goog.inherits(proto.cerbos.policy.v1.RoleDef, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cerbos.policy.v1.RoleDef.displayName = 'proto.cerbos.policy.v1.RoleDef';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cerbos.policy.v1.Condition = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.cerbos.policy.v1.Condition.oneofGroups_);
};
goog.inherits(proto.cerbos.policy.v1.Condition, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cerbos.policy.v1.Condition.displayName = 'proto.cerbos.policy.v1.Condition';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cerbos.policy.v1.Match = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.cerbos.policy.v1.Match.oneofGroups_);
};
goog.inherits(proto.cerbos.policy.v1.Match, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cerbos.policy.v1.Match.displayName = 'proto.cerbos.policy.v1.Match';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cerbos.policy.v1.Match.ExprList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.cerbos.policy.v1.Match.ExprList.repeatedFields_, null);
};
goog.inherits(proto.cerbos.policy.v1.Match.ExprList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cerbos.policy.v1.Match.ExprList.displayName = 'proto.cerbos.policy.v1.Match.ExprList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cerbos.policy.v1.Schemas = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cerbos.policy.v1.Schemas, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cerbos.policy.v1.Schemas.displayName = 'proto.cerbos.policy.v1.Schemas';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cerbos.policy.v1.Schemas.IgnoreWhen = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.cerbos.policy.v1.Schemas.IgnoreWhen.repeatedFields_, null);
};
goog.inherits(proto.cerbos.policy.v1.Schemas.IgnoreWhen, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cerbos.policy.v1.Schemas.IgnoreWhen.displayName = 'proto.cerbos.policy.v1.Schemas.IgnoreWhen';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cerbos.policy.v1.Schemas.Schema = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cerbos.policy.v1.Schemas.Schema, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cerbos.policy.v1.Schemas.Schema.displayName = 'proto.cerbos.policy.v1.Schemas.Schema';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cerbos.policy.v1.TestFixture = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cerbos.policy.v1.TestFixture, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cerbos.policy.v1.TestFixture.displayName = 'proto.cerbos.policy.v1.TestFixture';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cerbos.policy.v1.TestFixture.Principals = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cerbos.policy.v1.TestFixture.Principals, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cerbos.policy.v1.TestFixture.Principals.displayName = 'proto.cerbos.policy.v1.TestFixture.Principals';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cerbos.policy.v1.TestFixture.Resources = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cerbos.policy.v1.TestFixture.Resources, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cerbos.policy.v1.TestFixture.Resources.displayName = 'proto.cerbos.policy.v1.TestFixture.Resources';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cerbos.policy.v1.TestFixture.AuxData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cerbos.policy.v1.TestFixture.AuxData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cerbos.policy.v1.TestFixture.AuxData.displayName = 'proto.cerbos.policy.v1.TestFixture.AuxData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cerbos.policy.v1.TestSuite = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.cerbos.policy.v1.TestSuite.repeatedFields_, null);
};
goog.inherits(proto.cerbos.policy.v1.TestSuite, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cerbos.policy.v1.TestSuite.displayName = 'proto.cerbos.policy.v1.TestSuite';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cerbos.policy.v1.TestTable = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.cerbos.policy.v1.TestTable.repeatedFields_, null);
};
goog.inherits(proto.cerbos.policy.v1.TestTable, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cerbos.policy.v1.TestTable.displayName = 'proto.cerbos.policy.v1.TestTable';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cerbos.policy.v1.TestTable.Input = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.cerbos.policy.v1.TestTable.Input.repeatedFields_, null);
};
goog.inherits(proto.cerbos.policy.v1.TestTable.Input, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cerbos.policy.v1.TestTable.Input.displayName = 'proto.cerbos.policy.v1.TestTable.Input';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cerbos.policy.v1.TestTable.Expectation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cerbos.policy.v1.TestTable.Expectation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cerbos.policy.v1.TestTable.Expectation.displayName = 'proto.cerbos.policy.v1.TestTable.Expectation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cerbos.policy.v1.Test = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cerbos.policy.v1.Test, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cerbos.policy.v1.Test.displayName = 'proto.cerbos.policy.v1.Test';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cerbos.policy.v1.Test.TestName = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cerbos.policy.v1.Test.TestName, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cerbos.policy.v1.Test.TestName.displayName = 'proto.cerbos.policy.v1.Test.TestName';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cerbos.policy.v1.TestResults = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.cerbos.policy.v1.TestResults.repeatedFields_, null);
};
goog.inherits(proto.cerbos.policy.v1.TestResults, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cerbos.policy.v1.TestResults.displayName = 'proto.cerbos.policy.v1.TestResults';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cerbos.policy.v1.TestResults.Tally = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cerbos.policy.v1.TestResults.Tally, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cerbos.policy.v1.TestResults.Tally.displayName = 'proto.cerbos.policy.v1.TestResults.Tally';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cerbos.policy.v1.TestResults.Summary = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.cerbos.policy.v1.TestResults.Summary.repeatedFields_, null);
};
goog.inherits(proto.cerbos.policy.v1.TestResults.Summary, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cerbos.policy.v1.TestResults.Summary.displayName = 'proto.cerbos.policy.v1.TestResults.Summary';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cerbos.policy.v1.TestResults.Suite = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.cerbos.policy.v1.TestResults.Suite.repeatedFields_, null);
};
goog.inherits(proto.cerbos.policy.v1.TestResults.Suite, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cerbos.policy.v1.TestResults.Suite.displayName = 'proto.cerbos.policy.v1.TestResults.Suite';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cerbos.policy.v1.TestResults.Principal = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.cerbos.policy.v1.TestResults.Principal.repeatedFields_, null);
};
goog.inherits(proto.cerbos.policy.v1.TestResults.Principal, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cerbos.policy.v1.TestResults.Principal.displayName = 'proto.cerbos.policy.v1.TestResults.Principal';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cerbos.policy.v1.TestResults.Resource = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.cerbos.policy.v1.TestResults.Resource.repeatedFields_, null);
};
goog.inherits(proto.cerbos.policy.v1.TestResults.Resource, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cerbos.policy.v1.TestResults.Resource.displayName = 'proto.cerbos.policy.v1.TestResults.Resource';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cerbos.policy.v1.TestResults.Action = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cerbos.policy.v1.TestResults.Action, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cerbos.policy.v1.TestResults.Action.displayName = 'proto.cerbos.policy.v1.TestResults.Action';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cerbos.policy.v1.TestResults.Details = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.cerbos.policy.v1.TestResults.Details.repeatedFields_, proto.cerbos.policy.v1.TestResults.Details.oneofGroups_);
};
goog.inherits(proto.cerbos.policy.v1.TestResults.Details, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cerbos.policy.v1.TestResults.Details.displayName = 'proto.cerbos.policy.v1.TestResults.Details';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cerbos.policy.v1.TestResults.Failure = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cerbos.policy.v1.TestResults.Failure, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cerbos.policy.v1.TestResults.Failure.displayName = 'proto.cerbos.policy.v1.TestResults.Failure';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.cerbos.policy.v1.Policy.oneofGroups_ = [[5,6,7]];

/**
 * @enum {number}
 */
proto.cerbos.policy.v1.Policy.PolicyTypeCase = {
  POLICY_TYPE_NOT_SET: 0,
  RESOURCE_POLICY: 5,
  PRINCIPAL_POLICY: 6,
  DERIVED_ROLES: 7
};

/**
 * @return {proto.cerbos.policy.v1.Policy.PolicyTypeCase}
 */
proto.cerbos.policy.v1.Policy.prototype.getPolicyTypeCase = function() {
  return /** @type {proto.cerbos.policy.v1.Policy.PolicyTypeCase} */(jspb.Message.computeOneofCase(this, proto.cerbos.policy.v1.Policy.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cerbos.policy.v1.Policy.prototype.toObject = function(opt_includeInstance) {
  return proto.cerbos.policy.v1.Policy.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cerbos.policy.v1.Policy} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cerbos.policy.v1.Policy.toObject = function(includeInstance, msg) {
  var f, obj = {
    apiVersion: jspb.Message.getFieldWithDefault(msg, 1, ""),
    disabled: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    description: jspb.Message.getFieldWithDefault(msg, 3, ""),
    metadata: (f = msg.getMetadata()) && proto.cerbos.policy.v1.Metadata.toObject(includeInstance, f),
    resourcePolicy: (f = msg.getResourcePolicy()) && proto.cerbos.policy.v1.ResourcePolicy.toObject(includeInstance, f),
    principalPolicy: (f = msg.getPrincipalPolicy()) && proto.cerbos.policy.v1.PrincipalPolicy.toObject(includeInstance, f),
    derivedRoles: (f = msg.getDerivedRoles()) && proto.cerbos.policy.v1.DerivedRoles.toObject(includeInstance, f),
    variablesMap: (f = msg.getVariablesMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cerbos.policy.v1.Policy}
 */
proto.cerbos.policy.v1.Policy.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cerbos.policy.v1.Policy;
  return proto.cerbos.policy.v1.Policy.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cerbos.policy.v1.Policy} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cerbos.policy.v1.Policy}
 */
proto.cerbos.policy.v1.Policy.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setApiVersion(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDisabled(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 4:
      var value = new proto.cerbos.policy.v1.Metadata;
      reader.readMessage(value,proto.cerbos.policy.v1.Metadata.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    case 5:
      var value = new proto.cerbos.policy.v1.ResourcePolicy;
      reader.readMessage(value,proto.cerbos.policy.v1.ResourcePolicy.deserializeBinaryFromReader);
      msg.setResourcePolicy(value);
      break;
    case 6:
      var value = new proto.cerbos.policy.v1.PrincipalPolicy;
      reader.readMessage(value,proto.cerbos.policy.v1.PrincipalPolicy.deserializeBinaryFromReader);
      msg.setPrincipalPolicy(value);
      break;
    case 7:
      var value = new proto.cerbos.policy.v1.DerivedRoles;
      reader.readMessage(value,proto.cerbos.policy.v1.DerivedRoles.deserializeBinaryFromReader);
      msg.setDerivedRoles(value);
      break;
    case 8:
      var value = msg.getVariablesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cerbos.policy.v1.Policy.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cerbos.policy.v1.Policy.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cerbos.policy.v1.Policy} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cerbos.policy.v1.Policy.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getApiVersion();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDisabled();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getMetadata();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.cerbos.policy.v1.Metadata.serializeBinaryToWriter
    );
  }
  f = message.getResourcePolicy();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.cerbos.policy.v1.ResourcePolicy.serializeBinaryToWriter
    );
  }
  f = message.getPrincipalPolicy();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.cerbos.policy.v1.PrincipalPolicy.serializeBinaryToWriter
    );
  }
  f = message.getDerivedRoles();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.cerbos.policy.v1.DerivedRoles.serializeBinaryToWriter
    );
  }
  f = message.getVariablesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(8, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * optional string api_version = 1;
 * @return {string}
 */
proto.cerbos.policy.v1.Policy.prototype.getApiVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.cerbos.policy.v1.Policy} returns this
 */
proto.cerbos.policy.v1.Policy.prototype.setApiVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool disabled = 2;
 * @return {boolean}
 */
proto.cerbos.policy.v1.Policy.prototype.getDisabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.cerbos.policy.v1.Policy} returns this
 */
proto.cerbos.policy.v1.Policy.prototype.setDisabled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional string description = 3;
 * @return {string}
 */
proto.cerbos.policy.v1.Policy.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.cerbos.policy.v1.Policy} returns this
 */
proto.cerbos.policy.v1.Policy.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional Metadata metadata = 4;
 * @return {?proto.cerbos.policy.v1.Metadata}
 */
proto.cerbos.policy.v1.Policy.prototype.getMetadata = function() {
  return /** @type{?proto.cerbos.policy.v1.Metadata} */ (
    jspb.Message.getWrapperField(this, proto.cerbos.policy.v1.Metadata, 4));
};


/**
 * @param {?proto.cerbos.policy.v1.Metadata|undefined} value
 * @return {!proto.cerbos.policy.v1.Policy} returns this
*/
proto.cerbos.policy.v1.Policy.prototype.setMetadata = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cerbos.policy.v1.Policy} returns this
 */
proto.cerbos.policy.v1.Policy.prototype.clearMetadata = function() {
  return this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cerbos.policy.v1.Policy.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional ResourcePolicy resource_policy = 5;
 * @return {?proto.cerbos.policy.v1.ResourcePolicy}
 */
proto.cerbos.policy.v1.Policy.prototype.getResourcePolicy = function() {
  return /** @type{?proto.cerbos.policy.v1.ResourcePolicy} */ (
    jspb.Message.getWrapperField(this, proto.cerbos.policy.v1.ResourcePolicy, 5));
};


/**
 * @param {?proto.cerbos.policy.v1.ResourcePolicy|undefined} value
 * @return {!proto.cerbos.policy.v1.Policy} returns this
*/
proto.cerbos.policy.v1.Policy.prototype.setResourcePolicy = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.cerbos.policy.v1.Policy.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cerbos.policy.v1.Policy} returns this
 */
proto.cerbos.policy.v1.Policy.prototype.clearResourcePolicy = function() {
  return this.setResourcePolicy(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cerbos.policy.v1.Policy.prototype.hasResourcePolicy = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional PrincipalPolicy principal_policy = 6;
 * @return {?proto.cerbos.policy.v1.PrincipalPolicy}
 */
proto.cerbos.policy.v1.Policy.prototype.getPrincipalPolicy = function() {
  return /** @type{?proto.cerbos.policy.v1.PrincipalPolicy} */ (
    jspb.Message.getWrapperField(this, proto.cerbos.policy.v1.PrincipalPolicy, 6));
};


/**
 * @param {?proto.cerbos.policy.v1.PrincipalPolicy|undefined} value
 * @return {!proto.cerbos.policy.v1.Policy} returns this
*/
proto.cerbos.policy.v1.Policy.prototype.setPrincipalPolicy = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.cerbos.policy.v1.Policy.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cerbos.policy.v1.Policy} returns this
 */
proto.cerbos.policy.v1.Policy.prototype.clearPrincipalPolicy = function() {
  return this.setPrincipalPolicy(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cerbos.policy.v1.Policy.prototype.hasPrincipalPolicy = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional DerivedRoles derived_roles = 7;
 * @return {?proto.cerbos.policy.v1.DerivedRoles}
 */
proto.cerbos.policy.v1.Policy.prototype.getDerivedRoles = function() {
  return /** @type{?proto.cerbos.policy.v1.DerivedRoles} */ (
    jspb.Message.getWrapperField(this, proto.cerbos.policy.v1.DerivedRoles, 7));
};


/**
 * @param {?proto.cerbos.policy.v1.DerivedRoles|undefined} value
 * @return {!proto.cerbos.policy.v1.Policy} returns this
*/
proto.cerbos.policy.v1.Policy.prototype.setDerivedRoles = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.cerbos.policy.v1.Policy.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cerbos.policy.v1.Policy} returns this
 */
proto.cerbos.policy.v1.Policy.prototype.clearDerivedRoles = function() {
  return this.setDerivedRoles(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cerbos.policy.v1.Policy.prototype.hasDerivedRoles = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * map<string, string> variables = 8;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.cerbos.policy.v1.Policy.prototype.getVariablesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 8, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.cerbos.policy.v1.Policy} returns this
 */
proto.cerbos.policy.v1.Policy.prototype.clearVariablesMap = function() {
  this.getVariablesMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cerbos.policy.v1.Metadata.prototype.toObject = function(opt_includeInstance) {
  return proto.cerbos.policy.v1.Metadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cerbos.policy.v1.Metadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cerbos.policy.v1.Metadata.toObject = function(includeInstance, msg) {
  var f, obj = {
    sourceFile: jspb.Message.getFieldWithDefault(msg, 1, ""),
    annotationsMap: (f = msg.getAnnotationsMap()) ? f.toObject(includeInstance, undefined) : [],
    hash: (f = msg.getHash()) && google_protobuf_wrappers_pb.UInt64Value.toObject(includeInstance, f),
    storeIdentifer: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cerbos.policy.v1.Metadata}
 */
proto.cerbos.policy.v1.Metadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cerbos.policy.v1.Metadata;
  return proto.cerbos.policy.v1.Metadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cerbos.policy.v1.Metadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cerbos.policy.v1.Metadata}
 */
proto.cerbos.policy.v1.Metadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSourceFile(value);
      break;
    case 2:
      var value = msg.getAnnotationsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 3:
      var value = new google_protobuf_wrappers_pb.UInt64Value;
      reader.readMessage(value,google_protobuf_wrappers_pb.UInt64Value.deserializeBinaryFromReader);
      msg.setHash(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setStoreIdentifer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cerbos.policy.v1.Metadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cerbos.policy.v1.Metadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cerbos.policy.v1.Metadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cerbos.policy.v1.Metadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSourceFile();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAnnotationsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getHash();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_wrappers_pb.UInt64Value.serializeBinaryToWriter
    );
  }
  f = message.getStoreIdentifer();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string source_file = 1;
 * @return {string}
 */
proto.cerbos.policy.v1.Metadata.prototype.getSourceFile = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.cerbos.policy.v1.Metadata} returns this
 */
proto.cerbos.policy.v1.Metadata.prototype.setSourceFile = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * map<string, string> annotations = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.cerbos.policy.v1.Metadata.prototype.getAnnotationsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.cerbos.policy.v1.Metadata} returns this
 */
proto.cerbos.policy.v1.Metadata.prototype.clearAnnotationsMap = function() {
  this.getAnnotationsMap().clear();
  return this;};


/**
 * optional google.protobuf.UInt64Value hash = 3;
 * @return {?proto.google.protobuf.UInt64Value}
 */
proto.cerbos.policy.v1.Metadata.prototype.getHash = function() {
  return /** @type{?proto.google.protobuf.UInt64Value} */ (
    jspb.Message.getWrapperField(this, google_protobuf_wrappers_pb.UInt64Value, 3));
};


/**
 * @param {?proto.google.protobuf.UInt64Value|undefined} value
 * @return {!proto.cerbos.policy.v1.Metadata} returns this
*/
proto.cerbos.policy.v1.Metadata.prototype.setHash = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cerbos.policy.v1.Metadata} returns this
 */
proto.cerbos.policy.v1.Metadata.prototype.clearHash = function() {
  return this.setHash(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cerbos.policy.v1.Metadata.prototype.hasHash = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string store_identifer = 4;
 * @return {string}
 */
proto.cerbos.policy.v1.Metadata.prototype.getStoreIdentifer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.cerbos.policy.v1.Metadata} returns this
 */
proto.cerbos.policy.v1.Metadata.prototype.setStoreIdentifer = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.cerbos.policy.v1.ResourcePolicy.repeatedFields_ = [3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cerbos.policy.v1.ResourcePolicy.prototype.toObject = function(opt_includeInstance) {
  return proto.cerbos.policy.v1.ResourcePolicy.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cerbos.policy.v1.ResourcePolicy} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cerbos.policy.v1.ResourcePolicy.toObject = function(includeInstance, msg) {
  var f, obj = {
    resource: jspb.Message.getFieldWithDefault(msg, 1, ""),
    version: jspb.Message.getFieldWithDefault(msg, 2, ""),
    importDerivedRolesList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    rulesList: jspb.Message.toObjectList(msg.getRulesList(),
    proto.cerbos.policy.v1.ResourceRule.toObject, includeInstance),
    scope: jspb.Message.getFieldWithDefault(msg, 5, ""),
    schemas: (f = msg.getSchemas()) && proto.cerbos.policy.v1.Schemas.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cerbos.policy.v1.ResourcePolicy}
 */
proto.cerbos.policy.v1.ResourcePolicy.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cerbos.policy.v1.ResourcePolicy;
  return proto.cerbos.policy.v1.ResourcePolicy.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cerbos.policy.v1.ResourcePolicy} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cerbos.policy.v1.ResourcePolicy}
 */
proto.cerbos.policy.v1.ResourcePolicy.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setResource(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addImportDerivedRoles(value);
      break;
    case 4:
      var value = new proto.cerbos.policy.v1.ResourceRule;
      reader.readMessage(value,proto.cerbos.policy.v1.ResourceRule.deserializeBinaryFromReader);
      msg.addRules(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setScope(value);
      break;
    case 6:
      var value = new proto.cerbos.policy.v1.Schemas;
      reader.readMessage(value,proto.cerbos.policy.v1.Schemas.deserializeBinaryFromReader);
      msg.setSchemas(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cerbos.policy.v1.ResourcePolicy.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cerbos.policy.v1.ResourcePolicy.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cerbos.policy.v1.ResourcePolicy} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cerbos.policy.v1.ResourcePolicy.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResource();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getImportDerivedRolesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getRulesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.cerbos.policy.v1.ResourceRule.serializeBinaryToWriter
    );
  }
  f = message.getScope();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getSchemas();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.cerbos.policy.v1.Schemas.serializeBinaryToWriter
    );
  }
};


/**
 * optional string resource = 1;
 * @return {string}
 */
proto.cerbos.policy.v1.ResourcePolicy.prototype.getResource = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.cerbos.policy.v1.ResourcePolicy} returns this
 */
proto.cerbos.policy.v1.ResourcePolicy.prototype.setResource = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string version = 2;
 * @return {string}
 */
proto.cerbos.policy.v1.ResourcePolicy.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.cerbos.policy.v1.ResourcePolicy} returns this
 */
proto.cerbos.policy.v1.ResourcePolicy.prototype.setVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated string import_derived_roles = 3;
 * @return {!Array<string>}
 */
proto.cerbos.policy.v1.ResourcePolicy.prototype.getImportDerivedRolesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.cerbos.policy.v1.ResourcePolicy} returns this
 */
proto.cerbos.policy.v1.ResourcePolicy.prototype.setImportDerivedRolesList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.cerbos.policy.v1.ResourcePolicy} returns this
 */
proto.cerbos.policy.v1.ResourcePolicy.prototype.addImportDerivedRoles = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cerbos.policy.v1.ResourcePolicy} returns this
 */
proto.cerbos.policy.v1.ResourcePolicy.prototype.clearImportDerivedRolesList = function() {
  return this.setImportDerivedRolesList([]);
};


/**
 * repeated ResourceRule rules = 4;
 * @return {!Array<!proto.cerbos.policy.v1.ResourceRule>}
 */
proto.cerbos.policy.v1.ResourcePolicy.prototype.getRulesList = function() {
  return /** @type{!Array<!proto.cerbos.policy.v1.ResourceRule>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.cerbos.policy.v1.ResourceRule, 4));
};


/**
 * @param {!Array<!proto.cerbos.policy.v1.ResourceRule>} value
 * @return {!proto.cerbos.policy.v1.ResourcePolicy} returns this
*/
proto.cerbos.policy.v1.ResourcePolicy.prototype.setRulesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.cerbos.policy.v1.ResourceRule=} opt_value
 * @param {number=} opt_index
 * @return {!proto.cerbos.policy.v1.ResourceRule}
 */
proto.cerbos.policy.v1.ResourcePolicy.prototype.addRules = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.cerbos.policy.v1.ResourceRule, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cerbos.policy.v1.ResourcePolicy} returns this
 */
proto.cerbos.policy.v1.ResourcePolicy.prototype.clearRulesList = function() {
  return this.setRulesList([]);
};


/**
 * optional string scope = 5;
 * @return {string}
 */
proto.cerbos.policy.v1.ResourcePolicy.prototype.getScope = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.cerbos.policy.v1.ResourcePolicy} returns this
 */
proto.cerbos.policy.v1.ResourcePolicy.prototype.setScope = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional Schemas schemas = 6;
 * @return {?proto.cerbos.policy.v1.Schemas}
 */
proto.cerbos.policy.v1.ResourcePolicy.prototype.getSchemas = function() {
  return /** @type{?proto.cerbos.policy.v1.Schemas} */ (
    jspb.Message.getWrapperField(this, proto.cerbos.policy.v1.Schemas, 6));
};


/**
 * @param {?proto.cerbos.policy.v1.Schemas|undefined} value
 * @return {!proto.cerbos.policy.v1.ResourcePolicy} returns this
*/
proto.cerbos.policy.v1.ResourcePolicy.prototype.setSchemas = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cerbos.policy.v1.ResourcePolicy} returns this
 */
proto.cerbos.policy.v1.ResourcePolicy.prototype.clearSchemas = function() {
  return this.setSchemas(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cerbos.policy.v1.ResourcePolicy.prototype.hasSchemas = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.cerbos.policy.v1.ResourceRule.repeatedFields_ = [1,2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cerbos.policy.v1.ResourceRule.prototype.toObject = function(opt_includeInstance) {
  return proto.cerbos.policy.v1.ResourceRule.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cerbos.policy.v1.ResourceRule} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cerbos.policy.v1.ResourceRule.toObject = function(includeInstance, msg) {
  var f, obj = {
    actionsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    derivedRolesList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    rolesList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    condition: (f = msg.getCondition()) && proto.cerbos.policy.v1.Condition.toObject(includeInstance, f),
    effect: jspb.Message.getFieldWithDefault(msg, 5, 0),
    name: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cerbos.policy.v1.ResourceRule}
 */
proto.cerbos.policy.v1.ResourceRule.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cerbos.policy.v1.ResourceRule;
  return proto.cerbos.policy.v1.ResourceRule.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cerbos.policy.v1.ResourceRule} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cerbos.policy.v1.ResourceRule}
 */
proto.cerbos.policy.v1.ResourceRule.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addActions(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addDerivedRoles(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addRoles(value);
      break;
    case 4:
      var value = new proto.cerbos.policy.v1.Condition;
      reader.readMessage(value,proto.cerbos.policy.v1.Condition.deserializeBinaryFromReader);
      msg.setCondition(value);
      break;
    case 5:
      var value = /** @type {!proto.cerbos.effect.v1.Effect} */ (reader.readEnum());
      msg.setEffect(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cerbos.policy.v1.ResourceRule.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cerbos.policy.v1.ResourceRule.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cerbos.policy.v1.ResourceRule} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cerbos.policy.v1.ResourceRule.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActionsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getDerivedRolesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getRolesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getCondition();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.cerbos.policy.v1.Condition.serializeBinaryToWriter
    );
  }
  f = message.getEffect();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * repeated string actions = 1;
 * @return {!Array<string>}
 */
proto.cerbos.policy.v1.ResourceRule.prototype.getActionsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.cerbos.policy.v1.ResourceRule} returns this
 */
proto.cerbos.policy.v1.ResourceRule.prototype.setActionsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.cerbos.policy.v1.ResourceRule} returns this
 */
proto.cerbos.policy.v1.ResourceRule.prototype.addActions = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cerbos.policy.v1.ResourceRule} returns this
 */
proto.cerbos.policy.v1.ResourceRule.prototype.clearActionsList = function() {
  return this.setActionsList([]);
};


/**
 * repeated string derived_roles = 2;
 * @return {!Array<string>}
 */
proto.cerbos.policy.v1.ResourceRule.prototype.getDerivedRolesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.cerbos.policy.v1.ResourceRule} returns this
 */
proto.cerbos.policy.v1.ResourceRule.prototype.setDerivedRolesList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.cerbos.policy.v1.ResourceRule} returns this
 */
proto.cerbos.policy.v1.ResourceRule.prototype.addDerivedRoles = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cerbos.policy.v1.ResourceRule} returns this
 */
proto.cerbos.policy.v1.ResourceRule.prototype.clearDerivedRolesList = function() {
  return this.setDerivedRolesList([]);
};


/**
 * repeated string roles = 3;
 * @return {!Array<string>}
 */
proto.cerbos.policy.v1.ResourceRule.prototype.getRolesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.cerbos.policy.v1.ResourceRule} returns this
 */
proto.cerbos.policy.v1.ResourceRule.prototype.setRolesList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.cerbos.policy.v1.ResourceRule} returns this
 */
proto.cerbos.policy.v1.ResourceRule.prototype.addRoles = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cerbos.policy.v1.ResourceRule} returns this
 */
proto.cerbos.policy.v1.ResourceRule.prototype.clearRolesList = function() {
  return this.setRolesList([]);
};


/**
 * optional Condition condition = 4;
 * @return {?proto.cerbos.policy.v1.Condition}
 */
proto.cerbos.policy.v1.ResourceRule.prototype.getCondition = function() {
  return /** @type{?proto.cerbos.policy.v1.Condition} */ (
    jspb.Message.getWrapperField(this, proto.cerbos.policy.v1.Condition, 4));
};


/**
 * @param {?proto.cerbos.policy.v1.Condition|undefined} value
 * @return {!proto.cerbos.policy.v1.ResourceRule} returns this
*/
proto.cerbos.policy.v1.ResourceRule.prototype.setCondition = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cerbos.policy.v1.ResourceRule} returns this
 */
proto.cerbos.policy.v1.ResourceRule.prototype.clearCondition = function() {
  return this.setCondition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cerbos.policy.v1.ResourceRule.prototype.hasCondition = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional cerbos.effect.v1.Effect effect = 5;
 * @return {!proto.cerbos.effect.v1.Effect}
 */
proto.cerbos.policy.v1.ResourceRule.prototype.getEffect = function() {
  return /** @type {!proto.cerbos.effect.v1.Effect} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.cerbos.effect.v1.Effect} value
 * @return {!proto.cerbos.policy.v1.ResourceRule} returns this
 */
proto.cerbos.policy.v1.ResourceRule.prototype.setEffect = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional string name = 6;
 * @return {string}
 */
proto.cerbos.policy.v1.ResourceRule.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.cerbos.policy.v1.ResourceRule} returns this
 */
proto.cerbos.policy.v1.ResourceRule.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.cerbos.policy.v1.PrincipalPolicy.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cerbos.policy.v1.PrincipalPolicy.prototype.toObject = function(opt_includeInstance) {
  return proto.cerbos.policy.v1.PrincipalPolicy.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cerbos.policy.v1.PrincipalPolicy} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cerbos.policy.v1.PrincipalPolicy.toObject = function(includeInstance, msg) {
  var f, obj = {
    principal: jspb.Message.getFieldWithDefault(msg, 1, ""),
    version: jspb.Message.getFieldWithDefault(msg, 2, ""),
    rulesList: jspb.Message.toObjectList(msg.getRulesList(),
    proto.cerbos.policy.v1.PrincipalRule.toObject, includeInstance),
    scope: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cerbos.policy.v1.PrincipalPolicy}
 */
proto.cerbos.policy.v1.PrincipalPolicy.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cerbos.policy.v1.PrincipalPolicy;
  return proto.cerbos.policy.v1.PrincipalPolicy.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cerbos.policy.v1.PrincipalPolicy} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cerbos.policy.v1.PrincipalPolicy}
 */
proto.cerbos.policy.v1.PrincipalPolicy.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrincipal(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    case 3:
      var value = new proto.cerbos.policy.v1.PrincipalRule;
      reader.readMessage(value,proto.cerbos.policy.v1.PrincipalRule.deserializeBinaryFromReader);
      msg.addRules(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setScope(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cerbos.policy.v1.PrincipalPolicy.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cerbos.policy.v1.PrincipalPolicy.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cerbos.policy.v1.PrincipalPolicy} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cerbos.policy.v1.PrincipalPolicy.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPrincipal();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRulesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.cerbos.policy.v1.PrincipalRule.serializeBinaryToWriter
    );
  }
  f = message.getScope();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string principal = 1;
 * @return {string}
 */
proto.cerbos.policy.v1.PrincipalPolicy.prototype.getPrincipal = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.cerbos.policy.v1.PrincipalPolicy} returns this
 */
proto.cerbos.policy.v1.PrincipalPolicy.prototype.setPrincipal = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string version = 2;
 * @return {string}
 */
proto.cerbos.policy.v1.PrincipalPolicy.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.cerbos.policy.v1.PrincipalPolicy} returns this
 */
proto.cerbos.policy.v1.PrincipalPolicy.prototype.setVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated PrincipalRule rules = 3;
 * @return {!Array<!proto.cerbos.policy.v1.PrincipalRule>}
 */
proto.cerbos.policy.v1.PrincipalPolicy.prototype.getRulesList = function() {
  return /** @type{!Array<!proto.cerbos.policy.v1.PrincipalRule>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.cerbos.policy.v1.PrincipalRule, 3));
};


/**
 * @param {!Array<!proto.cerbos.policy.v1.PrincipalRule>} value
 * @return {!proto.cerbos.policy.v1.PrincipalPolicy} returns this
*/
proto.cerbos.policy.v1.PrincipalPolicy.prototype.setRulesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.cerbos.policy.v1.PrincipalRule=} opt_value
 * @param {number=} opt_index
 * @return {!proto.cerbos.policy.v1.PrincipalRule}
 */
proto.cerbos.policy.v1.PrincipalPolicy.prototype.addRules = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.cerbos.policy.v1.PrincipalRule, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cerbos.policy.v1.PrincipalPolicy} returns this
 */
proto.cerbos.policy.v1.PrincipalPolicy.prototype.clearRulesList = function() {
  return this.setRulesList([]);
};


/**
 * optional string scope = 4;
 * @return {string}
 */
proto.cerbos.policy.v1.PrincipalPolicy.prototype.getScope = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.cerbos.policy.v1.PrincipalPolicy} returns this
 */
proto.cerbos.policy.v1.PrincipalPolicy.prototype.setScope = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.cerbos.policy.v1.PrincipalRule.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cerbos.policy.v1.PrincipalRule.prototype.toObject = function(opt_includeInstance) {
  return proto.cerbos.policy.v1.PrincipalRule.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cerbos.policy.v1.PrincipalRule} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cerbos.policy.v1.PrincipalRule.toObject = function(includeInstance, msg) {
  var f, obj = {
    resource: jspb.Message.getFieldWithDefault(msg, 1, ""),
    actionsList: jspb.Message.toObjectList(msg.getActionsList(),
    proto.cerbos.policy.v1.PrincipalRule.Action.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cerbos.policy.v1.PrincipalRule}
 */
proto.cerbos.policy.v1.PrincipalRule.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cerbos.policy.v1.PrincipalRule;
  return proto.cerbos.policy.v1.PrincipalRule.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cerbos.policy.v1.PrincipalRule} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cerbos.policy.v1.PrincipalRule}
 */
proto.cerbos.policy.v1.PrincipalRule.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setResource(value);
      break;
    case 2:
      var value = new proto.cerbos.policy.v1.PrincipalRule.Action;
      reader.readMessage(value,proto.cerbos.policy.v1.PrincipalRule.Action.deserializeBinaryFromReader);
      msg.addActions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cerbos.policy.v1.PrincipalRule.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cerbos.policy.v1.PrincipalRule.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cerbos.policy.v1.PrincipalRule} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cerbos.policy.v1.PrincipalRule.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResource();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getActionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.cerbos.policy.v1.PrincipalRule.Action.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cerbos.policy.v1.PrincipalRule.Action.prototype.toObject = function(opt_includeInstance) {
  return proto.cerbos.policy.v1.PrincipalRule.Action.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cerbos.policy.v1.PrincipalRule.Action} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cerbos.policy.v1.PrincipalRule.Action.toObject = function(includeInstance, msg) {
  var f, obj = {
    action: jspb.Message.getFieldWithDefault(msg, 1, ""),
    condition: (f = msg.getCondition()) && proto.cerbos.policy.v1.Condition.toObject(includeInstance, f),
    effect: jspb.Message.getFieldWithDefault(msg, 3, 0),
    name: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cerbos.policy.v1.PrincipalRule.Action}
 */
proto.cerbos.policy.v1.PrincipalRule.Action.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cerbos.policy.v1.PrincipalRule.Action;
  return proto.cerbos.policy.v1.PrincipalRule.Action.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cerbos.policy.v1.PrincipalRule.Action} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cerbos.policy.v1.PrincipalRule.Action}
 */
proto.cerbos.policy.v1.PrincipalRule.Action.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAction(value);
      break;
    case 2:
      var value = new proto.cerbos.policy.v1.Condition;
      reader.readMessage(value,proto.cerbos.policy.v1.Condition.deserializeBinaryFromReader);
      msg.setCondition(value);
      break;
    case 3:
      var value = /** @type {!proto.cerbos.effect.v1.Effect} */ (reader.readEnum());
      msg.setEffect(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cerbos.policy.v1.PrincipalRule.Action.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cerbos.policy.v1.PrincipalRule.Action.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cerbos.policy.v1.PrincipalRule.Action} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cerbos.policy.v1.PrincipalRule.Action.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAction();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCondition();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.cerbos.policy.v1.Condition.serializeBinaryToWriter
    );
  }
  f = message.getEffect();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string action = 1;
 * @return {string}
 */
proto.cerbos.policy.v1.PrincipalRule.Action.prototype.getAction = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.cerbos.policy.v1.PrincipalRule.Action} returns this
 */
proto.cerbos.policy.v1.PrincipalRule.Action.prototype.setAction = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Condition condition = 2;
 * @return {?proto.cerbos.policy.v1.Condition}
 */
proto.cerbos.policy.v1.PrincipalRule.Action.prototype.getCondition = function() {
  return /** @type{?proto.cerbos.policy.v1.Condition} */ (
    jspb.Message.getWrapperField(this, proto.cerbos.policy.v1.Condition, 2));
};


/**
 * @param {?proto.cerbos.policy.v1.Condition|undefined} value
 * @return {!proto.cerbos.policy.v1.PrincipalRule.Action} returns this
*/
proto.cerbos.policy.v1.PrincipalRule.Action.prototype.setCondition = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cerbos.policy.v1.PrincipalRule.Action} returns this
 */
proto.cerbos.policy.v1.PrincipalRule.Action.prototype.clearCondition = function() {
  return this.setCondition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cerbos.policy.v1.PrincipalRule.Action.prototype.hasCondition = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional cerbos.effect.v1.Effect effect = 3;
 * @return {!proto.cerbos.effect.v1.Effect}
 */
proto.cerbos.policy.v1.PrincipalRule.Action.prototype.getEffect = function() {
  return /** @type {!proto.cerbos.effect.v1.Effect} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.cerbos.effect.v1.Effect} value
 * @return {!proto.cerbos.policy.v1.PrincipalRule.Action} returns this
 */
proto.cerbos.policy.v1.PrincipalRule.Action.prototype.setEffect = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional string name = 4;
 * @return {string}
 */
proto.cerbos.policy.v1.PrincipalRule.Action.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.cerbos.policy.v1.PrincipalRule.Action} returns this
 */
proto.cerbos.policy.v1.PrincipalRule.Action.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string resource = 1;
 * @return {string}
 */
proto.cerbos.policy.v1.PrincipalRule.prototype.getResource = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.cerbos.policy.v1.PrincipalRule} returns this
 */
proto.cerbos.policy.v1.PrincipalRule.prototype.setResource = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated Action actions = 2;
 * @return {!Array<!proto.cerbos.policy.v1.PrincipalRule.Action>}
 */
proto.cerbos.policy.v1.PrincipalRule.prototype.getActionsList = function() {
  return /** @type{!Array<!proto.cerbos.policy.v1.PrincipalRule.Action>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.cerbos.policy.v1.PrincipalRule.Action, 2));
};


/**
 * @param {!Array<!proto.cerbos.policy.v1.PrincipalRule.Action>} value
 * @return {!proto.cerbos.policy.v1.PrincipalRule} returns this
*/
proto.cerbos.policy.v1.PrincipalRule.prototype.setActionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.cerbos.policy.v1.PrincipalRule.Action=} opt_value
 * @param {number=} opt_index
 * @return {!proto.cerbos.policy.v1.PrincipalRule.Action}
 */
proto.cerbos.policy.v1.PrincipalRule.prototype.addActions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.cerbos.policy.v1.PrincipalRule.Action, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cerbos.policy.v1.PrincipalRule} returns this
 */
proto.cerbos.policy.v1.PrincipalRule.prototype.clearActionsList = function() {
  return this.setActionsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.cerbos.policy.v1.DerivedRoles.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cerbos.policy.v1.DerivedRoles.prototype.toObject = function(opt_includeInstance) {
  return proto.cerbos.policy.v1.DerivedRoles.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cerbos.policy.v1.DerivedRoles} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cerbos.policy.v1.DerivedRoles.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    definitionsList: jspb.Message.toObjectList(msg.getDefinitionsList(),
    proto.cerbos.policy.v1.RoleDef.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cerbos.policy.v1.DerivedRoles}
 */
proto.cerbos.policy.v1.DerivedRoles.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cerbos.policy.v1.DerivedRoles;
  return proto.cerbos.policy.v1.DerivedRoles.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cerbos.policy.v1.DerivedRoles} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cerbos.policy.v1.DerivedRoles}
 */
proto.cerbos.policy.v1.DerivedRoles.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new proto.cerbos.policy.v1.RoleDef;
      reader.readMessage(value,proto.cerbos.policy.v1.RoleDef.deserializeBinaryFromReader);
      msg.addDefinitions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cerbos.policy.v1.DerivedRoles.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cerbos.policy.v1.DerivedRoles.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cerbos.policy.v1.DerivedRoles} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cerbos.policy.v1.DerivedRoles.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDefinitionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.cerbos.policy.v1.RoleDef.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.cerbos.policy.v1.DerivedRoles.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.cerbos.policy.v1.DerivedRoles} returns this
 */
proto.cerbos.policy.v1.DerivedRoles.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated RoleDef definitions = 2;
 * @return {!Array<!proto.cerbos.policy.v1.RoleDef>}
 */
proto.cerbos.policy.v1.DerivedRoles.prototype.getDefinitionsList = function() {
  return /** @type{!Array<!proto.cerbos.policy.v1.RoleDef>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.cerbos.policy.v1.RoleDef, 2));
};


/**
 * @param {!Array<!proto.cerbos.policy.v1.RoleDef>} value
 * @return {!proto.cerbos.policy.v1.DerivedRoles} returns this
*/
proto.cerbos.policy.v1.DerivedRoles.prototype.setDefinitionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.cerbos.policy.v1.RoleDef=} opt_value
 * @param {number=} opt_index
 * @return {!proto.cerbos.policy.v1.RoleDef}
 */
proto.cerbos.policy.v1.DerivedRoles.prototype.addDefinitions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.cerbos.policy.v1.RoleDef, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cerbos.policy.v1.DerivedRoles} returns this
 */
proto.cerbos.policy.v1.DerivedRoles.prototype.clearDefinitionsList = function() {
  return this.setDefinitionsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.cerbos.policy.v1.RoleDef.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cerbos.policy.v1.RoleDef.prototype.toObject = function(opt_includeInstance) {
  return proto.cerbos.policy.v1.RoleDef.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cerbos.policy.v1.RoleDef} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cerbos.policy.v1.RoleDef.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    parentRolesList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    condition: (f = msg.getCondition()) && proto.cerbos.policy.v1.Condition.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cerbos.policy.v1.RoleDef}
 */
proto.cerbos.policy.v1.RoleDef.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cerbos.policy.v1.RoleDef;
  return proto.cerbos.policy.v1.RoleDef.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cerbos.policy.v1.RoleDef} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cerbos.policy.v1.RoleDef}
 */
proto.cerbos.policy.v1.RoleDef.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addParentRoles(value);
      break;
    case 3:
      var value = new proto.cerbos.policy.v1.Condition;
      reader.readMessage(value,proto.cerbos.policy.v1.Condition.deserializeBinaryFromReader);
      msg.setCondition(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cerbos.policy.v1.RoleDef.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cerbos.policy.v1.RoleDef.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cerbos.policy.v1.RoleDef} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cerbos.policy.v1.RoleDef.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getParentRolesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getCondition();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.cerbos.policy.v1.Condition.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.cerbos.policy.v1.RoleDef.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.cerbos.policy.v1.RoleDef} returns this
 */
proto.cerbos.policy.v1.RoleDef.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string parent_roles = 2;
 * @return {!Array<string>}
 */
proto.cerbos.policy.v1.RoleDef.prototype.getParentRolesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.cerbos.policy.v1.RoleDef} returns this
 */
proto.cerbos.policy.v1.RoleDef.prototype.setParentRolesList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.cerbos.policy.v1.RoleDef} returns this
 */
proto.cerbos.policy.v1.RoleDef.prototype.addParentRoles = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cerbos.policy.v1.RoleDef} returns this
 */
proto.cerbos.policy.v1.RoleDef.prototype.clearParentRolesList = function() {
  return this.setParentRolesList([]);
};


/**
 * optional Condition condition = 3;
 * @return {?proto.cerbos.policy.v1.Condition}
 */
proto.cerbos.policy.v1.RoleDef.prototype.getCondition = function() {
  return /** @type{?proto.cerbos.policy.v1.Condition} */ (
    jspb.Message.getWrapperField(this, proto.cerbos.policy.v1.Condition, 3));
};


/**
 * @param {?proto.cerbos.policy.v1.Condition|undefined} value
 * @return {!proto.cerbos.policy.v1.RoleDef} returns this
*/
proto.cerbos.policy.v1.RoleDef.prototype.setCondition = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cerbos.policy.v1.RoleDef} returns this
 */
proto.cerbos.policy.v1.RoleDef.prototype.clearCondition = function() {
  return this.setCondition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cerbos.policy.v1.RoleDef.prototype.hasCondition = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.cerbos.policy.v1.Condition.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.cerbos.policy.v1.Condition.ConditionCase = {
  CONDITION_NOT_SET: 0,
  MATCH: 1,
  SCRIPT: 2
};

/**
 * @return {proto.cerbos.policy.v1.Condition.ConditionCase}
 */
proto.cerbos.policy.v1.Condition.prototype.getConditionCase = function() {
  return /** @type {proto.cerbos.policy.v1.Condition.ConditionCase} */(jspb.Message.computeOneofCase(this, proto.cerbos.policy.v1.Condition.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cerbos.policy.v1.Condition.prototype.toObject = function(opt_includeInstance) {
  return proto.cerbos.policy.v1.Condition.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cerbos.policy.v1.Condition} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cerbos.policy.v1.Condition.toObject = function(includeInstance, msg) {
  var f, obj = {
    match: (f = msg.getMatch()) && proto.cerbos.policy.v1.Match.toObject(includeInstance, f),
    script: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cerbos.policy.v1.Condition}
 */
proto.cerbos.policy.v1.Condition.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cerbos.policy.v1.Condition;
  return proto.cerbos.policy.v1.Condition.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cerbos.policy.v1.Condition} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cerbos.policy.v1.Condition}
 */
proto.cerbos.policy.v1.Condition.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.cerbos.policy.v1.Match;
      reader.readMessage(value,proto.cerbos.policy.v1.Match.deserializeBinaryFromReader);
      msg.setMatch(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setScript(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cerbos.policy.v1.Condition.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cerbos.policy.v1.Condition.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cerbos.policy.v1.Condition} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cerbos.policy.v1.Condition.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMatch();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.cerbos.policy.v1.Match.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional Match match = 1;
 * @return {?proto.cerbos.policy.v1.Match}
 */
proto.cerbos.policy.v1.Condition.prototype.getMatch = function() {
  return /** @type{?proto.cerbos.policy.v1.Match} */ (
    jspb.Message.getWrapperField(this, proto.cerbos.policy.v1.Match, 1));
};


/**
 * @param {?proto.cerbos.policy.v1.Match|undefined} value
 * @return {!proto.cerbos.policy.v1.Condition} returns this
*/
proto.cerbos.policy.v1.Condition.prototype.setMatch = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.cerbos.policy.v1.Condition.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cerbos.policy.v1.Condition} returns this
 */
proto.cerbos.policy.v1.Condition.prototype.clearMatch = function() {
  return this.setMatch(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cerbos.policy.v1.Condition.prototype.hasMatch = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string script = 2;
 * @return {string}
 */
proto.cerbos.policy.v1.Condition.prototype.getScript = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.cerbos.policy.v1.Condition} returns this
 */
proto.cerbos.policy.v1.Condition.prototype.setScript = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.cerbos.policy.v1.Condition.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.cerbos.policy.v1.Condition} returns this
 */
proto.cerbos.policy.v1.Condition.prototype.clearScript = function() {
  return jspb.Message.setOneofField(this, 2, proto.cerbos.policy.v1.Condition.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cerbos.policy.v1.Condition.prototype.hasScript = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.cerbos.policy.v1.Match.oneofGroups_ = [[1,2,3,4]];

/**
 * @enum {number}
 */
proto.cerbos.policy.v1.Match.OpCase = {
  OP_NOT_SET: 0,
  ALL: 1,
  ANY: 2,
  NONE: 3,
  EXPR: 4
};

/**
 * @return {proto.cerbos.policy.v1.Match.OpCase}
 */
proto.cerbos.policy.v1.Match.prototype.getOpCase = function() {
  return /** @type {proto.cerbos.policy.v1.Match.OpCase} */(jspb.Message.computeOneofCase(this, proto.cerbos.policy.v1.Match.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cerbos.policy.v1.Match.prototype.toObject = function(opt_includeInstance) {
  return proto.cerbos.policy.v1.Match.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cerbos.policy.v1.Match} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cerbos.policy.v1.Match.toObject = function(includeInstance, msg) {
  var f, obj = {
    all: (f = msg.getAll()) && proto.cerbos.policy.v1.Match.ExprList.toObject(includeInstance, f),
    any: (f = msg.getAny()) && proto.cerbos.policy.v1.Match.ExprList.toObject(includeInstance, f),
    none: (f = msg.getNone()) && proto.cerbos.policy.v1.Match.ExprList.toObject(includeInstance, f),
    expr: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cerbos.policy.v1.Match}
 */
proto.cerbos.policy.v1.Match.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cerbos.policy.v1.Match;
  return proto.cerbos.policy.v1.Match.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cerbos.policy.v1.Match} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cerbos.policy.v1.Match}
 */
proto.cerbos.policy.v1.Match.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.cerbos.policy.v1.Match.ExprList;
      reader.readMessage(value,proto.cerbos.policy.v1.Match.ExprList.deserializeBinaryFromReader);
      msg.setAll(value);
      break;
    case 2:
      var value = new proto.cerbos.policy.v1.Match.ExprList;
      reader.readMessage(value,proto.cerbos.policy.v1.Match.ExprList.deserializeBinaryFromReader);
      msg.setAny(value);
      break;
    case 3:
      var value = new proto.cerbos.policy.v1.Match.ExprList;
      reader.readMessage(value,proto.cerbos.policy.v1.Match.ExprList.deserializeBinaryFromReader);
      msg.setNone(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setExpr(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cerbos.policy.v1.Match.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cerbos.policy.v1.Match.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cerbos.policy.v1.Match} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cerbos.policy.v1.Match.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAll();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.cerbos.policy.v1.Match.ExprList.serializeBinaryToWriter
    );
  }
  f = message.getAny();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.cerbos.policy.v1.Match.ExprList.serializeBinaryToWriter
    );
  }
  f = message.getNone();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.cerbos.policy.v1.Match.ExprList.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.cerbos.policy.v1.Match.ExprList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cerbos.policy.v1.Match.ExprList.prototype.toObject = function(opt_includeInstance) {
  return proto.cerbos.policy.v1.Match.ExprList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cerbos.policy.v1.Match.ExprList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cerbos.policy.v1.Match.ExprList.toObject = function(includeInstance, msg) {
  var f, obj = {
    ofList: jspb.Message.toObjectList(msg.getOfList(),
    proto.cerbos.policy.v1.Match.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cerbos.policy.v1.Match.ExprList}
 */
proto.cerbos.policy.v1.Match.ExprList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cerbos.policy.v1.Match.ExprList;
  return proto.cerbos.policy.v1.Match.ExprList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cerbos.policy.v1.Match.ExprList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cerbos.policy.v1.Match.ExprList}
 */
proto.cerbos.policy.v1.Match.ExprList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.cerbos.policy.v1.Match;
      reader.readMessage(value,proto.cerbos.policy.v1.Match.deserializeBinaryFromReader);
      msg.addOf(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cerbos.policy.v1.Match.ExprList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cerbos.policy.v1.Match.ExprList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cerbos.policy.v1.Match.ExprList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cerbos.policy.v1.Match.ExprList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOfList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.cerbos.policy.v1.Match.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Match of = 1;
 * @return {!Array<!proto.cerbos.policy.v1.Match>}
 */
proto.cerbos.policy.v1.Match.ExprList.prototype.getOfList = function() {
  return /** @type{!Array<!proto.cerbos.policy.v1.Match>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.cerbos.policy.v1.Match, 1));
};


/**
 * @param {!Array<!proto.cerbos.policy.v1.Match>} value
 * @return {!proto.cerbos.policy.v1.Match.ExprList} returns this
*/
proto.cerbos.policy.v1.Match.ExprList.prototype.setOfList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.cerbos.policy.v1.Match=} opt_value
 * @param {number=} opt_index
 * @return {!proto.cerbos.policy.v1.Match}
 */
proto.cerbos.policy.v1.Match.ExprList.prototype.addOf = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.cerbos.policy.v1.Match, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cerbos.policy.v1.Match.ExprList} returns this
 */
proto.cerbos.policy.v1.Match.ExprList.prototype.clearOfList = function() {
  return this.setOfList([]);
};


/**
 * optional ExprList all = 1;
 * @return {?proto.cerbos.policy.v1.Match.ExprList}
 */
proto.cerbos.policy.v1.Match.prototype.getAll = function() {
  return /** @type{?proto.cerbos.policy.v1.Match.ExprList} */ (
    jspb.Message.getWrapperField(this, proto.cerbos.policy.v1.Match.ExprList, 1));
};


/**
 * @param {?proto.cerbos.policy.v1.Match.ExprList|undefined} value
 * @return {!proto.cerbos.policy.v1.Match} returns this
*/
proto.cerbos.policy.v1.Match.prototype.setAll = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.cerbos.policy.v1.Match.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cerbos.policy.v1.Match} returns this
 */
proto.cerbos.policy.v1.Match.prototype.clearAll = function() {
  return this.setAll(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cerbos.policy.v1.Match.prototype.hasAll = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ExprList any = 2;
 * @return {?proto.cerbos.policy.v1.Match.ExprList}
 */
proto.cerbos.policy.v1.Match.prototype.getAny = function() {
  return /** @type{?proto.cerbos.policy.v1.Match.ExprList} */ (
    jspb.Message.getWrapperField(this, proto.cerbos.policy.v1.Match.ExprList, 2));
};


/**
 * @param {?proto.cerbos.policy.v1.Match.ExprList|undefined} value
 * @return {!proto.cerbos.policy.v1.Match} returns this
*/
proto.cerbos.policy.v1.Match.prototype.setAny = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.cerbos.policy.v1.Match.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cerbos.policy.v1.Match} returns this
 */
proto.cerbos.policy.v1.Match.prototype.clearAny = function() {
  return this.setAny(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cerbos.policy.v1.Match.prototype.hasAny = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ExprList none = 3;
 * @return {?proto.cerbos.policy.v1.Match.ExprList}
 */
proto.cerbos.policy.v1.Match.prototype.getNone = function() {
  return /** @type{?proto.cerbos.policy.v1.Match.ExprList} */ (
    jspb.Message.getWrapperField(this, proto.cerbos.policy.v1.Match.ExprList, 3));
};


/**
 * @param {?proto.cerbos.policy.v1.Match.ExprList|undefined} value
 * @return {!proto.cerbos.policy.v1.Match} returns this
*/
proto.cerbos.policy.v1.Match.prototype.setNone = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.cerbos.policy.v1.Match.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cerbos.policy.v1.Match} returns this
 */
proto.cerbos.policy.v1.Match.prototype.clearNone = function() {
  return this.setNone(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cerbos.policy.v1.Match.prototype.hasNone = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string expr = 4;
 * @return {string}
 */
proto.cerbos.policy.v1.Match.prototype.getExpr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.cerbos.policy.v1.Match} returns this
 */
proto.cerbos.policy.v1.Match.prototype.setExpr = function(value) {
  return jspb.Message.setOneofField(this, 4, proto.cerbos.policy.v1.Match.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.cerbos.policy.v1.Match} returns this
 */
proto.cerbos.policy.v1.Match.prototype.clearExpr = function() {
  return jspb.Message.setOneofField(this, 4, proto.cerbos.policy.v1.Match.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cerbos.policy.v1.Match.prototype.hasExpr = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cerbos.policy.v1.Schemas.prototype.toObject = function(opt_includeInstance) {
  return proto.cerbos.policy.v1.Schemas.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cerbos.policy.v1.Schemas} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cerbos.policy.v1.Schemas.toObject = function(includeInstance, msg) {
  var f, obj = {
    principalSchema: (f = msg.getPrincipalSchema()) && proto.cerbos.policy.v1.Schemas.Schema.toObject(includeInstance, f),
    resourceSchema: (f = msg.getResourceSchema()) && proto.cerbos.policy.v1.Schemas.Schema.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cerbos.policy.v1.Schemas}
 */
proto.cerbos.policy.v1.Schemas.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cerbos.policy.v1.Schemas;
  return proto.cerbos.policy.v1.Schemas.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cerbos.policy.v1.Schemas} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cerbos.policy.v1.Schemas}
 */
proto.cerbos.policy.v1.Schemas.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.cerbos.policy.v1.Schemas.Schema;
      reader.readMessage(value,proto.cerbos.policy.v1.Schemas.Schema.deserializeBinaryFromReader);
      msg.setPrincipalSchema(value);
      break;
    case 2:
      var value = new proto.cerbos.policy.v1.Schemas.Schema;
      reader.readMessage(value,proto.cerbos.policy.v1.Schemas.Schema.deserializeBinaryFromReader);
      msg.setResourceSchema(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cerbos.policy.v1.Schemas.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cerbos.policy.v1.Schemas.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cerbos.policy.v1.Schemas} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cerbos.policy.v1.Schemas.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPrincipalSchema();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.cerbos.policy.v1.Schemas.Schema.serializeBinaryToWriter
    );
  }
  f = message.getResourceSchema();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.cerbos.policy.v1.Schemas.Schema.serializeBinaryToWriter
    );
  }
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.cerbos.policy.v1.Schemas.IgnoreWhen.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cerbos.policy.v1.Schemas.IgnoreWhen.prototype.toObject = function(opt_includeInstance) {
  return proto.cerbos.policy.v1.Schemas.IgnoreWhen.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cerbos.policy.v1.Schemas.IgnoreWhen} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cerbos.policy.v1.Schemas.IgnoreWhen.toObject = function(includeInstance, msg) {
  var f, obj = {
    actionsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cerbos.policy.v1.Schemas.IgnoreWhen}
 */
proto.cerbos.policy.v1.Schemas.IgnoreWhen.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cerbos.policy.v1.Schemas.IgnoreWhen;
  return proto.cerbos.policy.v1.Schemas.IgnoreWhen.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cerbos.policy.v1.Schemas.IgnoreWhen} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cerbos.policy.v1.Schemas.IgnoreWhen}
 */
proto.cerbos.policy.v1.Schemas.IgnoreWhen.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addActions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cerbos.policy.v1.Schemas.IgnoreWhen.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cerbos.policy.v1.Schemas.IgnoreWhen.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cerbos.policy.v1.Schemas.IgnoreWhen} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cerbos.policy.v1.Schemas.IgnoreWhen.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActionsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string actions = 1;
 * @return {!Array<string>}
 */
proto.cerbos.policy.v1.Schemas.IgnoreWhen.prototype.getActionsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.cerbos.policy.v1.Schemas.IgnoreWhen} returns this
 */
proto.cerbos.policy.v1.Schemas.IgnoreWhen.prototype.setActionsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.cerbos.policy.v1.Schemas.IgnoreWhen} returns this
 */
proto.cerbos.policy.v1.Schemas.IgnoreWhen.prototype.addActions = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cerbos.policy.v1.Schemas.IgnoreWhen} returns this
 */
proto.cerbos.policy.v1.Schemas.IgnoreWhen.prototype.clearActionsList = function() {
  return this.setActionsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cerbos.policy.v1.Schemas.Schema.prototype.toObject = function(opt_includeInstance) {
  return proto.cerbos.policy.v1.Schemas.Schema.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cerbos.policy.v1.Schemas.Schema} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cerbos.policy.v1.Schemas.Schema.toObject = function(includeInstance, msg) {
  var f, obj = {
    ref: jspb.Message.getFieldWithDefault(msg, 1, ""),
    ignoreWhen: (f = msg.getIgnoreWhen()) && proto.cerbos.policy.v1.Schemas.IgnoreWhen.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cerbos.policy.v1.Schemas.Schema}
 */
proto.cerbos.policy.v1.Schemas.Schema.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cerbos.policy.v1.Schemas.Schema;
  return proto.cerbos.policy.v1.Schemas.Schema.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cerbos.policy.v1.Schemas.Schema} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cerbos.policy.v1.Schemas.Schema}
 */
proto.cerbos.policy.v1.Schemas.Schema.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRef(value);
      break;
    case 2:
      var value = new proto.cerbos.policy.v1.Schemas.IgnoreWhen;
      reader.readMessage(value,proto.cerbos.policy.v1.Schemas.IgnoreWhen.deserializeBinaryFromReader);
      msg.setIgnoreWhen(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cerbos.policy.v1.Schemas.Schema.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cerbos.policy.v1.Schemas.Schema.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cerbos.policy.v1.Schemas.Schema} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cerbos.policy.v1.Schemas.Schema.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRef();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getIgnoreWhen();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.cerbos.policy.v1.Schemas.IgnoreWhen.serializeBinaryToWriter
    );
  }
};


/**
 * optional string ref = 1;
 * @return {string}
 */
proto.cerbos.policy.v1.Schemas.Schema.prototype.getRef = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.cerbos.policy.v1.Schemas.Schema} returns this
 */
proto.cerbos.policy.v1.Schemas.Schema.prototype.setRef = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional IgnoreWhen ignore_when = 2;
 * @return {?proto.cerbos.policy.v1.Schemas.IgnoreWhen}
 */
proto.cerbos.policy.v1.Schemas.Schema.prototype.getIgnoreWhen = function() {
  return /** @type{?proto.cerbos.policy.v1.Schemas.IgnoreWhen} */ (
    jspb.Message.getWrapperField(this, proto.cerbos.policy.v1.Schemas.IgnoreWhen, 2));
};


/**
 * @param {?proto.cerbos.policy.v1.Schemas.IgnoreWhen|undefined} value
 * @return {!proto.cerbos.policy.v1.Schemas.Schema} returns this
*/
proto.cerbos.policy.v1.Schemas.Schema.prototype.setIgnoreWhen = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cerbos.policy.v1.Schemas.Schema} returns this
 */
proto.cerbos.policy.v1.Schemas.Schema.prototype.clearIgnoreWhen = function() {
  return this.setIgnoreWhen(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cerbos.policy.v1.Schemas.Schema.prototype.hasIgnoreWhen = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Schema principal_schema = 1;
 * @return {?proto.cerbos.policy.v1.Schemas.Schema}
 */
proto.cerbos.policy.v1.Schemas.prototype.getPrincipalSchema = function() {
  return /** @type{?proto.cerbos.policy.v1.Schemas.Schema} */ (
    jspb.Message.getWrapperField(this, proto.cerbos.policy.v1.Schemas.Schema, 1));
};


/**
 * @param {?proto.cerbos.policy.v1.Schemas.Schema|undefined} value
 * @return {!proto.cerbos.policy.v1.Schemas} returns this
*/
proto.cerbos.policy.v1.Schemas.prototype.setPrincipalSchema = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cerbos.policy.v1.Schemas} returns this
 */
proto.cerbos.policy.v1.Schemas.prototype.clearPrincipalSchema = function() {
  return this.setPrincipalSchema(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cerbos.policy.v1.Schemas.prototype.hasPrincipalSchema = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Schema resource_schema = 2;
 * @return {?proto.cerbos.policy.v1.Schemas.Schema}
 */
proto.cerbos.policy.v1.Schemas.prototype.getResourceSchema = function() {
  return /** @type{?proto.cerbos.policy.v1.Schemas.Schema} */ (
    jspb.Message.getWrapperField(this, proto.cerbos.policy.v1.Schemas.Schema, 2));
};


/**
 * @param {?proto.cerbos.policy.v1.Schemas.Schema|undefined} value
 * @return {!proto.cerbos.policy.v1.Schemas} returns this
*/
proto.cerbos.policy.v1.Schemas.prototype.setResourceSchema = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cerbos.policy.v1.Schemas} returns this
 */
proto.cerbos.policy.v1.Schemas.prototype.clearResourceSchema = function() {
  return this.setResourceSchema(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cerbos.policy.v1.Schemas.prototype.hasResourceSchema = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cerbos.policy.v1.TestFixture.prototype.toObject = function(opt_includeInstance) {
  return proto.cerbos.policy.v1.TestFixture.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cerbos.policy.v1.TestFixture} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cerbos.policy.v1.TestFixture.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cerbos.policy.v1.TestFixture}
 */
proto.cerbos.policy.v1.TestFixture.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cerbos.policy.v1.TestFixture;
  return proto.cerbos.policy.v1.TestFixture.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cerbos.policy.v1.TestFixture} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cerbos.policy.v1.TestFixture}
 */
proto.cerbos.policy.v1.TestFixture.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cerbos.policy.v1.TestFixture.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cerbos.policy.v1.TestFixture.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cerbos.policy.v1.TestFixture} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cerbos.policy.v1.TestFixture.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cerbos.policy.v1.TestFixture.Principals.prototype.toObject = function(opt_includeInstance) {
  return proto.cerbos.policy.v1.TestFixture.Principals.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cerbos.policy.v1.TestFixture.Principals} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cerbos.policy.v1.TestFixture.Principals.toObject = function(includeInstance, msg) {
  var f, obj = {
    principalsMap: (f = msg.getPrincipalsMap()) ? f.toObject(includeInstance, proto.cerbos.engine.v1.Principal.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cerbos.policy.v1.TestFixture.Principals}
 */
proto.cerbos.policy.v1.TestFixture.Principals.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cerbos.policy.v1.TestFixture.Principals;
  return proto.cerbos.policy.v1.TestFixture.Principals.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cerbos.policy.v1.TestFixture.Principals} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cerbos.policy.v1.TestFixture.Principals}
 */
proto.cerbos.policy.v1.TestFixture.Principals.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getPrincipalsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.cerbos.engine.v1.Principal.deserializeBinaryFromReader, "", new proto.cerbos.engine.v1.Principal());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cerbos.policy.v1.TestFixture.Principals.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cerbos.policy.v1.TestFixture.Principals.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cerbos.policy.v1.TestFixture.Principals} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cerbos.policy.v1.TestFixture.Principals.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPrincipalsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.cerbos.engine.v1.Principal.serializeBinaryToWriter);
  }
};


/**
 * map<string, cerbos.engine.v1.Principal> principals = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.cerbos.engine.v1.Principal>}
 */
proto.cerbos.policy.v1.TestFixture.Principals.prototype.getPrincipalsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.cerbos.engine.v1.Principal>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      proto.cerbos.engine.v1.Principal));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.cerbos.policy.v1.TestFixture.Principals} returns this
 */
proto.cerbos.policy.v1.TestFixture.Principals.prototype.clearPrincipalsMap = function() {
  this.getPrincipalsMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cerbos.policy.v1.TestFixture.Resources.prototype.toObject = function(opt_includeInstance) {
  return proto.cerbos.policy.v1.TestFixture.Resources.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cerbos.policy.v1.TestFixture.Resources} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cerbos.policy.v1.TestFixture.Resources.toObject = function(includeInstance, msg) {
  var f, obj = {
    resourcesMap: (f = msg.getResourcesMap()) ? f.toObject(includeInstance, proto.cerbos.engine.v1.Resource.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cerbos.policy.v1.TestFixture.Resources}
 */
proto.cerbos.policy.v1.TestFixture.Resources.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cerbos.policy.v1.TestFixture.Resources;
  return proto.cerbos.policy.v1.TestFixture.Resources.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cerbos.policy.v1.TestFixture.Resources} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cerbos.policy.v1.TestFixture.Resources}
 */
proto.cerbos.policy.v1.TestFixture.Resources.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getResourcesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.cerbos.engine.v1.Resource.deserializeBinaryFromReader, "", new proto.cerbos.engine.v1.Resource());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cerbos.policy.v1.TestFixture.Resources.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cerbos.policy.v1.TestFixture.Resources.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cerbos.policy.v1.TestFixture.Resources} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cerbos.policy.v1.TestFixture.Resources.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResourcesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.cerbos.engine.v1.Resource.serializeBinaryToWriter);
  }
};


/**
 * map<string, cerbos.engine.v1.Resource> resources = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.cerbos.engine.v1.Resource>}
 */
proto.cerbos.policy.v1.TestFixture.Resources.prototype.getResourcesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.cerbos.engine.v1.Resource>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      proto.cerbos.engine.v1.Resource));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.cerbos.policy.v1.TestFixture.Resources} returns this
 */
proto.cerbos.policy.v1.TestFixture.Resources.prototype.clearResourcesMap = function() {
  this.getResourcesMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cerbos.policy.v1.TestFixture.AuxData.prototype.toObject = function(opt_includeInstance) {
  return proto.cerbos.policy.v1.TestFixture.AuxData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cerbos.policy.v1.TestFixture.AuxData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cerbos.policy.v1.TestFixture.AuxData.toObject = function(includeInstance, msg) {
  var f, obj = {
    auxDataMap: (f = msg.getAuxDataMap()) ? f.toObject(includeInstance, proto.cerbos.engine.v1.AuxData.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cerbos.policy.v1.TestFixture.AuxData}
 */
proto.cerbos.policy.v1.TestFixture.AuxData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cerbos.policy.v1.TestFixture.AuxData;
  return proto.cerbos.policy.v1.TestFixture.AuxData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cerbos.policy.v1.TestFixture.AuxData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cerbos.policy.v1.TestFixture.AuxData}
 */
proto.cerbos.policy.v1.TestFixture.AuxData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getAuxDataMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.cerbos.engine.v1.AuxData.deserializeBinaryFromReader, "", new proto.cerbos.engine.v1.AuxData());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cerbos.policy.v1.TestFixture.AuxData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cerbos.policy.v1.TestFixture.AuxData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cerbos.policy.v1.TestFixture.AuxData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cerbos.policy.v1.TestFixture.AuxData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAuxDataMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.cerbos.engine.v1.AuxData.serializeBinaryToWriter);
  }
};


/**
 * map<string, cerbos.engine.v1.AuxData> aux_data = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.cerbos.engine.v1.AuxData>}
 */
proto.cerbos.policy.v1.TestFixture.AuxData.prototype.getAuxDataMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.cerbos.engine.v1.AuxData>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      proto.cerbos.engine.v1.AuxData));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.cerbos.policy.v1.TestFixture.AuxData} returns this
 */
proto.cerbos.policy.v1.TestFixture.AuxData.prototype.clearAuxDataMap = function() {
  this.getAuxDataMap().clear();
  return this;};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.cerbos.policy.v1.TestSuite.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cerbos.policy.v1.TestSuite.prototype.toObject = function(opt_includeInstance) {
  return proto.cerbos.policy.v1.TestSuite.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cerbos.policy.v1.TestSuite} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cerbos.policy.v1.TestSuite.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    description: jspb.Message.getFieldWithDefault(msg, 2, ""),
    skip: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    skipReason: jspb.Message.getFieldWithDefault(msg, 4, ""),
    testsList: jspb.Message.toObjectList(msg.getTestsList(),
    proto.cerbos.policy.v1.TestTable.toObject, includeInstance),
    principalsMap: (f = msg.getPrincipalsMap()) ? f.toObject(includeInstance, proto.cerbos.engine.v1.Principal.toObject) : [],
    resourcesMap: (f = msg.getResourcesMap()) ? f.toObject(includeInstance, proto.cerbos.engine.v1.Resource.toObject) : [],
    auxDataMap: (f = msg.getAuxDataMap()) ? f.toObject(includeInstance, proto.cerbos.engine.v1.AuxData.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cerbos.policy.v1.TestSuite}
 */
proto.cerbos.policy.v1.TestSuite.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cerbos.policy.v1.TestSuite;
  return proto.cerbos.policy.v1.TestSuite.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cerbos.policy.v1.TestSuite} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cerbos.policy.v1.TestSuite}
 */
proto.cerbos.policy.v1.TestSuite.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSkip(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSkipReason(value);
      break;
    case 5:
      var value = new proto.cerbos.policy.v1.TestTable;
      reader.readMessage(value,proto.cerbos.policy.v1.TestTable.deserializeBinaryFromReader);
      msg.addTests(value);
      break;
    case 6:
      var value = msg.getPrincipalsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.cerbos.engine.v1.Principal.deserializeBinaryFromReader, "", new proto.cerbos.engine.v1.Principal());
         });
      break;
    case 7:
      var value = msg.getResourcesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.cerbos.engine.v1.Resource.deserializeBinaryFromReader, "", new proto.cerbos.engine.v1.Resource());
         });
      break;
    case 8:
      var value = msg.getAuxDataMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.cerbos.engine.v1.AuxData.deserializeBinaryFromReader, "", new proto.cerbos.engine.v1.AuxData());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cerbos.policy.v1.TestSuite.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cerbos.policy.v1.TestSuite.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cerbos.policy.v1.TestSuite} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cerbos.policy.v1.TestSuite.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSkip();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getSkipReason();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getTestsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.cerbos.policy.v1.TestTable.serializeBinaryToWriter
    );
  }
  f = message.getPrincipalsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(6, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.cerbos.engine.v1.Principal.serializeBinaryToWriter);
  }
  f = message.getResourcesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(7, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.cerbos.engine.v1.Resource.serializeBinaryToWriter);
  }
  f = message.getAuxDataMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(8, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.cerbos.engine.v1.AuxData.serializeBinaryToWriter);
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.cerbos.policy.v1.TestSuite.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.cerbos.policy.v1.TestSuite} returns this
 */
proto.cerbos.policy.v1.TestSuite.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.cerbos.policy.v1.TestSuite.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.cerbos.policy.v1.TestSuite} returns this
 */
proto.cerbos.policy.v1.TestSuite.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool skip = 3;
 * @return {boolean}
 */
proto.cerbos.policy.v1.TestSuite.prototype.getSkip = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.cerbos.policy.v1.TestSuite} returns this
 */
proto.cerbos.policy.v1.TestSuite.prototype.setSkip = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional string skip_reason = 4;
 * @return {string}
 */
proto.cerbos.policy.v1.TestSuite.prototype.getSkipReason = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.cerbos.policy.v1.TestSuite} returns this
 */
proto.cerbos.policy.v1.TestSuite.prototype.setSkipReason = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * repeated TestTable tests = 5;
 * @return {!Array<!proto.cerbos.policy.v1.TestTable>}
 */
proto.cerbos.policy.v1.TestSuite.prototype.getTestsList = function() {
  return /** @type{!Array<!proto.cerbos.policy.v1.TestTable>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.cerbos.policy.v1.TestTable, 5));
};


/**
 * @param {!Array<!proto.cerbos.policy.v1.TestTable>} value
 * @return {!proto.cerbos.policy.v1.TestSuite} returns this
*/
proto.cerbos.policy.v1.TestSuite.prototype.setTestsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.cerbos.policy.v1.TestTable=} opt_value
 * @param {number=} opt_index
 * @return {!proto.cerbos.policy.v1.TestTable}
 */
proto.cerbos.policy.v1.TestSuite.prototype.addTests = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.cerbos.policy.v1.TestTable, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cerbos.policy.v1.TestSuite} returns this
 */
proto.cerbos.policy.v1.TestSuite.prototype.clearTestsList = function() {
  return this.setTestsList([]);
};


/**
 * map<string, cerbos.engine.v1.Principal> principals = 6;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.cerbos.engine.v1.Principal>}
 */
proto.cerbos.policy.v1.TestSuite.prototype.getPrincipalsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.cerbos.engine.v1.Principal>} */ (
      jspb.Message.getMapField(this, 6, opt_noLazyCreate,
      proto.cerbos.engine.v1.Principal));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.cerbos.policy.v1.TestSuite} returns this
 */
proto.cerbos.policy.v1.TestSuite.prototype.clearPrincipalsMap = function() {
  this.getPrincipalsMap().clear();
  return this;};


/**
 * map<string, cerbos.engine.v1.Resource> resources = 7;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.cerbos.engine.v1.Resource>}
 */
proto.cerbos.policy.v1.TestSuite.prototype.getResourcesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.cerbos.engine.v1.Resource>} */ (
      jspb.Message.getMapField(this, 7, opt_noLazyCreate,
      proto.cerbos.engine.v1.Resource));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.cerbos.policy.v1.TestSuite} returns this
 */
proto.cerbos.policy.v1.TestSuite.prototype.clearResourcesMap = function() {
  this.getResourcesMap().clear();
  return this;};


/**
 * map<string, cerbos.engine.v1.AuxData> aux_data = 8;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.cerbos.engine.v1.AuxData>}
 */
proto.cerbos.policy.v1.TestSuite.prototype.getAuxDataMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.cerbos.engine.v1.AuxData>} */ (
      jspb.Message.getMapField(this, 8, opt_noLazyCreate,
      proto.cerbos.engine.v1.AuxData));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.cerbos.policy.v1.TestSuite} returns this
 */
proto.cerbos.policy.v1.TestSuite.prototype.clearAuxDataMap = function() {
  this.getAuxDataMap().clear();
  return this;};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.cerbos.policy.v1.TestTable.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cerbos.policy.v1.TestTable.prototype.toObject = function(opt_includeInstance) {
  return proto.cerbos.policy.v1.TestTable.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cerbos.policy.v1.TestTable} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cerbos.policy.v1.TestTable.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    description: jspb.Message.getFieldWithDefault(msg, 2, ""),
    skip: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    skipReason: jspb.Message.getFieldWithDefault(msg, 4, ""),
    input: (f = msg.getInput()) && proto.cerbos.policy.v1.TestTable.Input.toObject(includeInstance, f),
    expectedList: jspb.Message.toObjectList(msg.getExpectedList(),
    proto.cerbos.policy.v1.TestTable.Expectation.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cerbos.policy.v1.TestTable}
 */
proto.cerbos.policy.v1.TestTable.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cerbos.policy.v1.TestTable;
  return proto.cerbos.policy.v1.TestTable.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cerbos.policy.v1.TestTable} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cerbos.policy.v1.TestTable}
 */
proto.cerbos.policy.v1.TestTable.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSkip(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSkipReason(value);
      break;
    case 5:
      var value = new proto.cerbos.policy.v1.TestTable.Input;
      reader.readMessage(value,proto.cerbos.policy.v1.TestTable.Input.deserializeBinaryFromReader);
      msg.setInput(value);
      break;
    case 6:
      var value = new proto.cerbos.policy.v1.TestTable.Expectation;
      reader.readMessage(value,proto.cerbos.policy.v1.TestTable.Expectation.deserializeBinaryFromReader);
      msg.addExpected(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cerbos.policy.v1.TestTable.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cerbos.policy.v1.TestTable.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cerbos.policy.v1.TestTable} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cerbos.policy.v1.TestTable.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSkip();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getSkipReason();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getInput();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.cerbos.policy.v1.TestTable.Input.serializeBinaryToWriter
    );
  }
  f = message.getExpectedList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.cerbos.policy.v1.TestTable.Expectation.serializeBinaryToWriter
    );
  }
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.cerbos.policy.v1.TestTable.Input.repeatedFields_ = [1,2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cerbos.policy.v1.TestTable.Input.prototype.toObject = function(opt_includeInstance) {
  return proto.cerbos.policy.v1.TestTable.Input.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cerbos.policy.v1.TestTable.Input} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cerbos.policy.v1.TestTable.Input.toObject = function(includeInstance, msg) {
  var f, obj = {
    principalsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    resourcesList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    actionsList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    auxData: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cerbos.policy.v1.TestTable.Input}
 */
proto.cerbos.policy.v1.TestTable.Input.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cerbos.policy.v1.TestTable.Input;
  return proto.cerbos.policy.v1.TestTable.Input.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cerbos.policy.v1.TestTable.Input} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cerbos.policy.v1.TestTable.Input}
 */
proto.cerbos.policy.v1.TestTable.Input.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addPrincipals(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addResources(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addActions(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setAuxData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cerbos.policy.v1.TestTable.Input.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cerbos.policy.v1.TestTable.Input.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cerbos.policy.v1.TestTable.Input} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cerbos.policy.v1.TestTable.Input.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPrincipalsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getResourcesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getActionsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getAuxData();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * repeated string principals = 1;
 * @return {!Array<string>}
 */
proto.cerbos.policy.v1.TestTable.Input.prototype.getPrincipalsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.cerbos.policy.v1.TestTable.Input} returns this
 */
proto.cerbos.policy.v1.TestTable.Input.prototype.setPrincipalsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.cerbos.policy.v1.TestTable.Input} returns this
 */
proto.cerbos.policy.v1.TestTable.Input.prototype.addPrincipals = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cerbos.policy.v1.TestTable.Input} returns this
 */
proto.cerbos.policy.v1.TestTable.Input.prototype.clearPrincipalsList = function() {
  return this.setPrincipalsList([]);
};


/**
 * repeated string resources = 2;
 * @return {!Array<string>}
 */
proto.cerbos.policy.v1.TestTable.Input.prototype.getResourcesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.cerbos.policy.v1.TestTable.Input} returns this
 */
proto.cerbos.policy.v1.TestTable.Input.prototype.setResourcesList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.cerbos.policy.v1.TestTable.Input} returns this
 */
proto.cerbos.policy.v1.TestTable.Input.prototype.addResources = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cerbos.policy.v1.TestTable.Input} returns this
 */
proto.cerbos.policy.v1.TestTable.Input.prototype.clearResourcesList = function() {
  return this.setResourcesList([]);
};


/**
 * repeated string actions = 3;
 * @return {!Array<string>}
 */
proto.cerbos.policy.v1.TestTable.Input.prototype.getActionsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.cerbos.policy.v1.TestTable.Input} returns this
 */
proto.cerbos.policy.v1.TestTable.Input.prototype.setActionsList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.cerbos.policy.v1.TestTable.Input} returns this
 */
proto.cerbos.policy.v1.TestTable.Input.prototype.addActions = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cerbos.policy.v1.TestTable.Input} returns this
 */
proto.cerbos.policy.v1.TestTable.Input.prototype.clearActionsList = function() {
  return this.setActionsList([]);
};


/**
 * optional string aux_data = 4;
 * @return {string}
 */
proto.cerbos.policy.v1.TestTable.Input.prototype.getAuxData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.cerbos.policy.v1.TestTable.Input} returns this
 */
proto.cerbos.policy.v1.TestTable.Input.prototype.setAuxData = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cerbos.policy.v1.TestTable.Expectation.prototype.toObject = function(opt_includeInstance) {
  return proto.cerbos.policy.v1.TestTable.Expectation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cerbos.policy.v1.TestTable.Expectation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cerbos.policy.v1.TestTable.Expectation.toObject = function(includeInstance, msg) {
  var f, obj = {
    principal: jspb.Message.getFieldWithDefault(msg, 1, ""),
    resource: jspb.Message.getFieldWithDefault(msg, 2, ""),
    actionsMap: (f = msg.getActionsMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cerbos.policy.v1.TestTable.Expectation}
 */
proto.cerbos.policy.v1.TestTable.Expectation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cerbos.policy.v1.TestTable.Expectation;
  return proto.cerbos.policy.v1.TestTable.Expectation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cerbos.policy.v1.TestTable.Expectation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cerbos.policy.v1.TestTable.Expectation}
 */
proto.cerbos.policy.v1.TestTable.Expectation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrincipal(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setResource(value);
      break;
    case 3:
      var value = msg.getActionsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readEnum, null, "", 0);
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cerbos.policy.v1.TestTable.Expectation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cerbos.policy.v1.TestTable.Expectation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cerbos.policy.v1.TestTable.Expectation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cerbos.policy.v1.TestTable.Expectation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPrincipal();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getResource();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getActionsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeEnum);
  }
};


/**
 * optional string principal = 1;
 * @return {string}
 */
proto.cerbos.policy.v1.TestTable.Expectation.prototype.getPrincipal = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.cerbos.policy.v1.TestTable.Expectation} returns this
 */
proto.cerbos.policy.v1.TestTable.Expectation.prototype.setPrincipal = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string resource = 2;
 * @return {string}
 */
proto.cerbos.policy.v1.TestTable.Expectation.prototype.getResource = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.cerbos.policy.v1.TestTable.Expectation} returns this
 */
proto.cerbos.policy.v1.TestTable.Expectation.prototype.setResource = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * map<string, cerbos.effect.v1.Effect> actions = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.cerbos.effect.v1.Effect>}
 */
proto.cerbos.policy.v1.TestTable.Expectation.prototype.getActionsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.cerbos.effect.v1.Effect>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.cerbos.policy.v1.TestTable.Expectation} returns this
 */
proto.cerbos.policy.v1.TestTable.Expectation.prototype.clearActionsMap = function() {
  this.getActionsMap().clear();
  return this;};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.cerbos.policy.v1.TestTable.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.cerbos.policy.v1.TestTable} returns this
 */
proto.cerbos.policy.v1.TestTable.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.cerbos.policy.v1.TestTable.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.cerbos.policy.v1.TestTable} returns this
 */
proto.cerbos.policy.v1.TestTable.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool skip = 3;
 * @return {boolean}
 */
proto.cerbos.policy.v1.TestTable.prototype.getSkip = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.cerbos.policy.v1.TestTable} returns this
 */
proto.cerbos.policy.v1.TestTable.prototype.setSkip = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional string skip_reason = 4;
 * @return {string}
 */
proto.cerbos.policy.v1.TestTable.prototype.getSkipReason = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.cerbos.policy.v1.TestTable} returns this
 */
proto.cerbos.policy.v1.TestTable.prototype.setSkipReason = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional Input input = 5;
 * @return {?proto.cerbos.policy.v1.TestTable.Input}
 */
proto.cerbos.policy.v1.TestTable.prototype.getInput = function() {
  return /** @type{?proto.cerbos.policy.v1.TestTable.Input} */ (
    jspb.Message.getWrapperField(this, proto.cerbos.policy.v1.TestTable.Input, 5));
};


/**
 * @param {?proto.cerbos.policy.v1.TestTable.Input|undefined} value
 * @return {!proto.cerbos.policy.v1.TestTable} returns this
*/
proto.cerbos.policy.v1.TestTable.prototype.setInput = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cerbos.policy.v1.TestTable} returns this
 */
proto.cerbos.policy.v1.TestTable.prototype.clearInput = function() {
  return this.setInput(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cerbos.policy.v1.TestTable.prototype.hasInput = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * repeated Expectation expected = 6;
 * @return {!Array<!proto.cerbos.policy.v1.TestTable.Expectation>}
 */
proto.cerbos.policy.v1.TestTable.prototype.getExpectedList = function() {
  return /** @type{!Array<!proto.cerbos.policy.v1.TestTable.Expectation>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.cerbos.policy.v1.TestTable.Expectation, 6));
};


/**
 * @param {!Array<!proto.cerbos.policy.v1.TestTable.Expectation>} value
 * @return {!proto.cerbos.policy.v1.TestTable} returns this
*/
proto.cerbos.policy.v1.TestTable.prototype.setExpectedList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.cerbos.policy.v1.TestTable.Expectation=} opt_value
 * @param {number=} opt_index
 * @return {!proto.cerbos.policy.v1.TestTable.Expectation}
 */
proto.cerbos.policy.v1.TestTable.prototype.addExpected = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.cerbos.policy.v1.TestTable.Expectation, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cerbos.policy.v1.TestTable} returns this
 */
proto.cerbos.policy.v1.TestTable.prototype.clearExpectedList = function() {
  return this.setExpectedList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cerbos.policy.v1.Test.prototype.toObject = function(opt_includeInstance) {
  return proto.cerbos.policy.v1.Test.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cerbos.policy.v1.Test} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cerbos.policy.v1.Test.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: (f = msg.getName()) && proto.cerbos.policy.v1.Test.TestName.toObject(includeInstance, f),
    description: jspb.Message.getFieldWithDefault(msg, 2, ""),
    skip: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    skipReason: jspb.Message.getFieldWithDefault(msg, 4, ""),
    input: (f = msg.getInput()) && cerbos_engine_v1_engine_pb.CheckInput.toObject(includeInstance, f),
    expectedMap: (f = msg.getExpectedMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cerbos.policy.v1.Test}
 */
proto.cerbos.policy.v1.Test.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cerbos.policy.v1.Test;
  return proto.cerbos.policy.v1.Test.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cerbos.policy.v1.Test} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cerbos.policy.v1.Test}
 */
proto.cerbos.policy.v1.Test.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.cerbos.policy.v1.Test.TestName;
      reader.readMessage(value,proto.cerbos.policy.v1.Test.TestName.deserializeBinaryFromReader);
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSkip(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSkipReason(value);
      break;
    case 5:
      var value = new cerbos_engine_v1_engine_pb.CheckInput;
      reader.readMessage(value,cerbos_engine_v1_engine_pb.CheckInput.deserializeBinaryFromReader);
      msg.setInput(value);
      break;
    case 6:
      var value = msg.getExpectedMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readEnum, null, "", 0);
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cerbos.policy.v1.Test.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cerbos.policy.v1.Test.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cerbos.policy.v1.Test} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cerbos.policy.v1.Test.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.cerbos.policy.v1.Test.TestName.serializeBinaryToWriter
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSkip();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getSkipReason();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getInput();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      cerbos_engine_v1_engine_pb.CheckInput.serializeBinaryToWriter
    );
  }
  f = message.getExpectedMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(6, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeEnum);
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cerbos.policy.v1.Test.TestName.prototype.toObject = function(opt_includeInstance) {
  return proto.cerbos.policy.v1.Test.TestName.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cerbos.policy.v1.Test.TestName} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cerbos.policy.v1.Test.TestName.toObject = function(includeInstance, msg) {
  var f, obj = {
    testTableName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    principalKey: jspb.Message.getFieldWithDefault(msg, 2, ""),
    resourceKey: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cerbos.policy.v1.Test.TestName}
 */
proto.cerbos.policy.v1.Test.TestName.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cerbos.policy.v1.Test.TestName;
  return proto.cerbos.policy.v1.Test.TestName.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cerbos.policy.v1.Test.TestName} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cerbos.policy.v1.Test.TestName}
 */
proto.cerbos.policy.v1.Test.TestName.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTestTableName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrincipalKey(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setResourceKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cerbos.policy.v1.Test.TestName.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cerbos.policy.v1.Test.TestName.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cerbos.policy.v1.Test.TestName} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cerbos.policy.v1.Test.TestName.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTestTableName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPrincipalKey();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getResourceKey();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string test_table_name = 1;
 * @return {string}
 */
proto.cerbos.policy.v1.Test.TestName.prototype.getTestTableName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.cerbos.policy.v1.Test.TestName} returns this
 */
proto.cerbos.policy.v1.Test.TestName.prototype.setTestTableName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string principal_key = 2;
 * @return {string}
 */
proto.cerbos.policy.v1.Test.TestName.prototype.getPrincipalKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.cerbos.policy.v1.Test.TestName} returns this
 */
proto.cerbos.policy.v1.Test.TestName.prototype.setPrincipalKey = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string resource_key = 3;
 * @return {string}
 */
proto.cerbos.policy.v1.Test.TestName.prototype.getResourceKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.cerbos.policy.v1.Test.TestName} returns this
 */
proto.cerbos.policy.v1.Test.TestName.prototype.setResourceKey = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional TestName name = 1;
 * @return {?proto.cerbos.policy.v1.Test.TestName}
 */
proto.cerbos.policy.v1.Test.prototype.getName = function() {
  return /** @type{?proto.cerbos.policy.v1.Test.TestName} */ (
    jspb.Message.getWrapperField(this, proto.cerbos.policy.v1.Test.TestName, 1));
};


/**
 * @param {?proto.cerbos.policy.v1.Test.TestName|undefined} value
 * @return {!proto.cerbos.policy.v1.Test} returns this
*/
proto.cerbos.policy.v1.Test.prototype.setName = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cerbos.policy.v1.Test} returns this
 */
proto.cerbos.policy.v1.Test.prototype.clearName = function() {
  return this.setName(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cerbos.policy.v1.Test.prototype.hasName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.cerbos.policy.v1.Test.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.cerbos.policy.v1.Test} returns this
 */
proto.cerbos.policy.v1.Test.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool skip = 3;
 * @return {boolean}
 */
proto.cerbos.policy.v1.Test.prototype.getSkip = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.cerbos.policy.v1.Test} returns this
 */
proto.cerbos.policy.v1.Test.prototype.setSkip = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional string skip_reason = 4;
 * @return {string}
 */
proto.cerbos.policy.v1.Test.prototype.getSkipReason = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.cerbos.policy.v1.Test} returns this
 */
proto.cerbos.policy.v1.Test.prototype.setSkipReason = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional cerbos.engine.v1.CheckInput input = 5;
 * @return {?proto.cerbos.engine.v1.CheckInput}
 */
proto.cerbos.policy.v1.Test.prototype.getInput = function() {
  return /** @type{?proto.cerbos.engine.v1.CheckInput} */ (
    jspb.Message.getWrapperField(this, cerbos_engine_v1_engine_pb.CheckInput, 5));
};


/**
 * @param {?proto.cerbos.engine.v1.CheckInput|undefined} value
 * @return {!proto.cerbos.policy.v1.Test} returns this
*/
proto.cerbos.policy.v1.Test.prototype.setInput = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cerbos.policy.v1.Test} returns this
 */
proto.cerbos.policy.v1.Test.prototype.clearInput = function() {
  return this.setInput(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cerbos.policy.v1.Test.prototype.hasInput = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * map<string, cerbos.effect.v1.Effect> expected = 6;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.cerbos.effect.v1.Effect>}
 */
proto.cerbos.policy.v1.Test.prototype.getExpectedMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.cerbos.effect.v1.Effect>} */ (
      jspb.Message.getMapField(this, 6, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.cerbos.policy.v1.Test} returns this
 */
proto.cerbos.policy.v1.Test.prototype.clearExpectedMap = function() {
  this.getExpectedMap().clear();
  return this;};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.cerbos.policy.v1.TestResults.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cerbos.policy.v1.TestResults.prototype.toObject = function(opt_includeInstance) {
  return proto.cerbos.policy.v1.TestResults.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cerbos.policy.v1.TestResults} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cerbos.policy.v1.TestResults.toObject = function(includeInstance, msg) {
  var f, obj = {
    suitesList: jspb.Message.toObjectList(msg.getSuitesList(),
    proto.cerbos.policy.v1.TestResults.Suite.toObject, includeInstance),
    summary: (f = msg.getSummary()) && proto.cerbos.policy.v1.TestResults.Summary.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cerbos.policy.v1.TestResults}
 */
proto.cerbos.policy.v1.TestResults.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cerbos.policy.v1.TestResults;
  return proto.cerbos.policy.v1.TestResults.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cerbos.policy.v1.TestResults} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cerbos.policy.v1.TestResults}
 */
proto.cerbos.policy.v1.TestResults.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.cerbos.policy.v1.TestResults.Suite;
      reader.readMessage(value,proto.cerbos.policy.v1.TestResults.Suite.deserializeBinaryFromReader);
      msg.addSuites(value);
      break;
    case 2:
      var value = new proto.cerbos.policy.v1.TestResults.Summary;
      reader.readMessage(value,proto.cerbos.policy.v1.TestResults.Summary.deserializeBinaryFromReader);
      msg.setSummary(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cerbos.policy.v1.TestResults.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cerbos.policy.v1.TestResults.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cerbos.policy.v1.TestResults} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cerbos.policy.v1.TestResults.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuitesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.cerbos.policy.v1.TestResults.Suite.serializeBinaryToWriter
    );
  }
  f = message.getSummary();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.cerbos.policy.v1.TestResults.Summary.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.cerbos.policy.v1.TestResults.Result = {
  RESULT_UNSPECIFIED: 0,
  RESULT_SKIPPED: 1,
  RESULT_PASSED: 2,
  RESULT_FAILED: 3,
  RESULT_ERRORED: 4
};




if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cerbos.policy.v1.TestResults.Tally.prototype.toObject = function(opt_includeInstance) {
  return proto.cerbos.policy.v1.TestResults.Tally.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cerbos.policy.v1.TestResults.Tally} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cerbos.policy.v1.TestResults.Tally.toObject = function(includeInstance, msg) {
  var f, obj = {
    result: jspb.Message.getFieldWithDefault(msg, 1, 0),
    count: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cerbos.policy.v1.TestResults.Tally}
 */
proto.cerbos.policy.v1.TestResults.Tally.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cerbos.policy.v1.TestResults.Tally;
  return proto.cerbos.policy.v1.TestResults.Tally.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cerbos.policy.v1.TestResults.Tally} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cerbos.policy.v1.TestResults.Tally}
 */
proto.cerbos.policy.v1.TestResults.Tally.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.cerbos.policy.v1.TestResults.Result} */ (reader.readEnum());
      msg.setResult(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cerbos.policy.v1.TestResults.Tally.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cerbos.policy.v1.TestResults.Tally.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cerbos.policy.v1.TestResults.Tally} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cerbos.policy.v1.TestResults.Tally.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResult();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getCount();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional Result result = 1;
 * @return {!proto.cerbos.policy.v1.TestResults.Result}
 */
proto.cerbos.policy.v1.TestResults.Tally.prototype.getResult = function() {
  return /** @type {!proto.cerbos.policy.v1.TestResults.Result} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.cerbos.policy.v1.TestResults.Result} value
 * @return {!proto.cerbos.policy.v1.TestResults.Tally} returns this
 */
proto.cerbos.policy.v1.TestResults.Tally.prototype.setResult = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional uint32 count = 2;
 * @return {number}
 */
proto.cerbos.policy.v1.TestResults.Tally.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.cerbos.policy.v1.TestResults.Tally} returns this
 */
proto.cerbos.policy.v1.TestResults.Tally.prototype.setCount = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.cerbos.policy.v1.TestResults.Summary.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cerbos.policy.v1.TestResults.Summary.prototype.toObject = function(opt_includeInstance) {
  return proto.cerbos.policy.v1.TestResults.Summary.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cerbos.policy.v1.TestResults.Summary} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cerbos.policy.v1.TestResults.Summary.toObject = function(includeInstance, msg) {
  var f, obj = {
    overallResult: jspb.Message.getFieldWithDefault(msg, 1, 0),
    testsCount: jspb.Message.getFieldWithDefault(msg, 2, 0),
    resultCountsList: jspb.Message.toObjectList(msg.getResultCountsList(),
    proto.cerbos.policy.v1.TestResults.Tally.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cerbos.policy.v1.TestResults.Summary}
 */
proto.cerbos.policy.v1.TestResults.Summary.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cerbos.policy.v1.TestResults.Summary;
  return proto.cerbos.policy.v1.TestResults.Summary.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cerbos.policy.v1.TestResults.Summary} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cerbos.policy.v1.TestResults.Summary}
 */
proto.cerbos.policy.v1.TestResults.Summary.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.cerbos.policy.v1.TestResults.Result} */ (reader.readEnum());
      msg.setOverallResult(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTestsCount(value);
      break;
    case 3:
      var value = new proto.cerbos.policy.v1.TestResults.Tally;
      reader.readMessage(value,proto.cerbos.policy.v1.TestResults.Tally.deserializeBinaryFromReader);
      msg.addResultCounts(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cerbos.policy.v1.TestResults.Summary.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cerbos.policy.v1.TestResults.Summary.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cerbos.policy.v1.TestResults.Summary} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cerbos.policy.v1.TestResults.Summary.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOverallResult();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getTestsCount();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getResultCountsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.cerbos.policy.v1.TestResults.Tally.serializeBinaryToWriter
    );
  }
};


/**
 * optional Result overall_result = 1;
 * @return {!proto.cerbos.policy.v1.TestResults.Result}
 */
proto.cerbos.policy.v1.TestResults.Summary.prototype.getOverallResult = function() {
  return /** @type {!proto.cerbos.policy.v1.TestResults.Result} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.cerbos.policy.v1.TestResults.Result} value
 * @return {!proto.cerbos.policy.v1.TestResults.Summary} returns this
 */
proto.cerbos.policy.v1.TestResults.Summary.prototype.setOverallResult = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional uint32 tests_count = 2;
 * @return {number}
 */
proto.cerbos.policy.v1.TestResults.Summary.prototype.getTestsCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.cerbos.policy.v1.TestResults.Summary} returns this
 */
proto.cerbos.policy.v1.TestResults.Summary.prototype.setTestsCount = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated Tally result_counts = 3;
 * @return {!Array<!proto.cerbos.policy.v1.TestResults.Tally>}
 */
proto.cerbos.policy.v1.TestResults.Summary.prototype.getResultCountsList = function() {
  return /** @type{!Array<!proto.cerbos.policy.v1.TestResults.Tally>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.cerbos.policy.v1.TestResults.Tally, 3));
};


/**
 * @param {!Array<!proto.cerbos.policy.v1.TestResults.Tally>} value
 * @return {!proto.cerbos.policy.v1.TestResults.Summary} returns this
*/
proto.cerbos.policy.v1.TestResults.Summary.prototype.setResultCountsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.cerbos.policy.v1.TestResults.Tally=} opt_value
 * @param {number=} opt_index
 * @return {!proto.cerbos.policy.v1.TestResults.Tally}
 */
proto.cerbos.policy.v1.TestResults.Summary.prototype.addResultCounts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.cerbos.policy.v1.TestResults.Tally, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cerbos.policy.v1.TestResults.Summary} returns this
 */
proto.cerbos.policy.v1.TestResults.Summary.prototype.clearResultCountsList = function() {
  return this.setResultCountsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.cerbos.policy.v1.TestResults.Suite.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cerbos.policy.v1.TestResults.Suite.prototype.toObject = function(opt_includeInstance) {
  return proto.cerbos.policy.v1.TestResults.Suite.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cerbos.policy.v1.TestResults.Suite} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cerbos.policy.v1.TestResults.Suite.toObject = function(includeInstance, msg) {
  var f, obj = {
    file: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    principalsList: jspb.Message.toObjectList(msg.getPrincipalsList(),
    proto.cerbos.policy.v1.TestResults.Principal.toObject, includeInstance),
    summary: (f = msg.getSummary()) && proto.cerbos.policy.v1.TestResults.Summary.toObject(includeInstance, f),
    error: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cerbos.policy.v1.TestResults.Suite}
 */
proto.cerbos.policy.v1.TestResults.Suite.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cerbos.policy.v1.TestResults.Suite;
  return proto.cerbos.policy.v1.TestResults.Suite.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cerbos.policy.v1.TestResults.Suite} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cerbos.policy.v1.TestResults.Suite}
 */
proto.cerbos.policy.v1.TestResults.Suite.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFile(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = new proto.cerbos.policy.v1.TestResults.Principal;
      reader.readMessage(value,proto.cerbos.policy.v1.TestResults.Principal.deserializeBinaryFromReader);
      msg.addPrincipals(value);
      break;
    case 4:
      var value = new proto.cerbos.policy.v1.TestResults.Summary;
      reader.readMessage(value,proto.cerbos.policy.v1.TestResults.Summary.deserializeBinaryFromReader);
      msg.setSummary(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cerbos.policy.v1.TestResults.Suite.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cerbos.policy.v1.TestResults.Suite.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cerbos.policy.v1.TestResults.Suite} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cerbos.policy.v1.TestResults.Suite.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFile();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPrincipalsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.cerbos.policy.v1.TestResults.Principal.serializeBinaryToWriter
    );
  }
  f = message.getSummary();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.cerbos.policy.v1.TestResults.Summary.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string file = 1;
 * @return {string}
 */
proto.cerbos.policy.v1.TestResults.Suite.prototype.getFile = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.cerbos.policy.v1.TestResults.Suite} returns this
 */
proto.cerbos.policy.v1.TestResults.Suite.prototype.setFile = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.cerbos.policy.v1.TestResults.Suite.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.cerbos.policy.v1.TestResults.Suite} returns this
 */
proto.cerbos.policy.v1.TestResults.Suite.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated Principal principals = 3;
 * @return {!Array<!proto.cerbos.policy.v1.TestResults.Principal>}
 */
proto.cerbos.policy.v1.TestResults.Suite.prototype.getPrincipalsList = function() {
  return /** @type{!Array<!proto.cerbos.policy.v1.TestResults.Principal>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.cerbos.policy.v1.TestResults.Principal, 3));
};


/**
 * @param {!Array<!proto.cerbos.policy.v1.TestResults.Principal>} value
 * @return {!proto.cerbos.policy.v1.TestResults.Suite} returns this
*/
proto.cerbos.policy.v1.TestResults.Suite.prototype.setPrincipalsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.cerbos.policy.v1.TestResults.Principal=} opt_value
 * @param {number=} opt_index
 * @return {!proto.cerbos.policy.v1.TestResults.Principal}
 */
proto.cerbos.policy.v1.TestResults.Suite.prototype.addPrincipals = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.cerbos.policy.v1.TestResults.Principal, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cerbos.policy.v1.TestResults.Suite} returns this
 */
proto.cerbos.policy.v1.TestResults.Suite.prototype.clearPrincipalsList = function() {
  return this.setPrincipalsList([]);
};


/**
 * optional Summary summary = 4;
 * @return {?proto.cerbos.policy.v1.TestResults.Summary}
 */
proto.cerbos.policy.v1.TestResults.Suite.prototype.getSummary = function() {
  return /** @type{?proto.cerbos.policy.v1.TestResults.Summary} */ (
    jspb.Message.getWrapperField(this, proto.cerbos.policy.v1.TestResults.Summary, 4));
};


/**
 * @param {?proto.cerbos.policy.v1.TestResults.Summary|undefined} value
 * @return {!proto.cerbos.policy.v1.TestResults.Suite} returns this
*/
proto.cerbos.policy.v1.TestResults.Suite.prototype.setSummary = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cerbos.policy.v1.TestResults.Suite} returns this
 */
proto.cerbos.policy.v1.TestResults.Suite.prototype.clearSummary = function() {
  return this.setSummary(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cerbos.policy.v1.TestResults.Suite.prototype.hasSummary = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string error = 5;
 * @return {string}
 */
proto.cerbos.policy.v1.TestResults.Suite.prototype.getError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.cerbos.policy.v1.TestResults.Suite} returns this
 */
proto.cerbos.policy.v1.TestResults.Suite.prototype.setError = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.cerbos.policy.v1.TestResults.Principal.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cerbos.policy.v1.TestResults.Principal.prototype.toObject = function(opt_includeInstance) {
  return proto.cerbos.policy.v1.TestResults.Principal.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cerbos.policy.v1.TestResults.Principal} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cerbos.policy.v1.TestResults.Principal.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    resourcesList: jspb.Message.toObjectList(msg.getResourcesList(),
    proto.cerbos.policy.v1.TestResults.Resource.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cerbos.policy.v1.TestResults.Principal}
 */
proto.cerbos.policy.v1.TestResults.Principal.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cerbos.policy.v1.TestResults.Principal;
  return proto.cerbos.policy.v1.TestResults.Principal.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cerbos.policy.v1.TestResults.Principal} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cerbos.policy.v1.TestResults.Principal}
 */
proto.cerbos.policy.v1.TestResults.Principal.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new proto.cerbos.policy.v1.TestResults.Resource;
      reader.readMessage(value,proto.cerbos.policy.v1.TestResults.Resource.deserializeBinaryFromReader);
      msg.addResources(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cerbos.policy.v1.TestResults.Principal.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cerbos.policy.v1.TestResults.Principal.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cerbos.policy.v1.TestResults.Principal} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cerbos.policy.v1.TestResults.Principal.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getResourcesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.cerbos.policy.v1.TestResults.Resource.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.cerbos.policy.v1.TestResults.Principal.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.cerbos.policy.v1.TestResults.Principal} returns this
 */
proto.cerbos.policy.v1.TestResults.Principal.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated Resource resources = 2;
 * @return {!Array<!proto.cerbos.policy.v1.TestResults.Resource>}
 */
proto.cerbos.policy.v1.TestResults.Principal.prototype.getResourcesList = function() {
  return /** @type{!Array<!proto.cerbos.policy.v1.TestResults.Resource>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.cerbos.policy.v1.TestResults.Resource, 2));
};


/**
 * @param {!Array<!proto.cerbos.policy.v1.TestResults.Resource>} value
 * @return {!proto.cerbos.policy.v1.TestResults.Principal} returns this
*/
proto.cerbos.policy.v1.TestResults.Principal.prototype.setResourcesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.cerbos.policy.v1.TestResults.Resource=} opt_value
 * @param {number=} opt_index
 * @return {!proto.cerbos.policy.v1.TestResults.Resource}
 */
proto.cerbos.policy.v1.TestResults.Principal.prototype.addResources = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.cerbos.policy.v1.TestResults.Resource, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cerbos.policy.v1.TestResults.Principal} returns this
 */
proto.cerbos.policy.v1.TestResults.Principal.prototype.clearResourcesList = function() {
  return this.setResourcesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.cerbos.policy.v1.TestResults.Resource.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cerbos.policy.v1.TestResults.Resource.prototype.toObject = function(opt_includeInstance) {
  return proto.cerbos.policy.v1.TestResults.Resource.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cerbos.policy.v1.TestResults.Resource} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cerbos.policy.v1.TestResults.Resource.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    actionsList: jspb.Message.toObjectList(msg.getActionsList(),
    proto.cerbos.policy.v1.TestResults.Action.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cerbos.policy.v1.TestResults.Resource}
 */
proto.cerbos.policy.v1.TestResults.Resource.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cerbos.policy.v1.TestResults.Resource;
  return proto.cerbos.policy.v1.TestResults.Resource.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cerbos.policy.v1.TestResults.Resource} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cerbos.policy.v1.TestResults.Resource}
 */
proto.cerbos.policy.v1.TestResults.Resource.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new proto.cerbos.policy.v1.TestResults.Action;
      reader.readMessage(value,proto.cerbos.policy.v1.TestResults.Action.deserializeBinaryFromReader);
      msg.addActions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cerbos.policy.v1.TestResults.Resource.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cerbos.policy.v1.TestResults.Resource.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cerbos.policy.v1.TestResults.Resource} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cerbos.policy.v1.TestResults.Resource.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getActionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.cerbos.policy.v1.TestResults.Action.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.cerbos.policy.v1.TestResults.Resource.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.cerbos.policy.v1.TestResults.Resource} returns this
 */
proto.cerbos.policy.v1.TestResults.Resource.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated Action actions = 2;
 * @return {!Array<!proto.cerbos.policy.v1.TestResults.Action>}
 */
proto.cerbos.policy.v1.TestResults.Resource.prototype.getActionsList = function() {
  return /** @type{!Array<!proto.cerbos.policy.v1.TestResults.Action>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.cerbos.policy.v1.TestResults.Action, 2));
};


/**
 * @param {!Array<!proto.cerbos.policy.v1.TestResults.Action>} value
 * @return {!proto.cerbos.policy.v1.TestResults.Resource} returns this
*/
proto.cerbos.policy.v1.TestResults.Resource.prototype.setActionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.cerbos.policy.v1.TestResults.Action=} opt_value
 * @param {number=} opt_index
 * @return {!proto.cerbos.policy.v1.TestResults.Action}
 */
proto.cerbos.policy.v1.TestResults.Resource.prototype.addActions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.cerbos.policy.v1.TestResults.Action, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cerbos.policy.v1.TestResults.Resource} returns this
 */
proto.cerbos.policy.v1.TestResults.Resource.prototype.clearActionsList = function() {
  return this.setActionsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cerbos.policy.v1.TestResults.Action.prototype.toObject = function(opt_includeInstance) {
  return proto.cerbos.policy.v1.TestResults.Action.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cerbos.policy.v1.TestResults.Action} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cerbos.policy.v1.TestResults.Action.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    details: (f = msg.getDetails()) && proto.cerbos.policy.v1.TestResults.Details.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cerbos.policy.v1.TestResults.Action}
 */
proto.cerbos.policy.v1.TestResults.Action.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cerbos.policy.v1.TestResults.Action;
  return proto.cerbos.policy.v1.TestResults.Action.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cerbos.policy.v1.TestResults.Action} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cerbos.policy.v1.TestResults.Action}
 */
proto.cerbos.policy.v1.TestResults.Action.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new proto.cerbos.policy.v1.TestResults.Details;
      reader.readMessage(value,proto.cerbos.policy.v1.TestResults.Details.deserializeBinaryFromReader);
      msg.setDetails(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cerbos.policy.v1.TestResults.Action.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cerbos.policy.v1.TestResults.Action.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cerbos.policy.v1.TestResults.Action} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cerbos.policy.v1.TestResults.Action.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDetails();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.cerbos.policy.v1.TestResults.Details.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.cerbos.policy.v1.TestResults.Action.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.cerbos.policy.v1.TestResults.Action} returns this
 */
proto.cerbos.policy.v1.TestResults.Action.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Details details = 2;
 * @return {?proto.cerbos.policy.v1.TestResults.Details}
 */
proto.cerbos.policy.v1.TestResults.Action.prototype.getDetails = function() {
  return /** @type{?proto.cerbos.policy.v1.TestResults.Details} */ (
    jspb.Message.getWrapperField(this, proto.cerbos.policy.v1.TestResults.Details, 2));
};


/**
 * @param {?proto.cerbos.policy.v1.TestResults.Details|undefined} value
 * @return {!proto.cerbos.policy.v1.TestResults.Action} returns this
*/
proto.cerbos.policy.v1.TestResults.Action.prototype.setDetails = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cerbos.policy.v1.TestResults.Action} returns this
 */
proto.cerbos.policy.v1.TestResults.Action.prototype.clearDetails = function() {
  return this.setDetails(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cerbos.policy.v1.TestResults.Action.prototype.hasDetails = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.cerbos.policy.v1.TestResults.Details.repeatedFields_ = [4];

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.cerbos.policy.v1.TestResults.Details.oneofGroups_ = [[2,3]];

/**
 * @enum {number}
 */
proto.cerbos.policy.v1.TestResults.Details.OutcomeCase = {
  OUTCOME_NOT_SET: 0,
  FAILURE: 2,
  ERROR: 3
};

/**
 * @return {proto.cerbos.policy.v1.TestResults.Details.OutcomeCase}
 */
proto.cerbos.policy.v1.TestResults.Details.prototype.getOutcomeCase = function() {
  return /** @type {proto.cerbos.policy.v1.TestResults.Details.OutcomeCase} */(jspb.Message.computeOneofCase(this, proto.cerbos.policy.v1.TestResults.Details.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cerbos.policy.v1.TestResults.Details.prototype.toObject = function(opt_includeInstance) {
  return proto.cerbos.policy.v1.TestResults.Details.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cerbos.policy.v1.TestResults.Details} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cerbos.policy.v1.TestResults.Details.toObject = function(includeInstance, msg) {
  var f, obj = {
    result: jspb.Message.getFieldWithDefault(msg, 1, 0),
    failure: (f = msg.getFailure()) && proto.cerbos.policy.v1.TestResults.Failure.toObject(includeInstance, f),
    error: jspb.Message.getFieldWithDefault(msg, 3, ""),
    engineTraceList: jspb.Message.toObjectList(msg.getEngineTraceList(),
    cerbos_engine_v1_engine_pb.Trace.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cerbos.policy.v1.TestResults.Details}
 */
proto.cerbos.policy.v1.TestResults.Details.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cerbos.policy.v1.TestResults.Details;
  return proto.cerbos.policy.v1.TestResults.Details.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cerbos.policy.v1.TestResults.Details} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cerbos.policy.v1.TestResults.Details}
 */
proto.cerbos.policy.v1.TestResults.Details.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.cerbos.policy.v1.TestResults.Result} */ (reader.readEnum());
      msg.setResult(value);
      break;
    case 2:
      var value = new proto.cerbos.policy.v1.TestResults.Failure;
      reader.readMessage(value,proto.cerbos.policy.v1.TestResults.Failure.deserializeBinaryFromReader);
      msg.setFailure(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setError(value);
      break;
    case 4:
      var value = new cerbos_engine_v1_engine_pb.Trace;
      reader.readMessage(value,cerbos_engine_v1_engine_pb.Trace.deserializeBinaryFromReader);
      msg.addEngineTrace(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cerbos.policy.v1.TestResults.Details.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cerbos.policy.v1.TestResults.Details.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cerbos.policy.v1.TestResults.Details} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cerbos.policy.v1.TestResults.Details.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResult();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getFailure();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.cerbos.policy.v1.TestResults.Failure.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getEngineTraceList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      cerbos_engine_v1_engine_pb.Trace.serializeBinaryToWriter
    );
  }
};


/**
 * optional Result result = 1;
 * @return {!proto.cerbos.policy.v1.TestResults.Result}
 */
proto.cerbos.policy.v1.TestResults.Details.prototype.getResult = function() {
  return /** @type {!proto.cerbos.policy.v1.TestResults.Result} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.cerbos.policy.v1.TestResults.Result} value
 * @return {!proto.cerbos.policy.v1.TestResults.Details} returns this
 */
proto.cerbos.policy.v1.TestResults.Details.prototype.setResult = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional Failure failure = 2;
 * @return {?proto.cerbos.policy.v1.TestResults.Failure}
 */
proto.cerbos.policy.v1.TestResults.Details.prototype.getFailure = function() {
  return /** @type{?proto.cerbos.policy.v1.TestResults.Failure} */ (
    jspb.Message.getWrapperField(this, proto.cerbos.policy.v1.TestResults.Failure, 2));
};


/**
 * @param {?proto.cerbos.policy.v1.TestResults.Failure|undefined} value
 * @return {!proto.cerbos.policy.v1.TestResults.Details} returns this
*/
proto.cerbos.policy.v1.TestResults.Details.prototype.setFailure = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.cerbos.policy.v1.TestResults.Details.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cerbos.policy.v1.TestResults.Details} returns this
 */
proto.cerbos.policy.v1.TestResults.Details.prototype.clearFailure = function() {
  return this.setFailure(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cerbos.policy.v1.TestResults.Details.prototype.hasFailure = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string error = 3;
 * @return {string}
 */
proto.cerbos.policy.v1.TestResults.Details.prototype.getError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.cerbos.policy.v1.TestResults.Details} returns this
 */
proto.cerbos.policy.v1.TestResults.Details.prototype.setError = function(value) {
  return jspb.Message.setOneofField(this, 3, proto.cerbos.policy.v1.TestResults.Details.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.cerbos.policy.v1.TestResults.Details} returns this
 */
proto.cerbos.policy.v1.TestResults.Details.prototype.clearError = function() {
  return jspb.Message.setOneofField(this, 3, proto.cerbos.policy.v1.TestResults.Details.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cerbos.policy.v1.TestResults.Details.prototype.hasError = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated cerbos.engine.v1.Trace engine_trace = 4;
 * @return {!Array<!proto.cerbos.engine.v1.Trace>}
 */
proto.cerbos.policy.v1.TestResults.Details.prototype.getEngineTraceList = function() {
  return /** @type{!Array<!proto.cerbos.engine.v1.Trace>} */ (
    jspb.Message.getRepeatedWrapperField(this, cerbos_engine_v1_engine_pb.Trace, 4));
};


/**
 * @param {!Array<!proto.cerbos.engine.v1.Trace>} value
 * @return {!proto.cerbos.policy.v1.TestResults.Details} returns this
*/
proto.cerbos.policy.v1.TestResults.Details.prototype.setEngineTraceList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.cerbos.engine.v1.Trace=} opt_value
 * @param {number=} opt_index
 * @return {!proto.cerbos.engine.v1.Trace}
 */
proto.cerbos.policy.v1.TestResults.Details.prototype.addEngineTrace = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.cerbos.engine.v1.Trace, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cerbos.policy.v1.TestResults.Details} returns this
 */
proto.cerbos.policy.v1.TestResults.Details.prototype.clearEngineTraceList = function() {
  return this.setEngineTraceList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cerbos.policy.v1.TestResults.Failure.prototype.toObject = function(opt_includeInstance) {
  return proto.cerbos.policy.v1.TestResults.Failure.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cerbos.policy.v1.TestResults.Failure} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cerbos.policy.v1.TestResults.Failure.toObject = function(includeInstance, msg) {
  var f, obj = {
    expected: jspb.Message.getFieldWithDefault(msg, 1, 0),
    actual: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cerbos.policy.v1.TestResults.Failure}
 */
proto.cerbos.policy.v1.TestResults.Failure.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cerbos.policy.v1.TestResults.Failure;
  return proto.cerbos.policy.v1.TestResults.Failure.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cerbos.policy.v1.TestResults.Failure} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cerbos.policy.v1.TestResults.Failure}
 */
proto.cerbos.policy.v1.TestResults.Failure.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.cerbos.effect.v1.Effect} */ (reader.readEnum());
      msg.setExpected(value);
      break;
    case 2:
      var value = /** @type {!proto.cerbos.effect.v1.Effect} */ (reader.readEnum());
      msg.setActual(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cerbos.policy.v1.TestResults.Failure.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cerbos.policy.v1.TestResults.Failure.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cerbos.policy.v1.TestResults.Failure} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cerbos.policy.v1.TestResults.Failure.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getExpected();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getActual();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional cerbos.effect.v1.Effect expected = 1;
 * @return {!proto.cerbos.effect.v1.Effect}
 */
proto.cerbos.policy.v1.TestResults.Failure.prototype.getExpected = function() {
  return /** @type {!proto.cerbos.effect.v1.Effect} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.cerbos.effect.v1.Effect} value
 * @return {!proto.cerbos.policy.v1.TestResults.Failure} returns this
 */
proto.cerbos.policy.v1.TestResults.Failure.prototype.setExpected = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional cerbos.effect.v1.Effect actual = 2;
 * @return {!proto.cerbos.effect.v1.Effect}
 */
proto.cerbos.policy.v1.TestResults.Failure.prototype.getActual = function() {
  return /** @type {!proto.cerbos.effect.v1.Effect} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.cerbos.effect.v1.Effect} value
 * @return {!proto.cerbos.policy.v1.TestResults.Failure} returns this
 */
proto.cerbos.policy.v1.TestResults.Failure.prototype.setActual = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * repeated Suite suites = 1;
 * @return {!Array<!proto.cerbos.policy.v1.TestResults.Suite>}
 */
proto.cerbos.policy.v1.TestResults.prototype.getSuitesList = function() {
  return /** @type{!Array<!proto.cerbos.policy.v1.TestResults.Suite>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.cerbos.policy.v1.TestResults.Suite, 1));
};


/**
 * @param {!Array<!proto.cerbos.policy.v1.TestResults.Suite>} value
 * @return {!proto.cerbos.policy.v1.TestResults} returns this
*/
proto.cerbos.policy.v1.TestResults.prototype.setSuitesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.cerbos.policy.v1.TestResults.Suite=} opt_value
 * @param {number=} opt_index
 * @return {!proto.cerbos.policy.v1.TestResults.Suite}
 */
proto.cerbos.policy.v1.TestResults.prototype.addSuites = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.cerbos.policy.v1.TestResults.Suite, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cerbos.policy.v1.TestResults} returns this
 */
proto.cerbos.policy.v1.TestResults.prototype.clearSuitesList = function() {
  return this.setSuitesList([]);
};


/**
 * optional Summary summary = 2;
 * @return {?proto.cerbos.policy.v1.TestResults.Summary}
 */
proto.cerbos.policy.v1.TestResults.prototype.getSummary = function() {
  return /** @type{?proto.cerbos.policy.v1.TestResults.Summary} */ (
    jspb.Message.getWrapperField(this, proto.cerbos.policy.v1.TestResults.Summary, 2));
};


/**
 * @param {?proto.cerbos.policy.v1.TestResults.Summary|undefined} value
 * @return {!proto.cerbos.policy.v1.TestResults} returns this
*/
proto.cerbos.policy.v1.TestResults.prototype.setSummary = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cerbos.policy.v1.TestResults} returns this
 */
proto.cerbos.policy.v1.TestResults.prototype.clearSummary = function() {
  return this.setSummary(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cerbos.policy.v1.TestResults.prototype.hasSummary = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto.cerbos.policy.v1);
