// source: cerbos/telemetry/v1/telemetry.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var google_protobuf_duration_pb = require('google-protobuf/google/protobuf/duration_pb.js');
goog.object.extend(proto, google_protobuf_duration_pb);
goog.exportSymbol('proto.cerbos.telemetry.v1.Event', null, global);
goog.exportSymbol('proto.cerbos.telemetry.v1.Event.ApiActivity', null, global);
goog.exportSymbol('proto.cerbos.telemetry.v1.Event.DataCase', null, global);
goog.exportSymbol('proto.cerbos.telemetry.v1.ServerLaunch', null, global);
goog.exportSymbol('proto.cerbos.telemetry.v1.ServerLaunch.Cerbos', null, global);
goog.exportSymbol('proto.cerbos.telemetry.v1.ServerLaunch.Features', null, global);
goog.exportSymbol('proto.cerbos.telemetry.v1.ServerLaunch.Features.AdminApi', null, global);
goog.exportSymbol('proto.cerbos.telemetry.v1.ServerLaunch.Features.Audit', null, global);
goog.exportSymbol('proto.cerbos.telemetry.v1.ServerLaunch.Features.Schema', null, global);
goog.exportSymbol('proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage', null, global);
goog.exportSymbol('proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.Blob', null, global);
goog.exportSymbol('proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.Disk', null, global);
goog.exportSymbol('proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.Git', null, global);
goog.exportSymbol('proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.StoreCase', null, global);
goog.exportSymbol('proto.cerbos.telemetry.v1.ServerLaunch.Source', null, global);
goog.exportSymbol('proto.cerbos.telemetry.v1.ServerLaunch.Stats', null, global);
goog.exportSymbol('proto.cerbos.telemetry.v1.ServerLaunch.Stats.Policy', null, global);
goog.exportSymbol('proto.cerbos.telemetry.v1.ServerLaunch.Stats.Schema', null, global);
goog.exportSymbol('proto.cerbos.telemetry.v1.ServerStop', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cerbos.telemetry.v1.ServerLaunch = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cerbos.telemetry.v1.ServerLaunch, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cerbos.telemetry.v1.ServerLaunch.displayName = 'proto.cerbos.telemetry.v1.ServerLaunch';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cerbos.telemetry.v1.ServerLaunch.Cerbos = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cerbos.telemetry.v1.ServerLaunch.Cerbos, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cerbos.telemetry.v1.ServerLaunch.Cerbos.displayName = 'proto.cerbos.telemetry.v1.ServerLaunch.Cerbos';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cerbos.telemetry.v1.ServerLaunch.Source = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cerbos.telemetry.v1.ServerLaunch.Source, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cerbos.telemetry.v1.ServerLaunch.Source.displayName = 'proto.cerbos.telemetry.v1.ServerLaunch.Source';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cerbos.telemetry.v1.ServerLaunch.Features = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cerbos.telemetry.v1.ServerLaunch.Features, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cerbos.telemetry.v1.ServerLaunch.Features.displayName = 'proto.cerbos.telemetry.v1.ServerLaunch.Features';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cerbos.telemetry.v1.ServerLaunch.Features.Audit = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cerbos.telemetry.v1.ServerLaunch.Features.Audit, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cerbos.telemetry.v1.ServerLaunch.Features.Audit.displayName = 'proto.cerbos.telemetry.v1.ServerLaunch.Features.Audit';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cerbos.telemetry.v1.ServerLaunch.Features.Schema = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cerbos.telemetry.v1.ServerLaunch.Features.Schema, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cerbos.telemetry.v1.ServerLaunch.Features.Schema.displayName = 'proto.cerbos.telemetry.v1.ServerLaunch.Features.Schema';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cerbos.telemetry.v1.ServerLaunch.Features.AdminApi = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cerbos.telemetry.v1.ServerLaunch.Features.AdminApi, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cerbos.telemetry.v1.ServerLaunch.Features.AdminApi.displayName = 'proto.cerbos.telemetry.v1.ServerLaunch.Features.AdminApi';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.oneofGroups_);
};
goog.inherits(proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.displayName = 'proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.Disk = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.Disk, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.Disk.displayName = 'proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.Disk';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.Git = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.Git, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.Git.displayName = 'proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.Git';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.Blob = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.Blob, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.Blob.displayName = 'proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.Blob';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cerbos.telemetry.v1.ServerLaunch.Stats = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cerbos.telemetry.v1.ServerLaunch.Stats, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cerbos.telemetry.v1.ServerLaunch.Stats.displayName = 'proto.cerbos.telemetry.v1.ServerLaunch.Stats';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cerbos.telemetry.v1.ServerLaunch.Stats.Policy = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cerbos.telemetry.v1.ServerLaunch.Stats.Policy, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cerbos.telemetry.v1.ServerLaunch.Stats.Policy.displayName = 'proto.cerbos.telemetry.v1.ServerLaunch.Stats.Policy';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cerbos.telemetry.v1.ServerLaunch.Stats.Schema = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cerbos.telemetry.v1.ServerLaunch.Stats.Schema, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cerbos.telemetry.v1.ServerLaunch.Stats.Schema.displayName = 'proto.cerbos.telemetry.v1.ServerLaunch.Stats.Schema';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cerbos.telemetry.v1.ServerStop = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cerbos.telemetry.v1.ServerStop, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cerbos.telemetry.v1.ServerStop.displayName = 'proto.cerbos.telemetry.v1.ServerStop';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cerbos.telemetry.v1.Event = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.cerbos.telemetry.v1.Event.oneofGroups_);
};
goog.inherits(proto.cerbos.telemetry.v1.Event, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cerbos.telemetry.v1.Event.displayName = 'proto.cerbos.telemetry.v1.Event';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cerbos.telemetry.v1.Event.ApiActivity = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cerbos.telemetry.v1.Event.ApiActivity, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cerbos.telemetry.v1.Event.ApiActivity.displayName = 'proto.cerbos.telemetry.v1.Event.ApiActivity';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cerbos.telemetry.v1.ServerLaunch.prototype.toObject = function(opt_includeInstance) {
  return proto.cerbos.telemetry.v1.ServerLaunch.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cerbos.telemetry.v1.ServerLaunch} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cerbos.telemetry.v1.ServerLaunch.toObject = function(includeInstance, msg) {
  var f, obj = {
    version: jspb.Message.getFieldWithDefault(msg, 1, ""),
    source: (f = msg.getSource()) && proto.cerbos.telemetry.v1.ServerLaunch.Source.toObject(includeInstance, f),
    features: (f = msg.getFeatures()) && proto.cerbos.telemetry.v1.ServerLaunch.Features.toObject(includeInstance, f),
    stats: (f = msg.getStats()) && proto.cerbos.telemetry.v1.ServerLaunch.Stats.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cerbos.telemetry.v1.ServerLaunch}
 */
proto.cerbos.telemetry.v1.ServerLaunch.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cerbos.telemetry.v1.ServerLaunch;
  return proto.cerbos.telemetry.v1.ServerLaunch.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cerbos.telemetry.v1.ServerLaunch} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cerbos.telemetry.v1.ServerLaunch}
 */
proto.cerbos.telemetry.v1.ServerLaunch.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    case 2:
      var value = new proto.cerbos.telemetry.v1.ServerLaunch.Source;
      reader.readMessage(value,proto.cerbos.telemetry.v1.ServerLaunch.Source.deserializeBinaryFromReader);
      msg.setSource(value);
      break;
    case 3:
      var value = new proto.cerbos.telemetry.v1.ServerLaunch.Features;
      reader.readMessage(value,proto.cerbos.telemetry.v1.ServerLaunch.Features.deserializeBinaryFromReader);
      msg.setFeatures(value);
      break;
    case 4:
      var value = new proto.cerbos.telemetry.v1.ServerLaunch.Stats;
      reader.readMessage(value,proto.cerbos.telemetry.v1.ServerLaunch.Stats.deserializeBinaryFromReader);
      msg.setStats(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cerbos.telemetry.v1.ServerLaunch.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cerbos.telemetry.v1.ServerLaunch.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cerbos.telemetry.v1.ServerLaunch} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cerbos.telemetry.v1.ServerLaunch.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSource();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.cerbos.telemetry.v1.ServerLaunch.Source.serializeBinaryToWriter
    );
  }
  f = message.getFeatures();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.cerbos.telemetry.v1.ServerLaunch.Features.serializeBinaryToWriter
    );
  }
  f = message.getStats();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.cerbos.telemetry.v1.ServerLaunch.Stats.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cerbos.telemetry.v1.ServerLaunch.Cerbos.prototype.toObject = function(opt_includeInstance) {
  return proto.cerbos.telemetry.v1.ServerLaunch.Cerbos.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cerbos.telemetry.v1.ServerLaunch.Cerbos} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cerbos.telemetry.v1.ServerLaunch.Cerbos.toObject = function(includeInstance, msg) {
  var f, obj = {
    version: jspb.Message.getFieldWithDefault(msg, 1, ""),
    commit: jspb.Message.getFieldWithDefault(msg, 2, ""),
    buildDate: jspb.Message.getFieldWithDefault(msg, 3, ""),
    moduleVersion: jspb.Message.getFieldWithDefault(msg, 4, ""),
    moduleChecksum: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cerbos.telemetry.v1.ServerLaunch.Cerbos}
 */
proto.cerbos.telemetry.v1.ServerLaunch.Cerbos.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cerbos.telemetry.v1.ServerLaunch.Cerbos;
  return proto.cerbos.telemetry.v1.ServerLaunch.Cerbos.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cerbos.telemetry.v1.ServerLaunch.Cerbos} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cerbos.telemetry.v1.ServerLaunch.Cerbos}
 */
proto.cerbos.telemetry.v1.ServerLaunch.Cerbos.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCommit(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setBuildDate(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setModuleVersion(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setModuleChecksum(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cerbos.telemetry.v1.ServerLaunch.Cerbos.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cerbos.telemetry.v1.ServerLaunch.Cerbos.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cerbos.telemetry.v1.ServerLaunch.Cerbos} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cerbos.telemetry.v1.ServerLaunch.Cerbos.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCommit();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getBuildDate();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getModuleVersion();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getModuleChecksum();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string version = 1;
 * @return {string}
 */
proto.cerbos.telemetry.v1.ServerLaunch.Cerbos.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.cerbos.telemetry.v1.ServerLaunch.Cerbos} returns this
 */
proto.cerbos.telemetry.v1.ServerLaunch.Cerbos.prototype.setVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string commit = 2;
 * @return {string}
 */
proto.cerbos.telemetry.v1.ServerLaunch.Cerbos.prototype.getCommit = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.cerbos.telemetry.v1.ServerLaunch.Cerbos} returns this
 */
proto.cerbos.telemetry.v1.ServerLaunch.Cerbos.prototype.setCommit = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string build_date = 3;
 * @return {string}
 */
proto.cerbos.telemetry.v1.ServerLaunch.Cerbos.prototype.getBuildDate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.cerbos.telemetry.v1.ServerLaunch.Cerbos} returns this
 */
proto.cerbos.telemetry.v1.ServerLaunch.Cerbos.prototype.setBuildDate = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string module_version = 4;
 * @return {string}
 */
proto.cerbos.telemetry.v1.ServerLaunch.Cerbos.prototype.getModuleVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.cerbos.telemetry.v1.ServerLaunch.Cerbos} returns this
 */
proto.cerbos.telemetry.v1.ServerLaunch.Cerbos.prototype.setModuleVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string module_checksum = 5;
 * @return {string}
 */
proto.cerbos.telemetry.v1.ServerLaunch.Cerbos.prototype.getModuleChecksum = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.cerbos.telemetry.v1.ServerLaunch.Cerbos} returns this
 */
proto.cerbos.telemetry.v1.ServerLaunch.Cerbos.prototype.setModuleChecksum = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cerbos.telemetry.v1.ServerLaunch.Source.prototype.toObject = function(opt_includeInstance) {
  return proto.cerbos.telemetry.v1.ServerLaunch.Source.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cerbos.telemetry.v1.ServerLaunch.Source} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cerbos.telemetry.v1.ServerLaunch.Source.toObject = function(includeInstance, msg) {
  var f, obj = {
    cerbos: (f = msg.getCerbos()) && proto.cerbos.telemetry.v1.ServerLaunch.Cerbos.toObject(includeInstance, f),
    os: jspb.Message.getFieldWithDefault(msg, 2, ""),
    arch: jspb.Message.getFieldWithDefault(msg, 3, ""),
    numCpus: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cerbos.telemetry.v1.ServerLaunch.Source}
 */
proto.cerbos.telemetry.v1.ServerLaunch.Source.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cerbos.telemetry.v1.ServerLaunch.Source;
  return proto.cerbos.telemetry.v1.ServerLaunch.Source.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cerbos.telemetry.v1.ServerLaunch.Source} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cerbos.telemetry.v1.ServerLaunch.Source}
 */
proto.cerbos.telemetry.v1.ServerLaunch.Source.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.cerbos.telemetry.v1.ServerLaunch.Cerbos;
      reader.readMessage(value,proto.cerbos.telemetry.v1.ServerLaunch.Cerbos.deserializeBinaryFromReader);
      msg.setCerbos(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setOs(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setArch(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNumCpus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cerbos.telemetry.v1.ServerLaunch.Source.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cerbos.telemetry.v1.ServerLaunch.Source.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cerbos.telemetry.v1.ServerLaunch.Source} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cerbos.telemetry.v1.ServerLaunch.Source.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCerbos();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.cerbos.telemetry.v1.ServerLaunch.Cerbos.serializeBinaryToWriter
    );
  }
  f = message.getOs();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getArch();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getNumCpus();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * optional Cerbos cerbos = 1;
 * @return {?proto.cerbos.telemetry.v1.ServerLaunch.Cerbos}
 */
proto.cerbos.telemetry.v1.ServerLaunch.Source.prototype.getCerbos = function() {
  return /** @type{?proto.cerbos.telemetry.v1.ServerLaunch.Cerbos} */ (
    jspb.Message.getWrapperField(this, proto.cerbos.telemetry.v1.ServerLaunch.Cerbos, 1));
};


/**
 * @param {?proto.cerbos.telemetry.v1.ServerLaunch.Cerbos|undefined} value
 * @return {!proto.cerbos.telemetry.v1.ServerLaunch.Source} returns this
*/
proto.cerbos.telemetry.v1.ServerLaunch.Source.prototype.setCerbos = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cerbos.telemetry.v1.ServerLaunch.Source} returns this
 */
proto.cerbos.telemetry.v1.ServerLaunch.Source.prototype.clearCerbos = function() {
  return this.setCerbos(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cerbos.telemetry.v1.ServerLaunch.Source.prototype.hasCerbos = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string os = 2;
 * @return {string}
 */
proto.cerbos.telemetry.v1.ServerLaunch.Source.prototype.getOs = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.cerbos.telemetry.v1.ServerLaunch.Source} returns this
 */
proto.cerbos.telemetry.v1.ServerLaunch.Source.prototype.setOs = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string arch = 3;
 * @return {string}
 */
proto.cerbos.telemetry.v1.ServerLaunch.Source.prototype.getArch = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.cerbos.telemetry.v1.ServerLaunch.Source} returns this
 */
proto.cerbos.telemetry.v1.ServerLaunch.Source.prototype.setArch = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional uint32 num_cpus = 4;
 * @return {number}
 */
proto.cerbos.telemetry.v1.ServerLaunch.Source.prototype.getNumCpus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.cerbos.telemetry.v1.ServerLaunch.Source} returns this
 */
proto.cerbos.telemetry.v1.ServerLaunch.Source.prototype.setNumCpus = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cerbos.telemetry.v1.ServerLaunch.Features.prototype.toObject = function(opt_includeInstance) {
  return proto.cerbos.telemetry.v1.ServerLaunch.Features.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cerbos.telemetry.v1.ServerLaunch.Features} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cerbos.telemetry.v1.ServerLaunch.Features.toObject = function(includeInstance, msg) {
  var f, obj = {
    audit: (f = msg.getAudit()) && proto.cerbos.telemetry.v1.ServerLaunch.Features.Audit.toObject(includeInstance, f),
    schema: (f = msg.getSchema()) && proto.cerbos.telemetry.v1.ServerLaunch.Features.Schema.toObject(includeInstance, f),
    adminApi: (f = msg.getAdminApi()) && proto.cerbos.telemetry.v1.ServerLaunch.Features.AdminApi.toObject(includeInstance, f),
    storage: (f = msg.getStorage()) && proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cerbos.telemetry.v1.ServerLaunch.Features}
 */
proto.cerbos.telemetry.v1.ServerLaunch.Features.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cerbos.telemetry.v1.ServerLaunch.Features;
  return proto.cerbos.telemetry.v1.ServerLaunch.Features.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cerbos.telemetry.v1.ServerLaunch.Features} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cerbos.telemetry.v1.ServerLaunch.Features}
 */
proto.cerbos.telemetry.v1.ServerLaunch.Features.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.cerbos.telemetry.v1.ServerLaunch.Features.Audit;
      reader.readMessage(value,proto.cerbos.telemetry.v1.ServerLaunch.Features.Audit.deserializeBinaryFromReader);
      msg.setAudit(value);
      break;
    case 2:
      var value = new proto.cerbos.telemetry.v1.ServerLaunch.Features.Schema;
      reader.readMessage(value,proto.cerbos.telemetry.v1.ServerLaunch.Features.Schema.deserializeBinaryFromReader);
      msg.setSchema(value);
      break;
    case 3:
      var value = new proto.cerbos.telemetry.v1.ServerLaunch.Features.AdminApi;
      reader.readMessage(value,proto.cerbos.telemetry.v1.ServerLaunch.Features.AdminApi.deserializeBinaryFromReader);
      msg.setAdminApi(value);
      break;
    case 4:
      var value = new proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage;
      reader.readMessage(value,proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.deserializeBinaryFromReader);
      msg.setStorage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cerbos.telemetry.v1.ServerLaunch.Features.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cerbos.telemetry.v1.ServerLaunch.Features.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cerbos.telemetry.v1.ServerLaunch.Features} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cerbos.telemetry.v1.ServerLaunch.Features.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAudit();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.cerbos.telemetry.v1.ServerLaunch.Features.Audit.serializeBinaryToWriter
    );
  }
  f = message.getSchema();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.cerbos.telemetry.v1.ServerLaunch.Features.Schema.serializeBinaryToWriter
    );
  }
  f = message.getAdminApi();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.cerbos.telemetry.v1.ServerLaunch.Features.AdminApi.serializeBinaryToWriter
    );
  }
  f = message.getStorage();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cerbos.telemetry.v1.ServerLaunch.Features.Audit.prototype.toObject = function(opt_includeInstance) {
  return proto.cerbos.telemetry.v1.ServerLaunch.Features.Audit.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cerbos.telemetry.v1.ServerLaunch.Features.Audit} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cerbos.telemetry.v1.ServerLaunch.Features.Audit.toObject = function(includeInstance, msg) {
  var f, obj = {
    enabled: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    backend: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cerbos.telemetry.v1.ServerLaunch.Features.Audit}
 */
proto.cerbos.telemetry.v1.ServerLaunch.Features.Audit.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cerbos.telemetry.v1.ServerLaunch.Features.Audit;
  return proto.cerbos.telemetry.v1.ServerLaunch.Features.Audit.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cerbos.telemetry.v1.ServerLaunch.Features.Audit} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cerbos.telemetry.v1.ServerLaunch.Features.Audit}
 */
proto.cerbos.telemetry.v1.ServerLaunch.Features.Audit.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnabled(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBackend(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cerbos.telemetry.v1.ServerLaunch.Features.Audit.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cerbos.telemetry.v1.ServerLaunch.Features.Audit.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cerbos.telemetry.v1.ServerLaunch.Features.Audit} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cerbos.telemetry.v1.ServerLaunch.Features.Audit.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEnabled();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getBackend();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional bool enabled = 1;
 * @return {boolean}
 */
proto.cerbos.telemetry.v1.ServerLaunch.Features.Audit.prototype.getEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.cerbos.telemetry.v1.ServerLaunch.Features.Audit} returns this
 */
proto.cerbos.telemetry.v1.ServerLaunch.Features.Audit.prototype.setEnabled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional string backend = 2;
 * @return {string}
 */
proto.cerbos.telemetry.v1.ServerLaunch.Features.Audit.prototype.getBackend = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.cerbos.telemetry.v1.ServerLaunch.Features.Audit} returns this
 */
proto.cerbos.telemetry.v1.ServerLaunch.Features.Audit.prototype.setBackend = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cerbos.telemetry.v1.ServerLaunch.Features.Schema.prototype.toObject = function(opt_includeInstance) {
  return proto.cerbos.telemetry.v1.ServerLaunch.Features.Schema.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cerbos.telemetry.v1.ServerLaunch.Features.Schema} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cerbos.telemetry.v1.ServerLaunch.Features.Schema.toObject = function(includeInstance, msg) {
  var f, obj = {
    enforcement: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cerbos.telemetry.v1.ServerLaunch.Features.Schema}
 */
proto.cerbos.telemetry.v1.ServerLaunch.Features.Schema.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cerbos.telemetry.v1.ServerLaunch.Features.Schema;
  return proto.cerbos.telemetry.v1.ServerLaunch.Features.Schema.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cerbos.telemetry.v1.ServerLaunch.Features.Schema} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cerbos.telemetry.v1.ServerLaunch.Features.Schema}
 */
proto.cerbos.telemetry.v1.ServerLaunch.Features.Schema.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEnforcement(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cerbos.telemetry.v1.ServerLaunch.Features.Schema.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cerbos.telemetry.v1.ServerLaunch.Features.Schema.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cerbos.telemetry.v1.ServerLaunch.Features.Schema} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cerbos.telemetry.v1.ServerLaunch.Features.Schema.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEnforcement();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string enforcement = 1;
 * @return {string}
 */
proto.cerbos.telemetry.v1.ServerLaunch.Features.Schema.prototype.getEnforcement = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.cerbos.telemetry.v1.ServerLaunch.Features.Schema} returns this
 */
proto.cerbos.telemetry.v1.ServerLaunch.Features.Schema.prototype.setEnforcement = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cerbos.telemetry.v1.ServerLaunch.Features.AdminApi.prototype.toObject = function(opt_includeInstance) {
  return proto.cerbos.telemetry.v1.ServerLaunch.Features.AdminApi.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cerbos.telemetry.v1.ServerLaunch.Features.AdminApi} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cerbos.telemetry.v1.ServerLaunch.Features.AdminApi.toObject = function(includeInstance, msg) {
  var f, obj = {
    enabled: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cerbos.telemetry.v1.ServerLaunch.Features.AdminApi}
 */
proto.cerbos.telemetry.v1.ServerLaunch.Features.AdminApi.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cerbos.telemetry.v1.ServerLaunch.Features.AdminApi;
  return proto.cerbos.telemetry.v1.ServerLaunch.Features.AdminApi.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cerbos.telemetry.v1.ServerLaunch.Features.AdminApi} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cerbos.telemetry.v1.ServerLaunch.Features.AdminApi}
 */
proto.cerbos.telemetry.v1.ServerLaunch.Features.AdminApi.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnabled(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cerbos.telemetry.v1.ServerLaunch.Features.AdminApi.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cerbos.telemetry.v1.ServerLaunch.Features.AdminApi.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cerbos.telemetry.v1.ServerLaunch.Features.AdminApi} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cerbos.telemetry.v1.ServerLaunch.Features.AdminApi.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEnabled();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool enabled = 1;
 * @return {boolean}
 */
proto.cerbos.telemetry.v1.ServerLaunch.Features.AdminApi.prototype.getEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.cerbos.telemetry.v1.ServerLaunch.Features.AdminApi} returns this
 */
proto.cerbos.telemetry.v1.ServerLaunch.Features.AdminApi.prototype.setEnabled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.oneofGroups_ = [[2,3,4]];

/**
 * @enum {number}
 */
proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.StoreCase = {
  STORE_NOT_SET: 0,
  DISK: 2,
  GIT: 3,
  BLOB: 4
};

/**
 * @return {proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.StoreCase}
 */
proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.prototype.getStoreCase = function() {
  return /** @type {proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.StoreCase} */(jspb.Message.computeOneofCase(this, proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.prototype.toObject = function(opt_includeInstance) {
  return proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.toObject = function(includeInstance, msg) {
  var f, obj = {
    driver: jspb.Message.getFieldWithDefault(msg, 1, ""),
    disk: (f = msg.getDisk()) && proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.Disk.toObject(includeInstance, f),
    git: (f = msg.getGit()) && proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.Git.toObject(includeInstance, f),
    blob: (f = msg.getBlob()) && proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.Blob.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage}
 */
proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage;
  return proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage}
 */
proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDriver(value);
      break;
    case 2:
      var value = new proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.Disk;
      reader.readMessage(value,proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.Disk.deserializeBinaryFromReader);
      msg.setDisk(value);
      break;
    case 3:
      var value = new proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.Git;
      reader.readMessage(value,proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.Git.deserializeBinaryFromReader);
      msg.setGit(value);
      break;
    case 4:
      var value = new proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.Blob;
      reader.readMessage(value,proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.Blob.deserializeBinaryFromReader);
      msg.setBlob(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDriver();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDisk();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.Disk.serializeBinaryToWriter
    );
  }
  f = message.getGit();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.Git.serializeBinaryToWriter
    );
  }
  f = message.getBlob();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.Blob.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.Disk.prototype.toObject = function(opt_includeInstance) {
  return proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.Disk.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.Disk} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.Disk.toObject = function(includeInstance, msg) {
  var f, obj = {
    watch: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.Disk}
 */
proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.Disk.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.Disk;
  return proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.Disk.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.Disk} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.Disk}
 */
proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.Disk.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setWatch(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.Disk.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.Disk.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.Disk} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.Disk.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWatch();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool watch = 1;
 * @return {boolean}
 */
proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.Disk.prototype.getWatch = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.Disk} returns this
 */
proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.Disk.prototype.setWatch = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.Git.prototype.toObject = function(opt_includeInstance) {
  return proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.Git.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.Git} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.Git.toObject = function(includeInstance, msg) {
  var f, obj = {
    protocol: jspb.Message.getFieldWithDefault(msg, 1, ""),
    auth: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    pollInterval: (f = msg.getPollInterval()) && google_protobuf_duration_pb.Duration.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.Git}
 */
proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.Git.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.Git;
  return proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.Git.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.Git} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.Git}
 */
proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.Git.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setProtocol(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAuth(value);
      break;
    case 3:
      var value = new google_protobuf_duration_pb.Duration;
      reader.readMessage(value,google_protobuf_duration_pb.Duration.deserializeBinaryFromReader);
      msg.setPollInterval(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.Git.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.Git.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.Git} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.Git.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProtocol();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAuth();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getPollInterval();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_duration_pb.Duration.serializeBinaryToWriter
    );
  }
};


/**
 * optional string protocol = 1;
 * @return {string}
 */
proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.Git.prototype.getProtocol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.Git} returns this
 */
proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.Git.prototype.setProtocol = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool auth = 2;
 * @return {boolean}
 */
proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.Git.prototype.getAuth = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.Git} returns this
 */
proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.Git.prototype.setAuth = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional google.protobuf.Duration poll_interval = 3;
 * @return {?proto.google.protobuf.Duration}
 */
proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.Git.prototype.getPollInterval = function() {
  return /** @type{?proto.google.protobuf.Duration} */ (
    jspb.Message.getWrapperField(this, google_protobuf_duration_pb.Duration, 3));
};


/**
 * @param {?proto.google.protobuf.Duration|undefined} value
 * @return {!proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.Git} returns this
*/
proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.Git.prototype.setPollInterval = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.Git} returns this
 */
proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.Git.prototype.clearPollInterval = function() {
  return this.setPollInterval(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.Git.prototype.hasPollInterval = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.Blob.prototype.toObject = function(opt_includeInstance) {
  return proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.Blob.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.Blob} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.Blob.toObject = function(includeInstance, msg) {
  var f, obj = {
    provider: jspb.Message.getFieldWithDefault(msg, 1, ""),
    pollInterval: (f = msg.getPollInterval()) && google_protobuf_duration_pb.Duration.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.Blob}
 */
proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.Blob.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.Blob;
  return proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.Blob.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.Blob} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.Blob}
 */
proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.Blob.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setProvider(value);
      break;
    case 2:
      var value = new google_protobuf_duration_pb.Duration;
      reader.readMessage(value,google_protobuf_duration_pb.Duration.deserializeBinaryFromReader);
      msg.setPollInterval(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.Blob.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.Blob.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.Blob} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.Blob.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProvider();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPollInterval();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_duration_pb.Duration.serializeBinaryToWriter
    );
  }
};


/**
 * optional string provider = 1;
 * @return {string}
 */
proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.Blob.prototype.getProvider = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.Blob} returns this
 */
proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.Blob.prototype.setProvider = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional google.protobuf.Duration poll_interval = 2;
 * @return {?proto.google.protobuf.Duration}
 */
proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.Blob.prototype.getPollInterval = function() {
  return /** @type{?proto.google.protobuf.Duration} */ (
    jspb.Message.getWrapperField(this, google_protobuf_duration_pb.Duration, 2));
};


/**
 * @param {?proto.google.protobuf.Duration|undefined} value
 * @return {!proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.Blob} returns this
*/
proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.Blob.prototype.setPollInterval = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.Blob} returns this
 */
proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.Blob.prototype.clearPollInterval = function() {
  return this.setPollInterval(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.Blob.prototype.hasPollInterval = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string driver = 1;
 * @return {string}
 */
proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.prototype.getDriver = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage} returns this
 */
proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.prototype.setDriver = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Disk disk = 2;
 * @return {?proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.Disk}
 */
proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.prototype.getDisk = function() {
  return /** @type{?proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.Disk} */ (
    jspb.Message.getWrapperField(this, proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.Disk, 2));
};


/**
 * @param {?proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.Disk|undefined} value
 * @return {!proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage} returns this
*/
proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.prototype.setDisk = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage} returns this
 */
proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.prototype.clearDisk = function() {
  return this.setDisk(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.prototype.hasDisk = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Git git = 3;
 * @return {?proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.Git}
 */
proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.prototype.getGit = function() {
  return /** @type{?proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.Git} */ (
    jspb.Message.getWrapperField(this, proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.Git, 3));
};


/**
 * @param {?proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.Git|undefined} value
 * @return {!proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage} returns this
*/
proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.prototype.setGit = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage} returns this
 */
proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.prototype.clearGit = function() {
  return this.setGit(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.prototype.hasGit = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Blob blob = 4;
 * @return {?proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.Blob}
 */
proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.prototype.getBlob = function() {
  return /** @type{?proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.Blob} */ (
    jspb.Message.getWrapperField(this, proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.Blob, 4));
};


/**
 * @param {?proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.Blob|undefined} value
 * @return {!proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage} returns this
*/
proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.prototype.setBlob = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage} returns this
 */
proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.prototype.clearBlob = function() {
  return this.setBlob(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage.prototype.hasBlob = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Audit audit = 1;
 * @return {?proto.cerbos.telemetry.v1.ServerLaunch.Features.Audit}
 */
proto.cerbos.telemetry.v1.ServerLaunch.Features.prototype.getAudit = function() {
  return /** @type{?proto.cerbos.telemetry.v1.ServerLaunch.Features.Audit} */ (
    jspb.Message.getWrapperField(this, proto.cerbos.telemetry.v1.ServerLaunch.Features.Audit, 1));
};


/**
 * @param {?proto.cerbos.telemetry.v1.ServerLaunch.Features.Audit|undefined} value
 * @return {!proto.cerbos.telemetry.v1.ServerLaunch.Features} returns this
*/
proto.cerbos.telemetry.v1.ServerLaunch.Features.prototype.setAudit = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cerbos.telemetry.v1.ServerLaunch.Features} returns this
 */
proto.cerbos.telemetry.v1.ServerLaunch.Features.prototype.clearAudit = function() {
  return this.setAudit(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cerbos.telemetry.v1.ServerLaunch.Features.prototype.hasAudit = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Schema schema = 2;
 * @return {?proto.cerbos.telemetry.v1.ServerLaunch.Features.Schema}
 */
proto.cerbos.telemetry.v1.ServerLaunch.Features.prototype.getSchema = function() {
  return /** @type{?proto.cerbos.telemetry.v1.ServerLaunch.Features.Schema} */ (
    jspb.Message.getWrapperField(this, proto.cerbos.telemetry.v1.ServerLaunch.Features.Schema, 2));
};


/**
 * @param {?proto.cerbos.telemetry.v1.ServerLaunch.Features.Schema|undefined} value
 * @return {!proto.cerbos.telemetry.v1.ServerLaunch.Features} returns this
*/
proto.cerbos.telemetry.v1.ServerLaunch.Features.prototype.setSchema = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cerbos.telemetry.v1.ServerLaunch.Features} returns this
 */
proto.cerbos.telemetry.v1.ServerLaunch.Features.prototype.clearSchema = function() {
  return this.setSchema(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cerbos.telemetry.v1.ServerLaunch.Features.prototype.hasSchema = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional AdminApi admin_api = 3;
 * @return {?proto.cerbos.telemetry.v1.ServerLaunch.Features.AdminApi}
 */
proto.cerbos.telemetry.v1.ServerLaunch.Features.prototype.getAdminApi = function() {
  return /** @type{?proto.cerbos.telemetry.v1.ServerLaunch.Features.AdminApi} */ (
    jspb.Message.getWrapperField(this, proto.cerbos.telemetry.v1.ServerLaunch.Features.AdminApi, 3));
};


/**
 * @param {?proto.cerbos.telemetry.v1.ServerLaunch.Features.AdminApi|undefined} value
 * @return {!proto.cerbos.telemetry.v1.ServerLaunch.Features} returns this
*/
proto.cerbos.telemetry.v1.ServerLaunch.Features.prototype.setAdminApi = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cerbos.telemetry.v1.ServerLaunch.Features} returns this
 */
proto.cerbos.telemetry.v1.ServerLaunch.Features.prototype.clearAdminApi = function() {
  return this.setAdminApi(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cerbos.telemetry.v1.ServerLaunch.Features.prototype.hasAdminApi = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Storage storage = 4;
 * @return {?proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage}
 */
proto.cerbos.telemetry.v1.ServerLaunch.Features.prototype.getStorage = function() {
  return /** @type{?proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage} */ (
    jspb.Message.getWrapperField(this, proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage, 4));
};


/**
 * @param {?proto.cerbos.telemetry.v1.ServerLaunch.Features.Storage|undefined} value
 * @return {!proto.cerbos.telemetry.v1.ServerLaunch.Features} returns this
*/
proto.cerbos.telemetry.v1.ServerLaunch.Features.prototype.setStorage = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cerbos.telemetry.v1.ServerLaunch.Features} returns this
 */
proto.cerbos.telemetry.v1.ServerLaunch.Features.prototype.clearStorage = function() {
  return this.setStorage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cerbos.telemetry.v1.ServerLaunch.Features.prototype.hasStorage = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cerbos.telemetry.v1.ServerLaunch.Stats.prototype.toObject = function(opt_includeInstance) {
  return proto.cerbos.telemetry.v1.ServerLaunch.Stats.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cerbos.telemetry.v1.ServerLaunch.Stats} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cerbos.telemetry.v1.ServerLaunch.Stats.toObject = function(includeInstance, msg) {
  var f, obj = {
    policy: (f = msg.getPolicy()) && proto.cerbos.telemetry.v1.ServerLaunch.Stats.Policy.toObject(includeInstance, f),
    schema: (f = msg.getSchema()) && proto.cerbos.telemetry.v1.ServerLaunch.Stats.Schema.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cerbos.telemetry.v1.ServerLaunch.Stats}
 */
proto.cerbos.telemetry.v1.ServerLaunch.Stats.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cerbos.telemetry.v1.ServerLaunch.Stats;
  return proto.cerbos.telemetry.v1.ServerLaunch.Stats.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cerbos.telemetry.v1.ServerLaunch.Stats} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cerbos.telemetry.v1.ServerLaunch.Stats}
 */
proto.cerbos.telemetry.v1.ServerLaunch.Stats.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.cerbos.telemetry.v1.ServerLaunch.Stats.Policy;
      reader.readMessage(value,proto.cerbos.telemetry.v1.ServerLaunch.Stats.Policy.deserializeBinaryFromReader);
      msg.setPolicy(value);
      break;
    case 2:
      var value = new proto.cerbos.telemetry.v1.ServerLaunch.Stats.Schema;
      reader.readMessage(value,proto.cerbos.telemetry.v1.ServerLaunch.Stats.Schema.deserializeBinaryFromReader);
      msg.setSchema(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cerbos.telemetry.v1.ServerLaunch.Stats.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cerbos.telemetry.v1.ServerLaunch.Stats.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cerbos.telemetry.v1.ServerLaunch.Stats} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cerbos.telemetry.v1.ServerLaunch.Stats.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPolicy();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.cerbos.telemetry.v1.ServerLaunch.Stats.Policy.serializeBinaryToWriter
    );
  }
  f = message.getSchema();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.cerbos.telemetry.v1.ServerLaunch.Stats.Schema.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cerbos.telemetry.v1.ServerLaunch.Stats.Policy.prototype.toObject = function(opt_includeInstance) {
  return proto.cerbos.telemetry.v1.ServerLaunch.Stats.Policy.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cerbos.telemetry.v1.ServerLaunch.Stats.Policy} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cerbos.telemetry.v1.ServerLaunch.Stats.Policy.toObject = function(includeInstance, msg) {
  var f, obj = {
    countMap: (f = msg.getCountMap()) ? f.toObject(includeInstance, undefined) : [],
    avgRuleCountMap: (f = msg.getAvgRuleCountMap()) ? f.toObject(includeInstance, undefined) : [],
    avgConditionCountMap: (f = msg.getAvgConditionCountMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cerbos.telemetry.v1.ServerLaunch.Stats.Policy}
 */
proto.cerbos.telemetry.v1.ServerLaunch.Stats.Policy.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cerbos.telemetry.v1.ServerLaunch.Stats.Policy;
  return proto.cerbos.telemetry.v1.ServerLaunch.Stats.Policy.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cerbos.telemetry.v1.ServerLaunch.Stats.Policy} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cerbos.telemetry.v1.ServerLaunch.Stats.Policy}
 */
proto.cerbos.telemetry.v1.ServerLaunch.Stats.Policy.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getCountMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readUint32, null, "", 0);
         });
      break;
    case 2:
      var value = msg.getAvgRuleCountMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readDouble, null, "", 0.0);
         });
      break;
    case 3:
      var value = msg.getAvgConditionCountMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readDouble, null, "", 0.0);
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cerbos.telemetry.v1.ServerLaunch.Stats.Policy.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cerbos.telemetry.v1.ServerLaunch.Stats.Policy.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cerbos.telemetry.v1.ServerLaunch.Stats.Policy} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cerbos.telemetry.v1.ServerLaunch.Stats.Policy.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCountMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeUint32);
  }
  f = message.getAvgRuleCountMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeDouble);
  }
  f = message.getAvgConditionCountMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeDouble);
  }
};


/**
 * map<string, uint32> count = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,number>}
 */
proto.cerbos.telemetry.v1.ServerLaunch.Stats.Policy.prototype.getCountMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,number>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.cerbos.telemetry.v1.ServerLaunch.Stats.Policy} returns this
 */
proto.cerbos.telemetry.v1.ServerLaunch.Stats.Policy.prototype.clearCountMap = function() {
  this.getCountMap().clear();
  return this;};


/**
 * map<string, double> avg_rule_count = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,number>}
 */
proto.cerbos.telemetry.v1.ServerLaunch.Stats.Policy.prototype.getAvgRuleCountMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,number>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.cerbos.telemetry.v1.ServerLaunch.Stats.Policy} returns this
 */
proto.cerbos.telemetry.v1.ServerLaunch.Stats.Policy.prototype.clearAvgRuleCountMap = function() {
  this.getAvgRuleCountMap().clear();
  return this;};


/**
 * map<string, double> avg_condition_count = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,number>}
 */
proto.cerbos.telemetry.v1.ServerLaunch.Stats.Policy.prototype.getAvgConditionCountMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,number>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.cerbos.telemetry.v1.ServerLaunch.Stats.Policy} returns this
 */
proto.cerbos.telemetry.v1.ServerLaunch.Stats.Policy.prototype.clearAvgConditionCountMap = function() {
  this.getAvgConditionCountMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cerbos.telemetry.v1.ServerLaunch.Stats.Schema.prototype.toObject = function(opt_includeInstance) {
  return proto.cerbos.telemetry.v1.ServerLaunch.Stats.Schema.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cerbos.telemetry.v1.ServerLaunch.Stats.Schema} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cerbos.telemetry.v1.ServerLaunch.Stats.Schema.toObject = function(includeInstance, msg) {
  var f, obj = {
    count: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cerbos.telemetry.v1.ServerLaunch.Stats.Schema}
 */
proto.cerbos.telemetry.v1.ServerLaunch.Stats.Schema.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cerbos.telemetry.v1.ServerLaunch.Stats.Schema;
  return proto.cerbos.telemetry.v1.ServerLaunch.Stats.Schema.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cerbos.telemetry.v1.ServerLaunch.Stats.Schema} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cerbos.telemetry.v1.ServerLaunch.Stats.Schema}
 */
proto.cerbos.telemetry.v1.ServerLaunch.Stats.Schema.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cerbos.telemetry.v1.ServerLaunch.Stats.Schema.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cerbos.telemetry.v1.ServerLaunch.Stats.Schema.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cerbos.telemetry.v1.ServerLaunch.Stats.Schema} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cerbos.telemetry.v1.ServerLaunch.Stats.Schema.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCount();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 count = 1;
 * @return {number}
 */
proto.cerbos.telemetry.v1.ServerLaunch.Stats.Schema.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.cerbos.telemetry.v1.ServerLaunch.Stats.Schema} returns this
 */
proto.cerbos.telemetry.v1.ServerLaunch.Stats.Schema.prototype.setCount = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional Policy policy = 1;
 * @return {?proto.cerbos.telemetry.v1.ServerLaunch.Stats.Policy}
 */
proto.cerbos.telemetry.v1.ServerLaunch.Stats.prototype.getPolicy = function() {
  return /** @type{?proto.cerbos.telemetry.v1.ServerLaunch.Stats.Policy} */ (
    jspb.Message.getWrapperField(this, proto.cerbos.telemetry.v1.ServerLaunch.Stats.Policy, 1));
};


/**
 * @param {?proto.cerbos.telemetry.v1.ServerLaunch.Stats.Policy|undefined} value
 * @return {!proto.cerbos.telemetry.v1.ServerLaunch.Stats} returns this
*/
proto.cerbos.telemetry.v1.ServerLaunch.Stats.prototype.setPolicy = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cerbos.telemetry.v1.ServerLaunch.Stats} returns this
 */
proto.cerbos.telemetry.v1.ServerLaunch.Stats.prototype.clearPolicy = function() {
  return this.setPolicy(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cerbos.telemetry.v1.ServerLaunch.Stats.prototype.hasPolicy = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Schema schema = 2;
 * @return {?proto.cerbos.telemetry.v1.ServerLaunch.Stats.Schema}
 */
proto.cerbos.telemetry.v1.ServerLaunch.Stats.prototype.getSchema = function() {
  return /** @type{?proto.cerbos.telemetry.v1.ServerLaunch.Stats.Schema} */ (
    jspb.Message.getWrapperField(this, proto.cerbos.telemetry.v1.ServerLaunch.Stats.Schema, 2));
};


/**
 * @param {?proto.cerbos.telemetry.v1.ServerLaunch.Stats.Schema|undefined} value
 * @return {!proto.cerbos.telemetry.v1.ServerLaunch.Stats} returns this
*/
proto.cerbos.telemetry.v1.ServerLaunch.Stats.prototype.setSchema = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cerbos.telemetry.v1.ServerLaunch.Stats} returns this
 */
proto.cerbos.telemetry.v1.ServerLaunch.Stats.prototype.clearSchema = function() {
  return this.setSchema(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cerbos.telemetry.v1.ServerLaunch.Stats.prototype.hasSchema = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string version = 1;
 * @return {string}
 */
proto.cerbos.telemetry.v1.ServerLaunch.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.cerbos.telemetry.v1.ServerLaunch} returns this
 */
proto.cerbos.telemetry.v1.ServerLaunch.prototype.setVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Source source = 2;
 * @return {?proto.cerbos.telemetry.v1.ServerLaunch.Source}
 */
proto.cerbos.telemetry.v1.ServerLaunch.prototype.getSource = function() {
  return /** @type{?proto.cerbos.telemetry.v1.ServerLaunch.Source} */ (
    jspb.Message.getWrapperField(this, proto.cerbos.telemetry.v1.ServerLaunch.Source, 2));
};


/**
 * @param {?proto.cerbos.telemetry.v1.ServerLaunch.Source|undefined} value
 * @return {!proto.cerbos.telemetry.v1.ServerLaunch} returns this
*/
proto.cerbos.telemetry.v1.ServerLaunch.prototype.setSource = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cerbos.telemetry.v1.ServerLaunch} returns this
 */
proto.cerbos.telemetry.v1.ServerLaunch.prototype.clearSource = function() {
  return this.setSource(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cerbos.telemetry.v1.ServerLaunch.prototype.hasSource = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Features features = 3;
 * @return {?proto.cerbos.telemetry.v1.ServerLaunch.Features}
 */
proto.cerbos.telemetry.v1.ServerLaunch.prototype.getFeatures = function() {
  return /** @type{?proto.cerbos.telemetry.v1.ServerLaunch.Features} */ (
    jspb.Message.getWrapperField(this, proto.cerbos.telemetry.v1.ServerLaunch.Features, 3));
};


/**
 * @param {?proto.cerbos.telemetry.v1.ServerLaunch.Features|undefined} value
 * @return {!proto.cerbos.telemetry.v1.ServerLaunch} returns this
*/
proto.cerbos.telemetry.v1.ServerLaunch.prototype.setFeatures = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cerbos.telemetry.v1.ServerLaunch} returns this
 */
proto.cerbos.telemetry.v1.ServerLaunch.prototype.clearFeatures = function() {
  return this.setFeatures(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cerbos.telemetry.v1.ServerLaunch.prototype.hasFeatures = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Stats stats = 4;
 * @return {?proto.cerbos.telemetry.v1.ServerLaunch.Stats}
 */
proto.cerbos.telemetry.v1.ServerLaunch.prototype.getStats = function() {
  return /** @type{?proto.cerbos.telemetry.v1.ServerLaunch.Stats} */ (
    jspb.Message.getWrapperField(this, proto.cerbos.telemetry.v1.ServerLaunch.Stats, 4));
};


/**
 * @param {?proto.cerbos.telemetry.v1.ServerLaunch.Stats|undefined} value
 * @return {!proto.cerbos.telemetry.v1.ServerLaunch} returns this
*/
proto.cerbos.telemetry.v1.ServerLaunch.prototype.setStats = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cerbos.telemetry.v1.ServerLaunch} returns this
 */
proto.cerbos.telemetry.v1.ServerLaunch.prototype.clearStats = function() {
  return this.setStats(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cerbos.telemetry.v1.ServerLaunch.prototype.hasStats = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cerbos.telemetry.v1.ServerStop.prototype.toObject = function(opt_includeInstance) {
  return proto.cerbos.telemetry.v1.ServerStop.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cerbos.telemetry.v1.ServerStop} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cerbos.telemetry.v1.ServerStop.toObject = function(includeInstance, msg) {
  var f, obj = {
    version: jspb.Message.getFieldWithDefault(msg, 1, ""),
    uptime: (f = msg.getUptime()) && google_protobuf_duration_pb.Duration.toObject(includeInstance, f),
    requestsTotal: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cerbos.telemetry.v1.ServerStop}
 */
proto.cerbos.telemetry.v1.ServerStop.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cerbos.telemetry.v1.ServerStop;
  return proto.cerbos.telemetry.v1.ServerStop.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cerbos.telemetry.v1.ServerStop} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cerbos.telemetry.v1.ServerStop}
 */
proto.cerbos.telemetry.v1.ServerStop.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    case 2:
      var value = new google_protobuf_duration_pb.Duration;
      reader.readMessage(value,google_protobuf_duration_pb.Duration.deserializeBinaryFromReader);
      msg.setUptime(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRequestsTotal(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cerbos.telemetry.v1.ServerStop.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cerbos.telemetry.v1.ServerStop.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cerbos.telemetry.v1.ServerStop} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cerbos.telemetry.v1.ServerStop.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUptime();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_duration_pb.Duration.serializeBinaryToWriter
    );
  }
  f = message.getRequestsTotal();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * optional string version = 1;
 * @return {string}
 */
proto.cerbos.telemetry.v1.ServerStop.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.cerbos.telemetry.v1.ServerStop} returns this
 */
proto.cerbos.telemetry.v1.ServerStop.prototype.setVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional google.protobuf.Duration uptime = 2;
 * @return {?proto.google.protobuf.Duration}
 */
proto.cerbos.telemetry.v1.ServerStop.prototype.getUptime = function() {
  return /** @type{?proto.google.protobuf.Duration} */ (
    jspb.Message.getWrapperField(this, google_protobuf_duration_pb.Duration, 2));
};


/**
 * @param {?proto.google.protobuf.Duration|undefined} value
 * @return {!proto.cerbos.telemetry.v1.ServerStop} returns this
*/
proto.cerbos.telemetry.v1.ServerStop.prototype.setUptime = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cerbos.telemetry.v1.ServerStop} returns this
 */
proto.cerbos.telemetry.v1.ServerStop.prototype.clearUptime = function() {
  return this.setUptime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cerbos.telemetry.v1.ServerStop.prototype.hasUptime = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint64 requests_total = 3;
 * @return {number}
 */
proto.cerbos.telemetry.v1.ServerStop.prototype.getRequestsTotal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.cerbos.telemetry.v1.ServerStop} returns this
 */
proto.cerbos.telemetry.v1.ServerStop.prototype.setRequestsTotal = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.cerbos.telemetry.v1.Event.oneofGroups_ = [[1]];

/**
 * @enum {number}
 */
proto.cerbos.telemetry.v1.Event.DataCase = {
  DATA_NOT_SET: 0,
  API_ACTIVITY: 1
};

/**
 * @return {proto.cerbos.telemetry.v1.Event.DataCase}
 */
proto.cerbos.telemetry.v1.Event.prototype.getDataCase = function() {
  return /** @type {proto.cerbos.telemetry.v1.Event.DataCase} */(jspb.Message.computeOneofCase(this, proto.cerbos.telemetry.v1.Event.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cerbos.telemetry.v1.Event.prototype.toObject = function(opt_includeInstance) {
  return proto.cerbos.telemetry.v1.Event.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cerbos.telemetry.v1.Event} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cerbos.telemetry.v1.Event.toObject = function(includeInstance, msg) {
  var f, obj = {
    apiActivity: (f = msg.getApiActivity()) && proto.cerbos.telemetry.v1.Event.ApiActivity.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cerbos.telemetry.v1.Event}
 */
proto.cerbos.telemetry.v1.Event.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cerbos.telemetry.v1.Event;
  return proto.cerbos.telemetry.v1.Event.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cerbos.telemetry.v1.Event} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cerbos.telemetry.v1.Event}
 */
proto.cerbos.telemetry.v1.Event.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.cerbos.telemetry.v1.Event.ApiActivity;
      reader.readMessage(value,proto.cerbos.telemetry.v1.Event.ApiActivity.deserializeBinaryFromReader);
      msg.setApiActivity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cerbos.telemetry.v1.Event.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cerbos.telemetry.v1.Event.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cerbos.telemetry.v1.Event} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cerbos.telemetry.v1.Event.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getApiActivity();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.cerbos.telemetry.v1.Event.ApiActivity.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cerbos.telemetry.v1.Event.ApiActivity.prototype.toObject = function(opt_includeInstance) {
  return proto.cerbos.telemetry.v1.Event.ApiActivity.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cerbos.telemetry.v1.Event.ApiActivity} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cerbos.telemetry.v1.Event.ApiActivity.toObject = function(includeInstance, msg) {
  var f, obj = {
    version: jspb.Message.getFieldWithDefault(msg, 1, ""),
    uptime: (f = msg.getUptime()) && google_protobuf_duration_pb.Duration.toObject(includeInstance, f),
    methodCallsMap: (f = msg.getMethodCallsMap()) ? f.toObject(includeInstance, undefined) : [],
    userAgentsMap: (f = msg.getUserAgentsMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cerbos.telemetry.v1.Event.ApiActivity}
 */
proto.cerbos.telemetry.v1.Event.ApiActivity.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cerbos.telemetry.v1.Event.ApiActivity;
  return proto.cerbos.telemetry.v1.Event.ApiActivity.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cerbos.telemetry.v1.Event.ApiActivity} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cerbos.telemetry.v1.Event.ApiActivity}
 */
proto.cerbos.telemetry.v1.Event.ApiActivity.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    case 2:
      var value = new google_protobuf_duration_pb.Duration;
      reader.readMessage(value,google_protobuf_duration_pb.Duration.deserializeBinaryFromReader);
      msg.setUptime(value);
      break;
    case 3:
      var value = msg.getMethodCallsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readUint64, null, "", 0);
         });
      break;
    case 4:
      var value = msg.getUserAgentsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readUint64, null, "", 0);
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cerbos.telemetry.v1.Event.ApiActivity.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cerbos.telemetry.v1.Event.ApiActivity.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cerbos.telemetry.v1.Event.ApiActivity} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cerbos.telemetry.v1.Event.ApiActivity.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUptime();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_duration_pb.Duration.serializeBinaryToWriter
    );
  }
  f = message.getMethodCallsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeUint64);
  }
  f = message.getUserAgentsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeUint64);
  }
};


/**
 * optional string version = 1;
 * @return {string}
 */
proto.cerbos.telemetry.v1.Event.ApiActivity.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.cerbos.telemetry.v1.Event.ApiActivity} returns this
 */
proto.cerbos.telemetry.v1.Event.ApiActivity.prototype.setVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional google.protobuf.Duration uptime = 2;
 * @return {?proto.google.protobuf.Duration}
 */
proto.cerbos.telemetry.v1.Event.ApiActivity.prototype.getUptime = function() {
  return /** @type{?proto.google.protobuf.Duration} */ (
    jspb.Message.getWrapperField(this, google_protobuf_duration_pb.Duration, 2));
};


/**
 * @param {?proto.google.protobuf.Duration|undefined} value
 * @return {!proto.cerbos.telemetry.v1.Event.ApiActivity} returns this
*/
proto.cerbos.telemetry.v1.Event.ApiActivity.prototype.setUptime = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cerbos.telemetry.v1.Event.ApiActivity} returns this
 */
proto.cerbos.telemetry.v1.Event.ApiActivity.prototype.clearUptime = function() {
  return this.setUptime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cerbos.telemetry.v1.Event.ApiActivity.prototype.hasUptime = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * map<string, uint64> method_calls = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,number>}
 */
proto.cerbos.telemetry.v1.Event.ApiActivity.prototype.getMethodCallsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,number>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.cerbos.telemetry.v1.Event.ApiActivity} returns this
 */
proto.cerbos.telemetry.v1.Event.ApiActivity.prototype.clearMethodCallsMap = function() {
  this.getMethodCallsMap().clear();
  return this;};


/**
 * map<string, uint64> user_agents = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,number>}
 */
proto.cerbos.telemetry.v1.Event.ApiActivity.prototype.getUserAgentsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,number>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.cerbos.telemetry.v1.Event.ApiActivity} returns this
 */
proto.cerbos.telemetry.v1.Event.ApiActivity.prototype.clearUserAgentsMap = function() {
  this.getUserAgentsMap().clear();
  return this;};


/**
 * optional ApiActivity api_activity = 1;
 * @return {?proto.cerbos.telemetry.v1.Event.ApiActivity}
 */
proto.cerbos.telemetry.v1.Event.prototype.getApiActivity = function() {
  return /** @type{?proto.cerbos.telemetry.v1.Event.ApiActivity} */ (
    jspb.Message.getWrapperField(this, proto.cerbos.telemetry.v1.Event.ApiActivity, 1));
};


/**
 * @param {?proto.cerbos.telemetry.v1.Event.ApiActivity|undefined} value
 * @return {!proto.cerbos.telemetry.v1.Event} returns this
*/
proto.cerbos.telemetry.v1.Event.prototype.setApiActivity = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.cerbos.telemetry.v1.Event.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cerbos.telemetry.v1.Event} returns this
 */
proto.cerbos.telemetry.v1.Event.prototype.clearApiActivity = function() {
  return this.setApiActivity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cerbos.telemetry.v1.Event.prototype.hasApiActivity = function() {
  return jspb.Message.getField(this, 1) != null;
};


goog.object.extend(exports, proto.cerbos.telemetry.v1);
