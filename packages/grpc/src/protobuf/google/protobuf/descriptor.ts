// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// source: google/protobuf/descriptor.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "google.protobuf";

export enum Edition {
  EDITION_UNKNOWN = 0,
  EDITION_LEGACY = 900,
  EDITION_PROTO2 = 998,
  EDITION_PROTO3 = 999,
  EDITION_2023 = 1000,
  EDITION_2024 = 1001,
  EDITION_1_TEST_ONLY = 1,
  EDITION_2_TEST_ONLY = 2,
  EDITION_99997_TEST_ONLY = 99997,
  EDITION_99998_TEST_ONLY = 99998,
  EDITION_99999_TEST_ONLY = 99999,
  EDITION_MAX = 2147483647,
}

export interface FileOptions {
  javaPackage?: string | undefined;
  javaOuterClassname?: string | undefined;
  javaMultipleFiles?: boolean | undefined;
  javaGenerateEqualsAndHash?: boolean | undefined;
  javaStringCheckUtf8?: boolean | undefined;
  optimizeFor?: FileOptions_OptimizeMode | undefined;
  goPackage?: string | undefined;
  ccGenericServices?: boolean | undefined;
  javaGenericServices?: boolean | undefined;
  pyGenericServices?: boolean | undefined;
  deprecated?: boolean | undefined;
  ccEnableArenas?: boolean | undefined;
  objcClassPrefix?: string | undefined;
  csharpNamespace?: string | undefined;
  swiftPrefix?: string | undefined;
  phpClassPrefix?: string | undefined;
  phpNamespace?: string | undefined;
  phpMetadataNamespace?: string | undefined;
  rubyPackage?: string | undefined;
  features?: FeatureSet | undefined;
  uninterpretedOption: UninterpretedOption[];
}

export enum FileOptions_OptimizeMode {
  SPEED = 1,
  CODE_SIZE = 2,
  LITE_RUNTIME = 3,
}

export interface MessageOptions {
  messageSetWireFormat?: boolean | undefined;
  noStandardDescriptorAccessor?: boolean | undefined;
  deprecated?: boolean | undefined;
  mapEntry?: boolean | undefined;
  deprecatedLegacyJsonFieldConflicts?: boolean | undefined;
  features?: FeatureSet | undefined;
  uninterpretedOption: UninterpretedOption[];
}

export interface FieldOptions {
  ctype?: FieldOptions_CType | undefined;
  packed?: boolean | undefined;
  jstype?: FieldOptions_JSType | undefined;
  lazy?: boolean | undefined;
  unverifiedLazy?: boolean | undefined;
  deprecated?: boolean | undefined;
  weak?: boolean | undefined;
  debugRedact?: boolean | undefined;
  retention?: FieldOptions_OptionRetention | undefined;
  targets: FieldOptions_OptionTargetType[];
  editionDefaults: FieldOptions_EditionDefault[];
  features?: FeatureSet | undefined;
  featureSupport?: FieldOptions_FeatureSupport | undefined;
  uninterpretedOption: UninterpretedOption[];
}

export enum FieldOptions_CType {
  STRING = 0,
  CORD = 1,
  STRING_PIECE = 2,
}

export enum FieldOptions_JSType {
  JS_NORMAL = 0,
  JS_STRING = 1,
  JS_NUMBER = 2,
}

export enum FieldOptions_OptionRetention {
  RETENTION_UNKNOWN = 0,
  RETENTION_RUNTIME = 1,
  RETENTION_SOURCE = 2,
}

export enum FieldOptions_OptionTargetType {
  TARGET_TYPE_UNKNOWN = 0,
  TARGET_TYPE_FILE = 1,
  TARGET_TYPE_EXTENSION_RANGE = 2,
  TARGET_TYPE_MESSAGE = 3,
  TARGET_TYPE_FIELD = 4,
  TARGET_TYPE_ONEOF = 5,
  TARGET_TYPE_ENUM = 6,
  TARGET_TYPE_ENUM_ENTRY = 7,
  TARGET_TYPE_SERVICE = 8,
  TARGET_TYPE_METHOD = 9,
}

export interface FieldOptions_EditionDefault {
  edition?: Edition | undefined;
  value?: string | undefined;
}

export interface FieldOptions_FeatureSupport {
  editionIntroduced?: Edition | undefined;
  editionDeprecated?: Edition | undefined;
  deprecationWarning?: string | undefined;
  editionRemoved?: Edition | undefined;
}

export interface OneofOptions {
  features?: FeatureSet | undefined;
  uninterpretedOption: UninterpretedOption[];
}

export interface ServiceOptions {
  features?: FeatureSet | undefined;
  deprecated?: boolean | undefined;
  uninterpretedOption: UninterpretedOption[];
}

export interface MethodOptions {
  deprecated?: boolean | undefined;
  idempotencyLevel?: MethodOptions_IdempotencyLevel | undefined;
  features?: FeatureSet | undefined;
  uninterpretedOption: UninterpretedOption[];
}

export enum MethodOptions_IdempotencyLevel {
  IDEMPOTENCY_UNKNOWN = 0,
  NO_SIDE_EFFECTS = 1,
  IDEMPOTENT = 2,
}

export interface UninterpretedOption {
  name: UninterpretedOption_NamePart[];
  identifierValue?: string | undefined;
  positiveIntValue?: string | undefined;
  negativeIntValue?: string | undefined;
  doubleValue?: number | undefined;
  stringValue?: Uint8Array | undefined;
  aggregateValue?: string | undefined;
}

export interface UninterpretedOption_NamePart {
  namePart: string;
  isExtension: boolean;
}

export interface FeatureSet {
  fieldPresence?: FeatureSet_FieldPresence | undefined;
  enumType?: FeatureSet_EnumType | undefined;
  repeatedFieldEncoding?: FeatureSet_RepeatedFieldEncoding | undefined;
  utf8Validation?: FeatureSet_Utf8Validation | undefined;
  messageEncoding?: FeatureSet_MessageEncoding | undefined;
  jsonFormat?: FeatureSet_JsonFormat | undefined;
  enforceNamingStyle?: FeatureSet_EnforceNamingStyle | undefined;
  defaultSymbolVisibility?:
    | FeatureSet_VisibilityFeature_DefaultSymbolVisibility
    | undefined;
}

export enum FeatureSet_FieldPresence {
  FIELD_PRESENCE_UNKNOWN = 0,
  EXPLICIT = 1,
  IMPLICIT = 2,
  LEGACY_REQUIRED = 3,
}

export enum FeatureSet_EnumType {
  ENUM_TYPE_UNKNOWN = 0,
  OPEN = 1,
  CLOSED = 2,
}

export enum FeatureSet_RepeatedFieldEncoding {
  REPEATED_FIELD_ENCODING_UNKNOWN = 0,
  PACKED = 1,
  EXPANDED = 2,
}

export enum FeatureSet_Utf8Validation {
  UTF8_VALIDATION_UNKNOWN = 0,
  VERIFY = 2,
  NONE = 3,
}

export enum FeatureSet_MessageEncoding {
  MESSAGE_ENCODING_UNKNOWN = 0,
  LENGTH_PREFIXED = 1,
  DELIMITED = 2,
}

export enum FeatureSet_JsonFormat {
  JSON_FORMAT_UNKNOWN = 0,
  ALLOW = 1,
  LEGACY_BEST_EFFORT = 2,
}

export enum FeatureSet_EnforceNamingStyle {
  ENFORCE_NAMING_STYLE_UNKNOWN = 0,
  STYLE2024 = 1,
  STYLE_LEGACY = 2,
}

export interface FeatureSet_VisibilityFeature {}

export enum FeatureSet_VisibilityFeature_DefaultSymbolVisibility {
  DEFAULT_SYMBOL_VISIBILITY_UNKNOWN = 0,
  EXPORT_ALL = 1,
  EXPORT_TOP_LEVEL = 2,
  LOCAL_ALL = 3,
  STRICT = 4,
}

function createBaseFileOptions(): FileOptions {
  return {
    javaPackage: "",
    javaOuterClassname: "",
    javaMultipleFiles: false,
    javaGenerateEqualsAndHash: false,
    javaStringCheckUtf8: false,
    optimizeFor: 1,
    goPackage: "",
    ccGenericServices: false,
    javaGenericServices: false,
    pyGenericServices: false,
    deprecated: false,
    ccEnableArenas: true,
    objcClassPrefix: "",
    csharpNamespace: "",
    swiftPrefix: "",
    phpClassPrefix: "",
    phpNamespace: "",
    phpMetadataNamespace: "",
    rubyPackage: "",
    features: undefined,
    uninterpretedOption: [],
  };
}

export const FileOptions: MessageFns<FileOptions> = {
  encode(
    message: FileOptions,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.javaPackage !== undefined && message.javaPackage !== "") {
      writer.uint32(10).string(message.javaPackage);
    }
    if (
      message.javaOuterClassname !== undefined &&
      message.javaOuterClassname !== ""
    ) {
      writer.uint32(66).string(message.javaOuterClassname);
    }
    if (
      message.javaMultipleFiles !== undefined &&
      message.javaMultipleFiles !== false
    ) {
      writer.uint32(80).bool(message.javaMultipleFiles);
    }
    if (
      message.javaGenerateEqualsAndHash !== undefined &&
      message.javaGenerateEqualsAndHash !== false
    ) {
      writer.uint32(160).bool(message.javaGenerateEqualsAndHash);
    }
    if (
      message.javaStringCheckUtf8 !== undefined &&
      message.javaStringCheckUtf8 !== false
    ) {
      writer.uint32(216).bool(message.javaStringCheckUtf8);
    }
    if (message.optimizeFor !== undefined && message.optimizeFor !== 1) {
      writer.uint32(72).int32(message.optimizeFor);
    }
    if (message.goPackage !== undefined && message.goPackage !== "") {
      writer.uint32(90).string(message.goPackage);
    }
    if (
      message.ccGenericServices !== undefined &&
      message.ccGenericServices !== false
    ) {
      writer.uint32(128).bool(message.ccGenericServices);
    }
    if (
      message.javaGenericServices !== undefined &&
      message.javaGenericServices !== false
    ) {
      writer.uint32(136).bool(message.javaGenericServices);
    }
    if (
      message.pyGenericServices !== undefined &&
      message.pyGenericServices !== false
    ) {
      writer.uint32(144).bool(message.pyGenericServices);
    }
    if (message.deprecated !== undefined && message.deprecated !== false) {
      writer.uint32(184).bool(message.deprecated);
    }
    if (
      message.ccEnableArenas !== undefined &&
      message.ccEnableArenas !== true
    ) {
      writer.uint32(248).bool(message.ccEnableArenas);
    }
    if (
      message.objcClassPrefix !== undefined &&
      message.objcClassPrefix !== ""
    ) {
      writer.uint32(290).string(message.objcClassPrefix);
    }
    if (
      message.csharpNamespace !== undefined &&
      message.csharpNamespace !== ""
    ) {
      writer.uint32(298).string(message.csharpNamespace);
    }
    if (message.swiftPrefix !== undefined && message.swiftPrefix !== "") {
      writer.uint32(314).string(message.swiftPrefix);
    }
    if (message.phpClassPrefix !== undefined && message.phpClassPrefix !== "") {
      writer.uint32(322).string(message.phpClassPrefix);
    }
    if (message.phpNamespace !== undefined && message.phpNamespace !== "") {
      writer.uint32(330).string(message.phpNamespace);
    }
    if (
      message.phpMetadataNamespace !== undefined &&
      message.phpMetadataNamespace !== ""
    ) {
      writer.uint32(354).string(message.phpMetadataNamespace);
    }
    if (message.rubyPackage !== undefined && message.rubyPackage !== "") {
      writer.uint32(362).string(message.rubyPackage);
    }
    if (message.features !== undefined) {
      FeatureSet.encode(message.features, writer.uint32(402).fork()).join();
    }
    for (const v of message.uninterpretedOption) {
      UninterpretedOption.encode(v!, writer.uint32(7994).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FileOptions {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFileOptions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.javaPackage = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.javaOuterClassname = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.javaMultipleFiles = reader.bool();
          continue;
        }
        case 20: {
          if (tag !== 160) {
            break;
          }

          message.javaGenerateEqualsAndHash = reader.bool();
          continue;
        }
        case 27: {
          if (tag !== 216) {
            break;
          }

          message.javaStringCheckUtf8 = reader.bool();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.optimizeFor = reader.int32() as any;
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.goPackage = reader.string();
          continue;
        }
        case 16: {
          if (tag !== 128) {
            break;
          }

          message.ccGenericServices = reader.bool();
          continue;
        }
        case 17: {
          if (tag !== 136) {
            break;
          }

          message.javaGenericServices = reader.bool();
          continue;
        }
        case 18: {
          if (tag !== 144) {
            break;
          }

          message.pyGenericServices = reader.bool();
          continue;
        }
        case 23: {
          if (tag !== 184) {
            break;
          }

          message.deprecated = reader.bool();
          continue;
        }
        case 31: {
          if (tag !== 248) {
            break;
          }

          message.ccEnableArenas = reader.bool();
          continue;
        }
        case 36: {
          if (tag !== 290) {
            break;
          }

          message.objcClassPrefix = reader.string();
          continue;
        }
        case 37: {
          if (tag !== 298) {
            break;
          }

          message.csharpNamespace = reader.string();
          continue;
        }
        case 39: {
          if (tag !== 314) {
            break;
          }

          message.swiftPrefix = reader.string();
          continue;
        }
        case 40: {
          if (tag !== 322) {
            break;
          }

          message.phpClassPrefix = reader.string();
          continue;
        }
        case 41: {
          if (tag !== 330) {
            break;
          }

          message.phpNamespace = reader.string();
          continue;
        }
        case 44: {
          if (tag !== 354) {
            break;
          }

          message.phpMetadataNamespace = reader.string();
          continue;
        }
        case 45: {
          if (tag !== 362) {
            break;
          }

          message.rubyPackage = reader.string();
          continue;
        }
        case 50: {
          if (tag !== 402) {
            break;
          }

          message.features = FeatureSet.decode(reader, reader.uint32());
          continue;
        }
        case 999: {
          if (tag !== 7994) {
            break;
          }

          message.uninterpretedOption.push(
            UninterpretedOption.decode(reader, reader.uint32()),
          );
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseMessageOptions(): MessageOptions {
  return {
    messageSetWireFormat: false,
    noStandardDescriptorAccessor: false,
    deprecated: false,
    mapEntry: false,
    deprecatedLegacyJsonFieldConflicts: false,
    features: undefined,
    uninterpretedOption: [],
  };
}

export const MessageOptions: MessageFns<MessageOptions> = {
  encode(
    message: MessageOptions,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (
      message.messageSetWireFormat !== undefined &&
      message.messageSetWireFormat !== false
    ) {
      writer.uint32(8).bool(message.messageSetWireFormat);
    }
    if (
      message.noStandardDescriptorAccessor !== undefined &&
      message.noStandardDescriptorAccessor !== false
    ) {
      writer.uint32(16).bool(message.noStandardDescriptorAccessor);
    }
    if (message.deprecated !== undefined && message.deprecated !== false) {
      writer.uint32(24).bool(message.deprecated);
    }
    if (message.mapEntry !== undefined && message.mapEntry !== false) {
      writer.uint32(56).bool(message.mapEntry);
    }
    if (
      message.deprecatedLegacyJsonFieldConflicts !== undefined &&
      message.deprecatedLegacyJsonFieldConflicts !== false
    ) {
      writer.uint32(88).bool(message.deprecatedLegacyJsonFieldConflicts);
    }
    if (message.features !== undefined) {
      FeatureSet.encode(message.features, writer.uint32(98).fork()).join();
    }
    for (const v of message.uninterpretedOption) {
      UninterpretedOption.encode(v!, writer.uint32(7994).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MessageOptions {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessageOptions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.messageSetWireFormat = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.noStandardDescriptorAccessor = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.deprecated = reader.bool();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.mapEntry = reader.bool();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.deprecatedLegacyJsonFieldConflicts = reader.bool();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.features = FeatureSet.decode(reader, reader.uint32());
          continue;
        }
        case 999: {
          if (tag !== 7994) {
            break;
          }

          message.uninterpretedOption.push(
            UninterpretedOption.decode(reader, reader.uint32()),
          );
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseFieldOptions(): FieldOptions {
  return {
    ctype: 0,
    packed: false,
    jstype: 0,
    lazy: false,
    unverifiedLazy: false,
    deprecated: false,
    weak: false,
    debugRedact: false,
    retention: 0,
    targets: [],
    editionDefaults: [],
    features: undefined,
    featureSupport: undefined,
    uninterpretedOption: [],
  };
}

export const FieldOptions: MessageFns<FieldOptions> = {
  encode(
    message: FieldOptions,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.ctype !== undefined && message.ctype !== 0) {
      writer.uint32(8).int32(message.ctype);
    }
    if (message.packed !== undefined && message.packed !== false) {
      writer.uint32(16).bool(message.packed);
    }
    if (message.jstype !== undefined && message.jstype !== 0) {
      writer.uint32(48).int32(message.jstype);
    }
    if (message.lazy !== undefined && message.lazy !== false) {
      writer.uint32(40).bool(message.lazy);
    }
    if (
      message.unverifiedLazy !== undefined &&
      message.unverifiedLazy !== false
    ) {
      writer.uint32(120).bool(message.unverifiedLazy);
    }
    if (message.deprecated !== undefined && message.deprecated !== false) {
      writer.uint32(24).bool(message.deprecated);
    }
    if (message.weak !== undefined && message.weak !== false) {
      writer.uint32(80).bool(message.weak);
    }
    if (message.debugRedact !== undefined && message.debugRedact !== false) {
      writer.uint32(128).bool(message.debugRedact);
    }
    if (message.retention !== undefined && message.retention !== 0) {
      writer.uint32(136).int32(message.retention);
    }
    writer.uint32(154).fork();
    for (const v of message.targets) {
      writer.int32(v);
    }
    writer.join();
    for (const v of message.editionDefaults) {
      FieldOptions_EditionDefault.encode(v!, writer.uint32(162).fork()).join();
    }
    if (message.features !== undefined) {
      FeatureSet.encode(message.features, writer.uint32(170).fork()).join();
    }
    if (message.featureSupport !== undefined) {
      FieldOptions_FeatureSupport.encode(
        message.featureSupport,
        writer.uint32(178).fork(),
      ).join();
    }
    for (const v of message.uninterpretedOption) {
      UninterpretedOption.encode(v!, writer.uint32(7994).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FieldOptions {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFieldOptions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.ctype = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.packed = reader.bool();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.jstype = reader.int32() as any;
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.lazy = reader.bool();
          continue;
        }
        case 15: {
          if (tag !== 120) {
            break;
          }

          message.unverifiedLazy = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.deprecated = reader.bool();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.weak = reader.bool();
          continue;
        }
        case 16: {
          if (tag !== 128) {
            break;
          }

          message.debugRedact = reader.bool();
          continue;
        }
        case 17: {
          if (tag !== 136) {
            break;
          }

          message.retention = reader.int32() as any;
          continue;
        }
        case 19: {
          if (tag === 152) {
            message.targets.push(reader.int32() as any);

            continue;
          }

          if (tag === 154) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.targets.push(reader.int32() as any);
            }

            continue;
          }

          break;
        }
        case 20: {
          if (tag !== 162) {
            break;
          }

          message.editionDefaults.push(
            FieldOptions_EditionDefault.decode(reader, reader.uint32()),
          );
          continue;
        }
        case 21: {
          if (tag !== 170) {
            break;
          }

          message.features = FeatureSet.decode(reader, reader.uint32());
          continue;
        }
        case 22: {
          if (tag !== 178) {
            break;
          }

          message.featureSupport = FieldOptions_FeatureSupport.decode(
            reader,
            reader.uint32(),
          );
          continue;
        }
        case 999: {
          if (tag !== 7994) {
            break;
          }

          message.uninterpretedOption.push(
            UninterpretedOption.decode(reader, reader.uint32()),
          );
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseFieldOptions_EditionDefault(): FieldOptions_EditionDefault {
  return { edition: 0, value: "" };
}

export const FieldOptions_EditionDefault: MessageFns<FieldOptions_EditionDefault> =
  {
    encode(
      message: FieldOptions_EditionDefault,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      if (message.edition !== undefined && message.edition !== 0) {
        writer.uint32(24).int32(message.edition);
      }
      if (message.value !== undefined && message.value !== "") {
        writer.uint32(18).string(message.value);
      }
      return writer;
    },

    decode(
      input: BinaryReader | Uint8Array,
      length?: number,
    ): FieldOptions_EditionDefault {
      const reader =
        input instanceof BinaryReader ? input : new BinaryReader(input);
      const end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseFieldOptions_EditionDefault();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 3: {
            if (tag !== 24) {
              break;
            }

            message.edition = reader.int32() as any;
            continue;
          }
          case 2: {
            if (tag !== 18) {
              break;
            }

            message.value = reader.string();
            continue;
          }
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },
  };

function createBaseFieldOptions_FeatureSupport(): FieldOptions_FeatureSupport {
  return {
    editionIntroduced: 0,
    editionDeprecated: 0,
    deprecationWarning: "",
    editionRemoved: 0,
  };
}

export const FieldOptions_FeatureSupport: MessageFns<FieldOptions_FeatureSupport> =
  {
    encode(
      message: FieldOptions_FeatureSupport,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      if (
        message.editionIntroduced !== undefined &&
        message.editionIntroduced !== 0
      ) {
        writer.uint32(8).int32(message.editionIntroduced);
      }
      if (
        message.editionDeprecated !== undefined &&
        message.editionDeprecated !== 0
      ) {
        writer.uint32(16).int32(message.editionDeprecated);
      }
      if (
        message.deprecationWarning !== undefined &&
        message.deprecationWarning !== ""
      ) {
        writer.uint32(26).string(message.deprecationWarning);
      }
      if (
        message.editionRemoved !== undefined &&
        message.editionRemoved !== 0
      ) {
        writer.uint32(32).int32(message.editionRemoved);
      }
      return writer;
    },

    decode(
      input: BinaryReader | Uint8Array,
      length?: number,
    ): FieldOptions_FeatureSupport {
      const reader =
        input instanceof BinaryReader ? input : new BinaryReader(input);
      const end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseFieldOptions_FeatureSupport();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1: {
            if (tag !== 8) {
              break;
            }

            message.editionIntroduced = reader.int32() as any;
            continue;
          }
          case 2: {
            if (tag !== 16) {
              break;
            }

            message.editionDeprecated = reader.int32() as any;
            continue;
          }
          case 3: {
            if (tag !== 26) {
              break;
            }

            message.deprecationWarning = reader.string();
            continue;
          }
          case 4: {
            if (tag !== 32) {
              break;
            }

            message.editionRemoved = reader.int32() as any;
            continue;
          }
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },
  };

function createBaseOneofOptions(): OneofOptions {
  return { features: undefined, uninterpretedOption: [] };
}

export const OneofOptions: MessageFns<OneofOptions> = {
  encode(
    message: OneofOptions,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.features !== undefined) {
      FeatureSet.encode(message.features, writer.uint32(10).fork()).join();
    }
    for (const v of message.uninterpretedOption) {
      UninterpretedOption.encode(v!, writer.uint32(7994).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OneofOptions {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOneofOptions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.features = FeatureSet.decode(reader, reader.uint32());
          continue;
        }
        case 999: {
          if (tag !== 7994) {
            break;
          }

          message.uninterpretedOption.push(
            UninterpretedOption.decode(reader, reader.uint32()),
          );
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseServiceOptions(): ServiceOptions {
  return { features: undefined, deprecated: false, uninterpretedOption: [] };
}

export const ServiceOptions: MessageFns<ServiceOptions> = {
  encode(
    message: ServiceOptions,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.features !== undefined) {
      FeatureSet.encode(message.features, writer.uint32(274).fork()).join();
    }
    if (message.deprecated !== undefined && message.deprecated !== false) {
      writer.uint32(264).bool(message.deprecated);
    }
    for (const v of message.uninterpretedOption) {
      UninterpretedOption.encode(v!, writer.uint32(7994).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ServiceOptions {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseServiceOptions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 34: {
          if (tag !== 274) {
            break;
          }

          message.features = FeatureSet.decode(reader, reader.uint32());
          continue;
        }
        case 33: {
          if (tag !== 264) {
            break;
          }

          message.deprecated = reader.bool();
          continue;
        }
        case 999: {
          if (tag !== 7994) {
            break;
          }

          message.uninterpretedOption.push(
            UninterpretedOption.decode(reader, reader.uint32()),
          );
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseMethodOptions(): MethodOptions {
  return {
    deprecated: false,
    idempotencyLevel: 0,
    features: undefined,
    uninterpretedOption: [],
  };
}

export const MethodOptions: MessageFns<MethodOptions> = {
  encode(
    message: MethodOptions,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.deprecated !== undefined && message.deprecated !== false) {
      writer.uint32(264).bool(message.deprecated);
    }
    if (
      message.idempotencyLevel !== undefined &&
      message.idempotencyLevel !== 0
    ) {
      writer.uint32(272).int32(message.idempotencyLevel);
    }
    if (message.features !== undefined) {
      FeatureSet.encode(message.features, writer.uint32(282).fork()).join();
    }
    for (const v of message.uninterpretedOption) {
      UninterpretedOption.encode(v!, writer.uint32(7994).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MethodOptions {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMethodOptions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 33: {
          if (tag !== 264) {
            break;
          }

          message.deprecated = reader.bool();
          continue;
        }
        case 34: {
          if (tag !== 272) {
            break;
          }

          message.idempotencyLevel = reader.int32() as any;
          continue;
        }
        case 35: {
          if (tag !== 282) {
            break;
          }

          message.features = FeatureSet.decode(reader, reader.uint32());
          continue;
        }
        case 999: {
          if (tag !== 7994) {
            break;
          }

          message.uninterpretedOption.push(
            UninterpretedOption.decode(reader, reader.uint32()),
          );
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseUninterpretedOption(): UninterpretedOption {
  return {
    name: [],
    identifierValue: "",
    positiveIntValue: "0",
    negativeIntValue: "0",
    doubleValue: 0,
    stringValue: new Uint8Array(0),
    aggregateValue: "",
  };
}

export const UninterpretedOption: MessageFns<UninterpretedOption> = {
  encode(
    message: UninterpretedOption,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    for (const v of message.name) {
      UninterpretedOption_NamePart.encode(v!, writer.uint32(18).fork()).join();
    }
    if (
      message.identifierValue !== undefined &&
      message.identifierValue !== ""
    ) {
      writer.uint32(26).string(message.identifierValue);
    }
    if (
      message.positiveIntValue !== undefined &&
      message.positiveIntValue !== "0"
    ) {
      writer.uint32(32).uint64(message.positiveIntValue);
    }
    if (
      message.negativeIntValue !== undefined &&
      message.negativeIntValue !== "0"
    ) {
      writer.uint32(40).int64(message.negativeIntValue);
    }
    if (message.doubleValue !== undefined && message.doubleValue !== 0) {
      writer.uint32(49).double(message.doubleValue);
    }
    if (message.stringValue !== undefined && message.stringValue.length !== 0) {
      writer.uint32(58).bytes(message.stringValue);
    }
    if (message.aggregateValue !== undefined && message.aggregateValue !== "") {
      writer.uint32(66).string(message.aggregateValue);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): UninterpretedOption {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUninterpretedOption();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name.push(
            UninterpretedOption_NamePart.decode(reader, reader.uint32()),
          );
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.identifierValue = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.positiveIntValue = reader.uint64().toString();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.negativeIntValue = reader.int64().toString();
          continue;
        }
        case 6: {
          if (tag !== 49) {
            break;
          }

          message.doubleValue = reader.double();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.stringValue = reader.bytes();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.aggregateValue = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseUninterpretedOption_NamePart(): UninterpretedOption_NamePart {
  return { namePart: "", isExtension: false };
}

export const UninterpretedOption_NamePart: MessageFns<UninterpretedOption_NamePart> =
  {
    encode(
      message: UninterpretedOption_NamePart,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      if (message.namePart !== "") {
        writer.uint32(10).string(message.namePart);
      }
      if (message.isExtension !== false) {
        writer.uint32(16).bool(message.isExtension);
      }
      return writer;
    },

    decode(
      input: BinaryReader | Uint8Array,
      length?: number,
    ): UninterpretedOption_NamePart {
      const reader =
        input instanceof BinaryReader ? input : new BinaryReader(input);
      const end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseUninterpretedOption_NamePart();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1: {
            if (tag !== 10) {
              break;
            }

            message.namePart = reader.string();
            continue;
          }
          case 2: {
            if (tag !== 16) {
              break;
            }

            message.isExtension = reader.bool();
            continue;
          }
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },
  };

function createBaseFeatureSet(): FeatureSet {
  return {
    fieldPresence: 0,
    enumType: 0,
    repeatedFieldEncoding: 0,
    utf8Validation: 0,
    messageEncoding: 0,
    jsonFormat: 0,
    enforceNamingStyle: 0,
    defaultSymbolVisibility: 0,
  };
}

export const FeatureSet: MessageFns<FeatureSet> = {
  encode(
    message: FeatureSet,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.fieldPresence !== undefined && message.fieldPresence !== 0) {
      writer.uint32(8).int32(message.fieldPresence);
    }
    if (message.enumType !== undefined && message.enumType !== 0) {
      writer.uint32(16).int32(message.enumType);
    }
    if (
      message.repeatedFieldEncoding !== undefined &&
      message.repeatedFieldEncoding !== 0
    ) {
      writer.uint32(24).int32(message.repeatedFieldEncoding);
    }
    if (message.utf8Validation !== undefined && message.utf8Validation !== 0) {
      writer.uint32(32).int32(message.utf8Validation);
    }
    if (
      message.messageEncoding !== undefined &&
      message.messageEncoding !== 0
    ) {
      writer.uint32(40).int32(message.messageEncoding);
    }
    if (message.jsonFormat !== undefined && message.jsonFormat !== 0) {
      writer.uint32(48).int32(message.jsonFormat);
    }
    if (
      message.enforceNamingStyle !== undefined &&
      message.enforceNamingStyle !== 0
    ) {
      writer.uint32(56).int32(message.enforceNamingStyle);
    }
    if (
      message.defaultSymbolVisibility !== undefined &&
      message.defaultSymbolVisibility !== 0
    ) {
      writer.uint32(64).int32(message.defaultSymbolVisibility);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FeatureSet {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFeatureSet();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.fieldPresence = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.enumType = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.repeatedFieldEncoding = reader.int32() as any;
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.utf8Validation = reader.int32() as any;
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.messageEncoding = reader.int32() as any;
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.jsonFormat = reader.int32() as any;
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.enforceNamingStyle = reader.int32() as any;
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.defaultSymbolVisibility = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseFeatureSet_VisibilityFeature(): FeatureSet_VisibilityFeature {
  return {};
}

export const FeatureSet_VisibilityFeature: MessageFns<FeatureSet_VisibilityFeature> =
  {
    encode(
      _: FeatureSet_VisibilityFeature,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      return writer;
    },

    decode(
      input: BinaryReader | Uint8Array,
      length?: number,
    ): FeatureSet_VisibilityFeature {
      const reader =
        input instanceof BinaryReader ? input : new BinaryReader(input);
      const end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseFeatureSet_VisibilityFeature();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },
  };

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
}
