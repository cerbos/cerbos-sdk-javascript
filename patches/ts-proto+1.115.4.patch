diff --git a/node_modules/ts-proto/build/main.js b/node_modules/ts-proto/build/main.js
index d1a9b70..4828952 100644
--- a/node_modules/ts-proto/build/main.js
+++ b/node_modules/ts-proto/build/main.js
@@ -188,9 +188,6 @@ function generateFile(ctx, fileDesc) {
         if (v instanceof ConditionalOutput_1.ConditionalOutput) {
             return ts_poet_1.code `${v.ifUsed}`;
         }
-        else if (v instanceof ts_poet_1.Code) {
-            return v;
-        }
         else {
             return ts_poet_1.code ``;
         }
@@ -237,7 +234,7 @@ function makeLongUtils(options, bytes) {
     //
     // I.e there is not an import for long that "just works" in both esModuleInterop and
     // not esModuleInterop.
-    const Long = options.esModuleInterop ? ts_poet_1.imp('Long=long') : ts_poet_1.imp('Long*long');
+    const LongImp = options.esModuleInterop ? ts_poet_1.imp('Long=long') : ts_poet_1.imp('Long*long');
     const disclaimer = options.esModuleInterop
         ? ''
         : `
@@ -245,15 +242,13 @@ function makeLongUtils(options, bytes) {
     // add '--ts_proto_opt=esModuleInterop=true' as a flag when calling 'protoc'.`;
     // Kinda hacky, but we always init long unless in onlyTypes mode. I'd rather do
     // this more implicitly, like if `Long@long` is imported or something like that.
-    const longInit = options.onlyTypes
-        ? ts_poet_1.code ``
-        : ts_poet_1.code `
+    const Long = ts_poet_1.conditionalOutput('Long', ts_poet_1.code `
       ${disclaimer}
-      if (${util}.Long !== ${Long}) {
-        ${util}.Long = ${Long} as any;
+      if (${util}.Long !== ${LongImp}) {
+        ${util}.Long = ${LongImp} as any;
         ${configure}();
       }
-    `;
+    `);
     // TODO This is unused?
     const numberToLong = ts_poet_1.conditionalOutput('numberToLong', ts_poet_1.code `
       function numberToLong(number: number) {
@@ -273,7 +268,7 @@ function makeLongUtils(options, bytes) {
         return long.toNumber();
       }
     `);
-    return { numberToLong, longToNumber, longToString, longInit, Long };
+    return { numberToLong, longToNumber, longToString, Long };
 }
 function makeByteUtils() {
     const globalThis = ts_poet_1.conditionalOutput('globalThis', ts_poet_1.code `
