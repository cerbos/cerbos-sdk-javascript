diff --git a/node_modules/ts-proto/build/utils.js b/node_modules/ts-proto/build/utils.js
index ddac17a..3bfe164 100644
--- a/node_modules/ts-proto/build/utils.js
+++ b/node_modules/ts-proto/build/utils.js
@@ -80,37 +80,6 @@ exports.upperFirst = upperFirst;
 const CloseComment = /\*\//g;
 /** Removes potentially harmful characters from comments and pushes it into chunks. */
 function maybeAddComment(desc, chunks, deprecated, prefix = "") {
-    let lines = [];
-    if (desc.leadingComments || desc.trailingComments) {
-        let content = (desc.leadingComments || desc.trailingComments || "").replace(CloseComment, "* /").trim();
-        // Detect /** ... */ comments
-        const isDoubleStar = content.startsWith("*");
-        if (isDoubleStar) {
-            content = content.substring(1).trim();
-        }
-        // Prefix things like the enum name.
-        if (prefix) {
-            content = prefix + content;
-        }
-        lines = content.split("\n").map((l) => l.replace(/^ /, "").replace(/\n/, ""));
-    }
-    // Deprecated comment should be added even if no other comment was added
-    if (deprecated) {
-        if (lines.length > 0) {
-            lines.push("");
-        }
-        lines.push("@deprecated");
-    }
-    let comment;
-    if (lines.length === 1) {
-        comment = (0, ts_poet_1.code) `/** ${lines[0]} */`;
-    }
-    else {
-        comment = (0, ts_poet_1.code) `/**\n * ${lines.join("\n * ")}\n */`;
-    }
-    if (lines.length > 0) {
-        chunks.push((0, ts_poet_1.code) `\n\n${comment}\n\n`);
-    }
 }
 exports.maybeAddComment = maybeAddComment;
 // Comment block at the top of every source file, since these comments require specific
